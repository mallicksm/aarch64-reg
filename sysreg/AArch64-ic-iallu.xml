<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE register_page SYSTEM "registers.dtd">
<!-- Copyright (c) 2010-2018 Arm Limited or its affiliates. All rights reserved. -->
<!-- This document is Non-Confidential. This document may only be used and distributed in accordance with the terms of the agreement entered into by Arm and the party that Arm delivered this document to. -->
<?xml-stylesheet href="one_register.xsl" type="text/xsl" ?>






<register_page>
  <registers>
    <register execution_state="AArch64" is_register="False" is_internal="True" is_banked="False" is_stub_entry="False">
      <reg_short_name>IC IALLU</reg_short_name>
      <reg_long_name>Instruction Cache Invalidate All to PoU</reg_long_name>
      
      

          <reg_reset_value></reg_reset_value>
      <reg_mappings>
          <reg_mapping>
              
            <mapped_name filename="AArch32-iciallu.xml">ICIALLU</mapped_name>
            <mapped_type>Functional</mapped_type>
              <mapped_execution_state>AArch32</mapped_execution_state>


          </reg_mapping>
      </reg_mappings>
      <reg_purpose>
        
    
      <purpose_text>
        <para>Invalidate all instruction caches to Point of Unification.</para>
      </purpose_text>

      </reg_purpose>
      <reg_groups>
            <reg_group>Cache maintenance instructions</reg_group>
      </reg_groups>
      <reg_configuration>
        

      </reg_configuration>
      <reg_attributes>
          
    
      <attributes_text>
        <para>IC IALLU is a 64-bit System instruction.</para>
      </attributes_text>

      </reg_attributes>
      <reg_fieldsets>
        






      </reg_fieldsets>
      


<access_mechanisms>
  
    
      <access_permission_text>
        <para>When executing this instruction Xt should be encoded as <binarynumber>0b11111</binarynumber>. If the Xt field is not set to <binarynumber>0b11111</binarynumber>, it is <arm-defined-word>CONSTRAINED UNPREDICTABLE</arm-defined-word> whether:</para>

      </access_permission_text>
      <access_permission_text>
        <list type="unordered">
<listitem><content>
<para>The instruction is <arm-defined-word>UNDEFINED</arm-defined-word>.</para>
</content>
</listitem><listitem><content>
<para>The instruction behaves as if the Xt field is set to <binarynumber>0b11111</binarynumber>.</para>
</content>
</listitem></list>
      </access_permission_text>


      <access_mechanism accessor="IC_SYS IALLU">
        <encoding>
          
          <access_instruction>IC IALLU{, &lt;Xt&gt;}</access_instruction>
            
            <enc n="op0" v="0b01"/>
            
            <enc n="op1" v="0b000"/>
            
            <enc n="CRn" v="0b0111"/>
            
            <enc n="CRm" v="0b0101"/>
            
            <enc n="op2" v="0b000"/>
        </encoding>
          <access_permission>
            <ps name="IC_SYS" sections="1" secttype="access_permission">
              <pstext>
if PSTATE.EL == EL0 then
    UNDEFINED;
elsif PSTATE.EL == EL1 then
    if EL2Enabled() &amp;&amp; HCR_EL2.TPU == '1' then
        AArch64.SystemAccessTrap(EL2, 0x18);
    elsif EL2Enabled() &amp;&amp; HCR_EL2.TOCU == '1' then
        AArch64.SystemAccessTrap(EL2, 0x18);
    elsif EL2Enabled() &amp;&amp; (!HaveEL(EL3) || SCR_EL3.FGTEn == '1') &amp;&amp; HFGITR_EL2.ICIALLU == '1' then
        AArch64.SystemAccessTrap(EL2, 0x18);
    elsif EL2Enabled() &amp;&amp; HCR_EL2.FB == '1' then
        IC_IALLUIS();
    else
        IC_IALLU();
elsif PSTATE.EL == EL2 then
    IC_IALLU();
elsif PSTATE.EL == EL3 then
    IC_IALLU();
              </pstext>
            </ps>
          </access_permission>
      </access_mechanism>
</access_mechanisms>

      <arch_variants>
      </arch_variants>
  </register>
</registers>

    <timestamp>01/07/2020 15:57; 80324f0b9997bede489cc15ad1565345720bcd2a</timestamp>
</register_page>