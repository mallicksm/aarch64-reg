<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE register_page SYSTEM "registers.dtd">
<!-- Copyright (c) 2010-2018 Arm Limited or its affiliates. All rights reserved. -->
<!-- This document is Non-Confidential. This document may only be used and distributed in accordance with the terms of the agreement entered into by Arm and the party that Arm delivered this document to. -->
<?xml-stylesheet href="one_register.xsl" type="text/xsl" ?>






<register_page>
  <registers>
    <register execution_state="AArch64" is_register="True" is_internal="True" is_banked="True" is_stub_entry="False">
      <reg_short_name>ICC_SRE_EL1</reg_short_name>
      <reg_long_name>Interrupt Controller System Register Enable register (EL1)</reg_long_name>
      
      

          <reg_reset_value></reg_reset_value>
      <reg_mappings>
          <reg_mapping>
              
            <mapped_name filename="AArch32-icc_sre.xml">ICC_SRE</mapped_name>
            <mapped_type>Architectural</mapped_type>
              <mapped_execution_state>AArch32</mapped_execution_state>
              <mapped_from_startbit>31</mapped_from_startbit>
              <mapped_from_endbit>0</mapped_from_endbit>
              <mapped_from_sec_state>S</mapped_from_sec_state>

              <mapped_to_startbit>31</mapped_to_startbit>
              <mapped_to_endbit>0</mapped_to_endbit>
              <mapped_to_sec_state>S</mapped_to_sec_state>

          </reg_mapping>
          <reg_mapping>
              
            <mapped_name filename="AArch32-icc_sre.xml">ICC_SRE</mapped_name>
            <mapped_type>Architectural</mapped_type>
              <mapped_execution_state>AArch32</mapped_execution_state>
              <mapped_from_startbit>31</mapped_from_startbit>
              <mapped_from_endbit>0</mapped_from_endbit>
              <mapped_from_sec_state>NS</mapped_from_sec_state>

              <mapped_to_startbit>31</mapped_to_startbit>
              <mapped_to_endbit>0</mapped_to_endbit>
              <mapped_to_sec_state>NS</mapped_to_sec_state>

          </reg_mapping>
      </reg_mappings>
      <reg_purpose>
        
    
      <purpose_text>
        <para>Controls whether the System register interface or the memory-mapped interface to the GIC CPU interface is used for EL1.</para>
      </purpose_text>

      </reg_purpose>
      <reg_groups>
            <reg_group>GIC control registers</reg_group>
            <reg_group>GIC system registers</reg_group>
      </reg_groups>
      <reg_configuration>
        

      </reg_configuration>
      <reg_attributes>
          <attributes_text>
            <para>ICC_SRE_EL1 is a 64-bit register.</para>
          </attributes_text>
      </reg_attributes>
      <reg_fieldsets>
        





  <fields length="64">
    <text_before_fields>
      
  

    </text_before_fields>
    
        <field
           id="0_63_3"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
           rwtype="RES0"
        >
          <field_name>0</field_name>
          <field_msb>63</field_msb>
          <field_lsb>3</field_lsb>
          <field_description order="before">
            <para>Reserved, <arm-defined-word>RES0</arm-defined-word>.</para>
          </field_description>
            <field_values>
            </field_values>
      </field>
        <field
           id="DIB_2_2"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>DIB</field_name>
          <field_msb>2</field_msb>
          <field_lsb>2</field_lsb>
          <field_description order="before">
          
  <para>Disable IRQ bypass.</para>

          </field_description>
            <field_values>
                  <field_value_instance>
        <field_value>0b0</field_value>
        <field_value_description>
  <para>IRQ bypass enabled.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b1</field_value>
        <field_value_description>
  <para>IRQ bypass disabled.</para>
</field_value_description>
    </field_value_instance>
            </field_values>
          <field_description order="after">
            
  <para>If EL3 is implemented and <register_link state="ext" id="ext-gicd_ctlr.xml">GICD_CTLR</register_link>.DS == 0, this field is a read-only alias of <register_link state="AArch64" id="AArch64-icc_sre_el3.xml">ICC_SRE_EL3</register_link>.DIB.</para>
<para>If EL3 is implemented and <register_link state="ext" id="ext-gicd_ctlr.xml">GICD_CTLR</register_link>.DS == 1, and EL2 is not implemented, this field is a read-write alias of <register_link state="AArch64" id="AArch64-icc_sre_el3.xml">ICC_SRE_EL3</register_link>.DIB.</para>
<para>If EL3 is not implemented and EL2 is implemented, this field is a read-only alias of <register_link state="AArch64" id="AArch64-icc_sre_el2.xml">ICC_SRE_EL2</register_link>.DIB.</para>
<para>If <register_link state="ext" id="ext-gicd_ctlr.xml">GICD_CTLR</register_link>.DS == 1 and EL2 is implemented, this field is a read-only alias of <register_link state="AArch64" id="AArch64-icc_sre_el2.xml">ICC_SRE_EL2</register_link>.DIB.</para>
<para>In systems that do not support IRQ bypass, this field is RAO/WI.</para>

          </field_description>
          <field_resets>
  
  
    
    
        <field_reset>
          
      <field_reset_number>0</field_reset_number>
  
        </field_reset>
  
</field_resets>
      </field>
        <field
           id="DFB_1_1"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>DFB</field_name>
          <field_msb>1</field_msb>
          <field_lsb>1</field_lsb>
          <field_description order="before">
          
  <para>Disable FIQ bypass.</para>

          </field_description>
            <field_values>
                  <field_value_instance>
        <field_value>0b0</field_value>
        <field_value_description>
  <para>FIQ bypass enabled.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b1</field_value>
        <field_value_description>
  <para>FIQ bypass disabled.</para>
</field_value_description>
    </field_value_instance>
            </field_values>
          <field_description order="after">
            
  <para>If EL3 is implemented and <register_link state="ext" id="ext-gicd_ctlr.xml">GICD_CTLR</register_link>.DS == 0, this field is a read-only alias of <register_link state="AArch64" id="AArch64-icc_sre_el3.xml">ICC_SRE_EL3</register_link>.DFB.</para>
<para>If EL3 is implemented and <register_link state="ext" id="ext-gicd_ctlr.xml">GICD_CTLR</register_link>.DS == 1, and EL2 is not implemented, this field is a read-write alias of <register_link state="AArch64" id="AArch64-icc_sre_el3.xml">ICC_SRE_EL3</register_link>.DFB.</para>
<para>If EL3 is not implemented and EL2 is implemented, this field is a read-only alias of <register_link state="AArch64" id="AArch64-icc_sre_el2.xml">ICC_SRE_EL2</register_link>.DFB.</para>
<para>If <register_link state="ext" id="ext-gicd_ctlr.xml">GICD_CTLR</register_link>.DS == 1 and EL2 is implemented, this field is a read-only alias of <register_link state="AArch64" id="AArch64-icc_sre_el2.xml">ICC_SRE_EL2</register_link>.DFB.</para>
<para>In systems that do not support FIQ bypass, this field is RAO/WI.</para>

          </field_description>
          <field_resets>
  
  
    
    
        <field_reset>
          
      <field_reset_number>0</field_reset_number>
  
        </field_reset>
  
</field_resets>
      </field>
        <field
           id="SRE_0_0"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>SRE</field_name>
          <field_msb>0</field_msb>
          <field_lsb>0</field_lsb>
          <field_description order="before">
          
  <para>System Register Enable.</para>

          </field_description>
            <field_values>
                  <field_value_instance>
        <field_value>0b0</field_value>
        <field_value_description>
  <para>The memory-mapped interface must be used. Access at EL1 to any ICC_* System register other than ICC_SRE_EL1 is trapped to EL1.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b1</field_value>
        <field_value_description>
  <para>The System register interface for the current Security state is enabled.</para>
</field_value_description>
    </field_value_instance>
            </field_values>
          <field_description order="after">
            
  <para>If software changes this bit from 1 to 0 in the Secure instance of this register, the results are <arm-defined-word>UNPREDICTABLE</arm-defined-word>.</para>
<para>If an implementation supports only a System register interface to the GIC CPU interface, this bit is RAO/WI.</para>
<para>If EL3 is implemented and <register_link state="AArch64" id="AArch64-icc_sre_el3.xml">ICC_SRE_EL3</register_link>.SRE==0 the Secure copy of this bit is RAZ/WI. If <register_link state="AArch64" id="AArch64-icc_sre_el3.xml">ICC_SRE_EL3</register_link>.SRE is changed from zero to one, the Secure copy of this bit becomes <arm-defined-word>UNKNOWN</arm-defined-word>.</para>
<para>If EL2 is implemented and <register_link state="AArch64" id="AArch64-icc_sre_el2.xml">ICC_SRE_EL2</register_link>.SRE==0 the Non-secure copy of this bit is RAZ/WI. If <register_link state="AArch64" id="AArch64-icc_sre_el2.xml">ICC_SRE_EL2</register_link>.SRE is changed from zero to one, the Non-secure copy of this bit becomes <arm-defined-word>UNKNOWN</arm-defined-word>.</para>
<para>If EL3 is implemented and <register_link state="AArch64" id="AArch64-icc_sre_el3.xml">ICC_SRE_EL3</register_link>.SRE==0 the Non-secure copy of this bit is RAZ/WI. If <register_link state="AArch64" id="AArch64-icc_sre_el3.xml">ICC_SRE_EL3</register_link>.SRE is changed from zero to one, the Non-secure copy of this bit becomes <arm-defined-word>UNKNOWN</arm-defined-word>.</para>
<para>GICv3 implementations that do not require GICv2 compatibility might choose to make this bit RAO/WI. The following options are supported:</para>
<list type="unordered">
<listitem><content>The Non-secure copy of <register_link state="AArch64" id="AArch64-icc_sre_el1.xml">ICC_SRE_EL1</register_link>.SRE can be RAO/WI if <register_link state="AArch64" id="AArch64-icc_sre_el2.xml">ICC_SRE_EL2</register_link>.SRE is also RAO/WI. This means all Non-secure software, including VMs using only virtual interrupts, must access the GIC using System registers.</content>
</listitem><listitem><content>The Secure copy of <register_link state="AArch64" id="AArch64-icc_sre_el1.xml">ICC_SRE_EL1</register_link>.SRE can be RAO/WI if <register_link state="AArch64" id="AArch64-icc_sre_el3.xml">ICC_SRE_EL3</register_link>.SRE and <register_link state="AArch64" id="AArch64-icc_sre_el2.xml">ICC_SRE_EL2</register_link>.SRE are also RAO/WI. This means that all Secure software must access the GIC using System registers and all Non-secure accesses to registers for physical interrupts must use System registers.</content>
</listitem></list>
<note><para>A VM using only virtual interrupts might still use memory-mapped access if the Non-secure copy of <register_link state="AArch64" id="AArch64-icc_sre_el1.xml">ICC_SRE_EL1</register_link>.SRE is not RAO/WI.</para></note>

          </field_description>
          <field_resets>
  
  
    
    
        <field_reset>
          
      <field_reset_number>0</field_reset_number>
  
        </field_reset>
  
</field_resets>
      </field>
    <text_after_fields>
    
  

    </text_after_fields>
  </fields>
  <reg_fieldset length="64">
      
        <fieldat id="0_63_3" msb="63" lsb="3"/>
        <fieldat id="DIB_2_2" msb="2" lsb="2"/>
        <fieldat id="DFB_1_1" msb="1" lsb="1"/>
        <fieldat id="SRE_0_0" msb="0" lsb="0"/>
    </reg_fieldset>

      </reg_fieldsets>
      


<access_mechanisms>
  
    
      <access_permission_text>
        <para>Execution with <register_link state="AArch64" id="AArch64-icc_sre_el1.xml">ICC_SRE_EL1</register_link>.SRE set to 0 might make some System registers <arm-defined-word>UNKNOWN</arm-defined-word>.</para>
      </access_permission_text>


      <access_mechanism accessor="MRS ICC_SRE_EL1">
        <encoding>
          
          <access_instruction>MRS &lt;Xt&gt;, ICC_SRE_EL1</access_instruction>
            
            <enc n="op0" v="0b11"/>
            
            <enc n="op1" v="0b000"/>
            
            <enc n="CRn" v="0b1100"/>
            
            <enc n="CRm" v="0b1100"/>
            
            <enc n="op2" v="0b101"/>
        </encoding>
          <access_permission>
            <ps name="MRS" sections="1" secttype="access_permission">
              <pstext>
if PSTATE.EL == EL0 then
    UNDEFINED;
elsif PSTATE.EL == EL1 then
    if Halted() &amp;&amp; HaveEL(EL3) &amp;&amp; EDSCR.SDD == '1' &amp;&amp; boolean IMPLEMENTATION_DEFINED "EL3 trap priority when SDD == '1'" &amp;&amp; ICC_SRE_EL3.Enable == '0' then
        UNDEFINED;
    elsif EL2Enabled() &amp;&amp; ICC_SRE_EL2.Enable == '0' then
        AArch64.SystemAccessTrap(EL2, 0x18);
    elsif HaveEL(EL3) &amp;&amp; ICC_SRE_EL3.Enable == '0' then
        if Halted() &amp;&amp; EDSCR.SDD == '1' then
            UNDEFINED;
        else
            AArch64.SystemAccessTrap(EL3, 0x18);
    elsif HaveEL(EL3) then
        if SCR_EL3.NS == '0' then
            return ICC_SRE_EL1_S;
        else
            return ICC_SRE_EL1_NS;
    else
        return ICC_SRE_EL1;
elsif PSTATE.EL == EL2 then
    if Halted() &amp;&amp; HaveEL(EL3) &amp;&amp; EDSCR.SDD == '1' &amp;&amp; boolean IMPLEMENTATION_DEFINED "EL3 trap priority when SDD == '1'" &amp;&amp; ICC_SRE_EL3.Enable == '0' then
        UNDEFINED;
    elsif HaveEL(EL3) &amp;&amp; ICC_SRE_EL3.Enable == '0' then
        if Halted() &amp;&amp; EDSCR.SDD == '1' then
            UNDEFINED;
        else
            AArch64.SystemAccessTrap(EL3, 0x18);
    elsif HaveEL(EL3) then
        if SCR_EL3.NS == '0' then
            return ICC_SRE_EL1_S;
        else
            return ICC_SRE_EL1_NS;
    else
        return ICC_SRE_EL1;
elsif PSTATE.EL == EL3 then
    if SCR_EL3.NS == '0' then
        return ICC_SRE_EL1_S;
    else
        return ICC_SRE_EL1_NS;
              </pstext>
            </ps>
          </access_permission>
      </access_mechanism>
      <access_mechanism accessor="MSRregister ICC_SRE_EL1">
        <encoding>
          
          <access_instruction>MSR ICC_SRE_EL1, &lt;Xt&gt;</access_instruction>
            
            <enc n="op0" v="0b11"/>
            
            <enc n="op1" v="0b000"/>
            
            <enc n="CRn" v="0b1100"/>
            
            <enc n="CRm" v="0b1100"/>
            
            <enc n="op2" v="0b101"/>
        </encoding>
          <access_permission>
            <ps name="MSRregister" sections="1" secttype="access_permission">
              <pstext>
if PSTATE.EL == EL0 then
    UNDEFINED;
elsif PSTATE.EL == EL1 then
    if Halted() &amp;&amp; HaveEL(EL3) &amp;&amp; EDSCR.SDD == '1' &amp;&amp; boolean IMPLEMENTATION_DEFINED "EL3 trap priority when SDD == '1'" &amp;&amp; ICC_SRE_EL3.Enable == '0' then
        UNDEFINED;
    elsif EL2Enabled() &amp;&amp; ICC_SRE_EL2.Enable == '0' then
        AArch64.SystemAccessTrap(EL2, 0x18);
    elsif HaveEL(EL3) &amp;&amp; ICC_SRE_EL3.Enable == '0' then
        if Halted() &amp;&amp; EDSCR.SDD == '1' then
            UNDEFINED;
        else
            AArch64.SystemAccessTrap(EL3, 0x18);
    elsif HaveEL(EL3) then
        if SCR_EL3.NS == '0' then
            ICC_SRE_EL1_S = X[t];
        else
            ICC_SRE_EL1_NS = X[t];
    else
        ICC_SRE_EL1 = X[t];
elsif PSTATE.EL == EL2 then
    if Halted() &amp;&amp; HaveEL(EL3) &amp;&amp; EDSCR.SDD == '1' &amp;&amp; boolean IMPLEMENTATION_DEFINED "EL3 trap priority when SDD == '1'" &amp;&amp; ICC_SRE_EL3.Enable == '0' then
        UNDEFINED;
    elsif HaveEL(EL3) &amp;&amp; ICC_SRE_EL3.Enable == '0' then
        if Halted() &amp;&amp; EDSCR.SDD == '1' then
            UNDEFINED;
        else
            AArch64.SystemAccessTrap(EL3, 0x18);
    elsif HaveEL(EL3) then
        if SCR_EL3.NS == '0' then
            ICC_SRE_EL1_S = X[t];
        else
            ICC_SRE_EL1_NS = X[t];
    else
        ICC_SRE_EL1 = X[t];
elsif PSTATE.EL == EL3 then
    if SCR_EL3.NS == '0' then
        ICC_SRE_EL1_S = X[t];
    else
        ICC_SRE_EL1_NS = X[t];
              </pstext>
            </ps>
          </access_permission>
      </access_mechanism>
</access_mechanisms>

      <arch_variants>
      </arch_variants>
  </register>
</registers>

    <timestamp>01/07/2020 15:57; 80324f0b9997bede489cc15ad1565345720bcd2a</timestamp>
</register_page>