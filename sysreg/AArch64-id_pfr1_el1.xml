<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE register_page SYSTEM "registers.dtd">
<!-- Copyright (c) 2010-2018 Arm Limited or its affiliates. All rights reserved. -->
<!-- This document is Non-Confidential. This document may only be used and distributed in accordance with the terms of the agreement entered into by Arm and the party that Arm delivered this document to. -->
<?xml-stylesheet href="one_register.xsl" type="text/xsl" ?>






<register_page>
  <registers>
    <register execution_state="AArch64" is_register="True" is_internal="True" is_banked="False" is_stub_entry="False">
      <reg_short_name>ID_PFR1_EL1</reg_short_name>
      <reg_long_name>AArch32 Processor Feature Register 1</reg_long_name>
      
      

          <reg_reset_value></reg_reset_value>
      <reg_mappings>
          <reg_mapping>
              
            <mapped_name filename="AArch32-id_pfr1.xml">ID_PFR1</mapped_name>
            <mapped_type>Architectural</mapped_type>
              <mapped_execution_state>AArch32</mapped_execution_state>
              <mapped_from_startbit>31</mapped_from_startbit>
              <mapped_from_endbit>0</mapped_from_endbit>

              <mapped_to_startbit>31</mapped_to_startbit>
              <mapped_to_endbit>0</mapped_to_endbit>

          </reg_mapping>
      </reg_mappings>
      <reg_purpose>
        
    
      <purpose_text>
        <para>Gives information about the AArch32 programmers' model.</para>

      </purpose_text>
      <purpose_text>
        <para>Must be interpreted with <register_link state="AArch64" id="AArch64-id_pfr0_el1.xml">ID_PFR0_EL1</register_link>.</para>

      </purpose_text>
      <purpose_text>
        <para>For general information about the interpretation of the ID registers see <xref browsertext="'Principles of the ID scheme for fields in ID registers'" filename="D_aarch64_system_register_descriptions.fm" linkend="BABFAFHI"/>.</para>
      </purpose_text>

      </reg_purpose>
      <reg_groups>
          <reg_group>Identification registers</reg_group>
      </reg_groups>
      <reg_configuration>
        

      </reg_configuration>
      <reg_attributes>
          <attributes_text>
            <para>ID_PFR1_EL1 is a 64-bit register.</para>
          </attributes_text>
      </reg_attributes>
      <reg_fieldsets>
        





  <fields length="64">
      <fields_condition>When AArch32 is supported at any Exception level</fields_condition>
    <text_before_fields>
      
  

    </text_before_fields>
    
        <field
           id="0_63_32"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
           rwtype="RES0"
        >
          <field_name>0</field_name>
          <field_msb>63</field_msb>
          <field_lsb>32</field_lsb>
          <field_description order="before">
            <para>Reserved, <arm-defined-word>RES0</arm-defined-word>.</para>
          </field_description>
            <field_values>
            </field_values>
      </field>
        <field
           id="GIC_31_28"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>GIC</field_name>
          <field_msb>31</field_msb>
          <field_lsb>28</field_lsb>
          <field_description order="before">
          
  <para>System register GIC CPU interface. Defined values are:</para>

          </field_description>
            <field_values>
                  <field_value_instance>
        <field_value>0b0000</field_value>
        <field_value_description>
  <para>GIC CPU interface system registers not implemented.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b0001</field_value>
        <field_value_description>
  <para>System register interface to versions 3.0 and 4.0 of the GIC CPU interface is supported.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b0011</field_value>
        <field_value_description>
  <para>System register interface to version 4.1 of the GIC CPU interface is supported.</para>
</field_value_description>
    </field_value_instance>
            </field_values>
          <field_description order="after">
            
  <para>All other values are reserved.</para>

          </field_description>
          <field_resets>
  
  
</field_resets>
      </field>
        <field
           id="Virt_frac_27_24"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>Virt_frac</field_name>
          <field_msb>27</field_msb>
          <field_lsb>24</field_lsb>
          <field_description order="before">
          
  <para>Virtualization fractional field. When the Virtualization field is <binarynumber>0b0000</binarynumber>, determines the support for features from the ARMv7 Virtualization Extensions. Defined values are:</para>

          </field_description>
            <field_values>
                  <field_value_instance>
        <field_value>0b0000</field_value>
        <field_value_description>
  <para>No features from the ARMv7 Virtualization Extensions are implemented.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b0001</field_value>
        <field_value_description>
  <para>The following features of the ARMv7 Virtualization Extensions are implemented:</para>
<list type="unordered">
<listitem><content>The <register_link state="AArch32" id="AArch32-scr.xml">SCR</register_link>.SIF bit, if EL3 is implemented.</content>
</listitem><listitem><content>The modifications to the <register_link state="AArch32" id="AArch32-scr.xml">SCR</register_link>.AW and <register_link state="AArch32" id="AArch32-scr.xml">SCR</register_link>.FW bits described in the Virtualization Extensions, if EL3 is implemented.</content>
</listitem><listitem><content>The MSR (banked register) and MRS (banked register) instructions.</content>
</listitem><listitem><content>The ERET instruction.</content>
</listitem></list>
</field_value_description>
    </field_value_instance>
            </field_values>
          <field_description order="after">
            
  <para>All other values are reserved.</para>
<para>In Armv8-A, the permitted values are:</para>
<list type="unordered">
<listitem><content><binarynumber>0b0000</binarynumber> when EL2 is implemented.</content>
</listitem><listitem><content><binarynumber>0b0001</binarynumber> when EL2 is not implemented.</content>
</listitem></list>
<para>This field is only valid when the value of ID_PFR1_EL1.Virtualization is 0, otherwise it holds the value <binarynumber>0b0000</binarynumber>.</para>
<note><para>The ID_ISAR registers do not identify whether the instructions added by the ARMv7 Virtualization Extensions are implemented.</para></note>

          </field_description>
          <field_resets>
  
  
</field_resets>
      </field>
        <field
           id="Sec_frac_23_20"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>Sec_frac</field_name>
          <field_msb>23</field_msb>
          <field_lsb>20</field_lsb>
          <field_description order="before">
          
  <para>Security fractional field. When the Security field is <binarynumber>0b0000</binarynumber>, determines the support for features from the ARMv7 Security Extensions. Defined values are:</para>

          </field_description>
            <field_values>
                  <field_value_instance>
        <field_value>0b0000</field_value>
        <field_value_description>
  <para>No features from the ARMv7 Security Extensions are implemented.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b0001</field_value>
        <field_value_description>
  <para>The following features from the ARMv7 Security Extensions are implemented:</para>
<list type="unordered">
<listitem><content>The VBAR register.</content>
</listitem><listitem><content>The <register_link state="AArch32" id="AArch32-ttbcr.xml">TTBCR</register_link>.PD0 and <register_link state="AArch32" id="AArch32-ttbcr.xml">TTBCR</register_link>.PD1 bits.</content>
</listitem></list>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b0010</field_value>
        <field_value_description>
  <para>As for <binarynumber>0b0001</binarynumber>, plus the ability to access Secure or Non-secure physical memory is supported.</para>
</field_value_description>
    </field_value_instance>
            </field_values>
          <field_description order="after">
            
  <para>All other values are reserved.</para>
<para>In Armv8-A, the permitted values are:</para>
<list type="unordered">
<listitem><content><binarynumber>0b0000</binarynumber> when EL3 is implemented.</content>
</listitem><listitem><content><binarynumber>0b0001</binarynumber> or <binarynumber>0b0010</binarynumber> when EL3 is not implemented.</content>
</listitem></list>
<para>This field is only valid when the value of ID_PFR1_EL1.Security is 0, otherwise it holds the value <binarynumber>0b0000</binarynumber>.</para>

          </field_description>
          <field_resets>
  
  
</field_resets>
      </field>
        <field
           id="GenTimer_19_16"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>GenTimer</field_name>
          <field_msb>19</field_msb>
          <field_lsb>16</field_lsb>
          <field_description order="before">
          
  <para>Generic Timer support. Defined values are:</para>

          </field_description>
            <field_values>
                  <field_value_instance>
        <field_value>0b0000</field_value>
        <field_value_description>
  <para>Generic Timer is not implemented.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b0001</field_value>
        <field_value_description>
  <para>Generic Timer is implemented.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b0010</field_value>
        <field_value_description>
  <para>Generic Timer is implemented, and also includes support for <register_link state="AArch32" id="AArch32-cnthctl.xml">CNTHCTL</register_link>.EVNTIS and <register_link state="AArch32" id="AArch32-cntkctl.xml">CNTKCTL</register_link>.EVNTIS fields, and <register_link state="AArch32" id="AArch32-cntpctss.xml">CNTPCTSS</register_link> and <register_link state="AArch32" id="AArch32-cntvctss.xml">CNTVCTSS</register_link> counter views.</para>
</field_value_description>
    </field_value_instance>
            </field_values>
          <field_description order="after">
            
  <para>All other values are reserved.</para>
<para><xref browsertext="FEAT_ECV" filename="A_armv8_architecture_extensions.fm" linkend="v8.6.ECV"></xref> implements the functionality identified by the value <binarynumber>0b0010</binarynumber>.</para>
<para>In Armv8.0, Armv8.1, Armv8.2, Armv8.3, Armv8.4, and Armv8.5, the only permitted value is <binarynumber>0b0001</binarynumber>.</para>
<para>From Armv8.6, the only permitted value is <binarynumber>0b0010</binarynumber>.</para>

          </field_description>
          <field_resets>
  
  
</field_resets>
      </field>
        <field
           id="Virtualization_15_12"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>Virtualization</field_name>
          <field_msb>15</field_msb>
          <field_lsb>12</field_lsb>
          <field_description order="before">
          
  <para>Virtualization support. Defined values are:</para>

          </field_description>
            <field_values>
                  <field_value_instance>
        <field_value>0b0000</field_value>
        <field_value_description>
  <para>EL2, Hyp mode, and the HVC instruction not implemented.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b0001</field_value>
        <field_value_description>
  <para>EL2, Hyp mode, the HVC instruction, and all the features described by Virt_frac == <binarynumber>0b0001</binarynumber> implemented.</para>
</field_value_description>
    </field_value_instance>
            </field_values>
          <field_description order="after">
            
  <para>All other values are reserved.</para>
<para>In Armv8-A, the permitted values are:</para>
<list type="unordered">
<listitem><content><binarynumber>0b0000</binarynumber> when EL2 is not implemented.</content>
</listitem><listitem><content><binarynumber>0b0001</binarynumber> when EL2 is implemented.</content>
</listitem></list>
<para>In an implementation that includes EL2, if EL2 cannot use AArch32 but EL1 can use AArch32 then this field has the value <binarynumber>0b0001</binarynumber>.</para>
<para>If EL1 cannot use AArch32 then this field has the value <binarynumber>0b0000</binarynumber>.</para>
<note><para>The ID_ISARs do not identify whether the HVC instruction is implemented.</para></note>

          </field_description>
          <field_resets>
  
  
</field_resets>
      </field>
        <field
           id="MProgMod_11_8"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>MProgMod</field_name>
          <field_msb>11</field_msb>
          <field_lsb>8</field_lsb>
          <field_description order="before">
          
  <para>M profile programmers' model support. Defined values are:</para>

          </field_description>
            <field_values>
                  <field_value_instance>
        <field_value>0b0000</field_value>
        <field_value_description>
  <para>Not supported.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b0010</field_value>
        <field_value_description>
  <para>Support for two-stack programmers' model.</para>
</field_value_description>
    </field_value_instance>
            </field_values>
          <field_description order="after">
            
  <para>All other values are reserved.</para>
<para>In Armv8-A the only permitted value is <binarynumber>0b0000</binarynumber>.</para>

          </field_description>
          <field_resets>
  
  
</field_resets>
      </field>
        <field
           id="Security_7_4"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>Security</field_name>
          <field_msb>7</field_msb>
          <field_lsb>4</field_lsb>
          <field_description order="before">
          
  <para>Security support. Defined values are:</para>

          </field_description>
            <field_values>
                  <field_value_instance>
        <field_value>0b0000</field_value>
        <field_value_description>
  <para>EL3, Monitor mode, and the SMC instruction not implemented.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b0001</field_value>
        <field_value_description>
  <para>EL3, Monitor mode, the SMC instruction, and all the features described by Sec_frac == <binarynumber>0b0001</binarynumber> implemented.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b0010</field_value>
        <field_value_description>
  <para>As for <binarynumber>0b0001</binarynumber>, and adds the ability to set the <register_link state="AArch32" id="AArch32-nsacr.xml">NSACR</register_link>.RFR bit. Not permitted in Armv8 as the <register_link state="AArch32" id="AArch32-nsacr.xml">NSACR</register_link>.RFR bit is <arm-defined-word>RES0</arm-defined-word>.</para>
</field_value_description>
    </field_value_instance>
            </field_values>
          <field_description order="after">
            
  <para>All other values are reserved.</para>
<para>In Armv8-A, the permitted values are:</para>
<list type="unordered">
<listitem><content><binarynumber>0b0000</binarynumber> when EL3 is not implemented.</content>
</listitem><listitem><content><binarynumber>0b0001</binarynumber> when EL3 is implemented.</content>
</listitem></list>
<para>In an implementation that includes EL3, if EL3 cannot use AArch32 but EL1 can use AArch32 then this field has the value  <binarynumber>0b0001</binarynumber>.</para>
<para>If EL1 cannot use AArch32 then this field has the value <binarynumber>0b0000</binarynumber>.</para>

          </field_description>
          <field_resets>
  
  
</field_resets>
      </field>
        <field
           id="ProgMod_3_0"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>ProgMod</field_name>
          <field_msb>3</field_msb>
          <field_lsb>0</field_lsb>
          <field_description order="before">
          
  <para>Support for the standard programmers' model for Armv4 and later. Model must support User, FIQ, IRQ, Supervisor, Abort, Undefined, and System modes. Defined values are:</para>

          </field_description>
            <field_values>
                  <field_value_instance>
        <field_value>0b0000</field_value>
        <field_value_description>
  <para>Not supported.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b0001</field_value>
        <field_value_description>
  <para>Supported.</para>
</field_value_description>
    </field_value_instance>
            </field_values>
          <field_description order="after">
            
  <para>All other values are reserved.</para>
<para>In Armv8-A, the permitted values are <binarynumber>0b0001</binarynumber> and <binarynumber>0b0000</binarynumber>.</para>
<para>If EL1 cannot use AArch32 then this field has the value <binarynumber>0b0000</binarynumber>.</para>

          </field_description>
          <field_resets>
  
  
</field_resets>
      </field>
    <text_after_fields>
    
  

    </text_after_fields>
  </fields>
  <fields length="64">
      <fields_condition></fields_condition>
    <text_before_fields>
      
  

    </text_before_fields>
    
        <field
           id="UNKNOWN_63_0"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
           rwtype="UNKNOWN"
        >
          <field_name>UNKNOWN</field_name>
          <field_msb>63</field_msb>
          <field_lsb>0</field_lsb>
          <field_description order="before">
            <para>Reserved, <arm-defined-word>UNKNOWN</arm-defined-word>.</para>
          </field_description>
            <field_values>
               
                 <field_value_name>U</field_value_name>
            </field_values>
      </field>
    <text_after_fields>
    
  

    </text_after_fields>
  </fields>
  <reg_fieldset length="64">
        <fields_condition>When AArch32 is supported at any Exception level</fields_condition>
      
        <fieldat id="0_63_32" msb="63" lsb="32"/>
        <fieldat id="GIC_31_28" msb="31" lsb="28"/>
        <fieldat id="Virt_frac_27_24" msb="27" lsb="24"/>
        <fieldat id="Sec_frac_23_20" msb="23" lsb="20"/>
        <fieldat id="GenTimer_19_16" msb="19" lsb="16"/>
        <fieldat id="Virtualization_15_12" msb="15" lsb="12"/>
        <fieldat id="MProgMod_11_8" msb="11" lsb="8"/>
        <fieldat id="Security_7_4" msb="7" lsb="4"/>
        <fieldat id="ProgMod_3_0" msb="3" lsb="0"/>
    </reg_fieldset>
  <reg_fieldset length="64">
        <fields_condition></fields_condition>
      
        <fieldat id="UNKNOWN_63_0" msb="63" lsb="0"/>
    </reg_fieldset>

      </reg_fieldsets>
      


<access_mechanisms>
  


      <access_mechanism accessor="MRS ID_PFR1_EL1">
        <encoding>
          
          <access_instruction>MRS &lt;Xt&gt;, ID_PFR1_EL1</access_instruction>
            
            <enc n="op0" v="0b11"/>
            
            <enc n="op1" v="0b000"/>
            
            <enc n="CRn" v="0b0000"/>
            
            <enc n="CRm" v="0b0001"/>
            
            <enc n="op2" v="0b001"/>
        </encoding>
          <access_permission>
            <ps name="MRS" sections="1" secttype="access_permission">
              <pstext>
if PSTATE.EL == EL0 then
    if IsFeatureImplemented("FEAT_IDST") then
        if EL2Enabled() &amp;&amp; HCR_EL2.TGE == '1' then
            AArch64.SystemAccessTrap(EL2, 0x18);
        else
            AArch64.SystemAccessTrap(EL1, 0x18);
    else
        UNDEFINED;
elsif PSTATE.EL == EL1 then
    if EL2Enabled() &amp;&amp; HCR_EL2.TID3 == '1' then
        AArch64.SystemAccessTrap(EL2, 0x18);
    else
        return ID_PFR1_EL1;
elsif PSTATE.EL == EL2 then
    return ID_PFR1_EL1;
elsif PSTATE.EL == EL3 then
    return ID_PFR1_EL1;
              </pstext>
            </ps>
          </access_permission>
      </access_mechanism>
</access_mechanisms>

      <arch_variants>
      </arch_variants>
  </register>
</registers>

    <timestamp>01/07/2020 15:57; 80324f0b9997bede489cc15ad1565345720bcd2a</timestamp>
</register_page>