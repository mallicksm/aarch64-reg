<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE register_page SYSTEM "registers.dtd">
<!-- Copyright (c) 2010-2018 Arm Limited or its affiliates. All rights reserved. -->
<!-- This document is Non-Confidential. This document may only be used and distributed in accordance with the terms of the agreement entered into by Arm and the party that Arm delivered this document to. -->
<?xml-stylesheet href="one_register.xsl" type="text/xsl" ?>






<register_page>
  <registers>
    <register execution_state="AArch64" is_register="False" is_internal="True" is_banked="False" is_stub_entry="False">
      <reg_short_name>TLBI ASIDE1OS</reg_short_name>
      <reg_long_name>TLB Invalidate by ASID, EL1, Outer Shareable</reg_long_name>
      
        <reg_condition otherwise="UNDEFINED">when FEAT_TLBIOS is implemented</reg_condition>
      

          <reg_reset_value></reg_reset_value>
      <reg_mappings>
      </reg_mappings>
      <reg_purpose>
        
    
      <purpose_text>
        <para>Invalidates cached copies of translation table entries from TLBs that meet all the following requirements:</para>

      </purpose_text>
      <purpose_text>
        <list type="unordered">
<listitem><content>
<para>The entry is a stage 1 translation table entry.</para>
</content>
</listitem><listitem><content>
<para>The entry would be used for the specified ASID, and either:</para>
<list type="unordered">
<listitem><content>
<para>Is from a level of lookup above the final level.</para>
</content>
</listitem><listitem><content>
<para>Is a non-global entry from the final level of lookup.</para>
</content>
</listitem></list>
</content>
</listitem><listitem><content>
<para>When EL2 is implemented and enabled in the Security state described by the current value of <register_link state="AArch64" id="AArch64-scr_el3.xml">SCR_EL3</register_link>.NS:</para>
<list type="unordered">
<listitem><content>
<para>If <register_link state="AArch64" id="AArch64-hcr_el2.xml">HCR_EL2</register_link>.{E2H, TGE} is not {1, 1}, the entry would be used with the current VMID, and would be required to translate an address using the EL1&amp;0 translation regime.</para>
</content>
</listitem><listitem><content>
<para>If <register_link state="AArch64" id="AArch64-hcr_el2.xml">HCR_EL2</register_link>.{E2H, TGE} is {1, 1}, the entry would be required to translate an address using the EL2&amp;0 translation regime.</para>
</content>
</listitem></list>
</content>
</listitem><listitem><content>
<para>When EL2 is not implemented or is disabled in the current Security state, the entry would be required to translate an address using the EL1&amp;0 translation regime.</para>
</content>
</listitem></list>

      </purpose_text>
      <purpose_text>
        <para>The invalidation applies to all PEs in the same Outer Shareable shareability domain as the PE that executes this System instruction.</para>
      </purpose_text>

      </reg_purpose>
      <reg_groups>
            <reg_group>TLB maintenance instructions</reg_group>
      </reg_groups>
      <reg_configuration>
        

      </reg_configuration>
      <reg_attributes>
          
    
      <attributes_text>
        <para>TLBI ASIDE1OS is a 64-bit System instruction.</para>
      </attributes_text>

      </reg_attributes>
      <reg_fieldsets>
        





  <fields length="64">
    <text_before_fields>
      
  

    </text_before_fields>
    
        <field
           id="ASID_63_48"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>ASID</field_name>
          <field_msb>63</field_msb>
          <field_lsb>48</field_lsb>
          <field_description order="before">
          
  <para>ASID value to match. Any appropriate TLB entries that match the ASID values will be affected by this System instruction.</para>
<para>If the implementation supports 16 bits of ASID, then the upper 8 bits of the ASID must be written to 0 by software when the context being invalidated only uses 8 bits.</para>

          </field_description>
            <field_values>
            </field_values>
          <field_description order="after">
            
  

          </field_description>
          <field_resets>
  
  
</field_resets>
      </field>
        <field
           id="0_47_0"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
           rwtype="RES0"
        >
          <field_name>0</field_name>
          <field_msb>47</field_msb>
          <field_lsb>0</field_lsb>
          <field_description order="before">
            <para>Reserved, <arm-defined-word>RES0</arm-defined-word>.</para>
          </field_description>
            <field_values>
            </field_values>
      </field>
    <text_after_fields>
    
  

    </text_after_fields>
  </fields>
  <reg_fieldset length="64">
      
        <fieldat id="ASID_63_48" msb="63" lsb="48"/>
        <fieldat id="0_47_0" msb="47" lsb="0"/>
    </reg_fieldset>

      </reg_fieldsets>
      


<access_mechanisms>
  


      <access_mechanism accessor="TLBI_SYS ASIDE1OS">
        <encoding>
          
          <access_instruction>TLBI ASIDE1OS{, &lt;Xt&gt;}</access_instruction>
            
            <enc n="op0" v="0b01"/>
            
            <enc n="op1" v="0b000"/>
            
            <enc n="CRn" v="0b1000"/>
            
            <enc n="CRm" v="0b0001"/>
            
            <enc n="op2" v="0b010"/>
        </encoding>
          <access_permission>
            <ps name="TLBI_SYS" sections="1" secttype="access_permission">
              <pstext>
if PSTATE.EL == EL0 then
    UNDEFINED;
elsif PSTATE.EL == EL1 then
    if EL2Enabled() &amp;&amp; HCR_EL2.TTLB == '1' then
        AArch64.SystemAccessTrap(EL2, 0x18);
    elsif EL2Enabled() &amp;&amp; HCR_EL2.TTLBOS == '1' then
        AArch64.SystemAccessTrap(EL2, 0x18);
    elsif EL2Enabled() &amp;&amp; (!HaveEL(EL3) || SCR_EL3.FGTEn == '1') &amp;&amp; HFGITR_EL2.TLBIASIDE1OS == '1' then
        AArch64.SystemAccessTrap(EL2, 0x18);
    else
        TLBI_ASIDE1OS(X[t]);
elsif PSTATE.EL == EL2 then
    TLBI_ASIDE1OS(X[t]);
elsif PSTATE.EL == EL3 then
    TLBI_ASIDE1OS(X[t]);
              </pstext>
            </ps>
          </access_permission>
      </access_mechanism>
</access_mechanisms>

      <arch_variants>
      </arch_variants>
  </register>
</registers>

    <timestamp>01/07/2020 15:57; 80324f0b9997bede489cc15ad1565345720bcd2a</timestamp>
</register_page>