<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE register_page SYSTEM "registers.dtd">
<!-- Copyright (c) 2010-2018 Arm Limited or its affiliates. All rights reserved. -->
<!-- This document is Non-Confidential. This document may only be used and distributed in accordance with the terms of the agreement entered into by Arm and the party that Arm delivered this document to. -->
<?xml-stylesheet href="one_register.xsl" type="text/xsl" ?>






<register_page>
  <registers>
    <register execution_state="AArch64" is_register="True" is_internal="True" is_banked="False" is_stub_entry="False">
      <reg_short_name>MAIR_EL1</reg_short_name>
      <reg_long_name>Memory Attribute Indirection Register (EL1)</reg_long_name>
      
      

          <reg_reset_value></reg_reset_value>
      <reg_mappings>
          <reg_mapping>
              
            <mapped_name filename="AArch32-prrr.xml">PRRR</mapped_name>
            <mapped_type>Architectural</mapped_type>
              <mapped_execution_state>AArch32</mapped_execution_state>
              <mapped_from_startbit>31</mapped_from_startbit>
              <mapped_from_endbit>0</mapped_from_endbit>

              <mapped_to_startbit>31</mapped_to_startbit>
              <mapped_to_endbit>0</mapped_to_endbit>

              <mapped_to_condition>when TTBCR.EAE == 0</mapped_to_condition>
          </reg_mapping>
          <reg_mapping>
              
            <mapped_name filename="AArch32-mair0.xml">MAIR0</mapped_name>
            <mapped_type>Architectural</mapped_type>
              <mapped_execution_state>AArch32</mapped_execution_state>
              <mapped_from_startbit>31</mapped_from_startbit>
              <mapped_from_endbit>0</mapped_from_endbit>

              <mapped_to_startbit>31</mapped_to_startbit>
              <mapped_to_endbit>0</mapped_to_endbit>

              <mapped_to_condition>when TTBCR.EAE == 1</mapped_to_condition>
          </reg_mapping>
          <reg_mapping>
              
            <mapped_name filename="AArch32-nmrr.xml">NMRR</mapped_name>
            <mapped_type>Architectural</mapped_type>
              <mapped_execution_state>AArch32</mapped_execution_state>
              <mapped_from_startbit>63</mapped_from_startbit>
              <mapped_from_endbit>32</mapped_from_endbit>

              <mapped_to_startbit>31</mapped_to_startbit>
              <mapped_to_endbit>0</mapped_to_endbit>

              <mapped_to_condition>when TTBCR.EAE == 0</mapped_to_condition>
          </reg_mapping>
          <reg_mapping>
              
            <mapped_name filename="AArch32-mair1.xml">MAIR1</mapped_name>
            <mapped_type>Architectural</mapped_type>
              <mapped_execution_state>AArch32</mapped_execution_state>
              <mapped_from_startbit>63</mapped_from_startbit>
              <mapped_from_endbit>32</mapped_from_endbit>

              <mapped_to_startbit>31</mapped_to_startbit>
              <mapped_to_endbit>0</mapped_to_endbit>

              <mapped_to_condition>when TTBCR.EAE == 1</mapped_to_condition>
          </reg_mapping>
      </reg_mappings>
      <reg_purpose>
        
    
      <purpose_text>
        <para>Provides the memory attribute encodings corresponding to the possible AttrIndx values in a Long-descriptor format translation table entry for stage 1 translations at EL1.</para>
      </purpose_text>

      </reg_purpose>
      <reg_groups>
            <reg_group>Virtual memory control registers</reg_group>
      </reg_groups>
      <reg_configuration>
        

      </reg_configuration>
      <reg_attributes>
          <attributes_text>
            <para>MAIR_EL1 is a 64-bit register.</para>
          </attributes_text>
      </reg_attributes>
      <reg_fieldsets>
        





  <fields length="64">
    <text_before_fields>
      
  <para>MAIR_EL1 is permitted to be cached in a TLB.</para>

    </text_before_fields>
    
        <field
           id="Attr&lt;n&gt;_63_0"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>Attr&lt;n&gt;</field_name>
          <field_msb>63</field_msb>
          <field_lsb>0</field_lsb>
          <field_array>
            <field_array_start>7</field_array_start>
            <field_array_end>0</field_array_end>
            <field_array_description>8n+7:8n</field_array_description>
          </field_array>
          <field_description order="before">
          
  <para>The memory attribute encoding for an AttrIndx[2:0] entry in a Long descriptor format translation table entry, where AttrIndx[2:0] gives the value of &lt;n&gt; in Attr&lt;n&gt;.</para>
<para>Attr is encoded as follows:</para>
<table><tgroup cols="2"><thead><row><entry>Attr</entry><entry>Meaning</entry></row></thead><tbody><row><entry>0b0000dd00</entry><entry>Device memory. See encoding of 'dd' for the type of Device
memory.</entry></row><row><entry>0b0000ddxx, (xx != 00)</entry><entry><arm-defined-word>UNPREDICTABLE</arm-defined-word></entry></row><row><entry>0booooiiii,
(oooo != 0000 and iiii != 0000)</entry><entry>Normal memory. See encoding of 'oooo' and 'iiii' for the type
of Normal Memory.</entry></row><row><entry><binarynumber>0b11110000</binarynumber></entry><entry>If FEAT_MTE is implemented, then: Tagged Normal Memory.
Inner+Outer Write-Back Non-transient memory, Inner+Outer
Read-Allocate, Inner+Outer Write-Allocate. Otherwise,<arm-defined-word>UNPREDICTABLE</arm-defined-word>.</entry></row><row><entry><binarynumber>0bxxxx0000</binarynumber>,
(xxxx != 0000 and xxxx != 1111)</entry><entry><arm-defined-word>UNPREDICTABLE</arm-defined-word>
</entry></row></tbody></tgroup></table>
<para>'dd' is encoded as follows:</para>
<table><tgroup cols="1"><thead><row><entry>dd    | Meaning</entry></row></thead><tbody><row><entry><binarynumber>0b00</binarynumber>  | Device-nGnRnE memory</entry></row><row><entry><binarynumber>0b01</binarynumber>  | Device-nGnRE memory</entry></row><row><entry><binarynumber>0b10</binarynumber>  | Device-nGRE memory</entry></row><row><entry><binarynumber>0b11</binarynumber>  | Device-GRE memory</entry></row></tbody></tgroup></table>
<para>'oooo' is encoded as follows:</para>
<table><tgroup cols="2"><thead><row><entry>'oooo'</entry><entry>Meaning</entry></row></thead><tbody><row><entry><binarynumber>0b0000</binarynumber></entry><entry>See encoding of Attr</entry></row><row><entry>0b00RW, RW not<binarynumber>0b00</binarynumber></entry><entry>Normal memory, Outer Write-Through Transient</entry></row><row><entry><binarynumber>0b0100</binarynumber></entry><entry>Normal memory, Outer Non-cacheable</entry></row><row><entry>0b01RW, RW not<binarynumber>0b00</binarynumber></entry><entry>Normal memory, Outer Write-Back Transient</entry></row><row><entry>0b10RW</entry><entry>Normal memory, Outer Write-Through Non-transient</entry></row><row><entry>0b11RW</entry><entry>Normal memory, Outer Write-Back Non-transient</entry></row></tbody></tgroup></table>
<para>R = Outer Read-Allocate policy, W = Outer Write-Allocate policy.</para>
<para>'iiii' is encoded as follows:</para>
<table><tgroup cols="2"><thead><row><entry>'iiii'</entry><entry>Meaning</entry></row></thead><tbody><row><entry><binarynumber>0b0000</binarynumber></entry><entry>See encoding of Attr</entry></row><row><entry>0b00RW, RW not<binarynumber>0b00</binarynumber></entry><entry>Normal memory, Inner Write-Through Transient</entry></row><row><entry><binarynumber>0b0100</binarynumber></entry><entry>Normal memory, Inner Non-cacheable</entry></row><row><entry>0b01RW, RW not<binarynumber>0b00</binarynumber></entry><entry>Normal memory, Inner Write-Back Transient</entry></row><row><entry>0b10RW</entry><entry>Normal memory, Inner Write-Through Non-transient</entry></row><row><entry>0b11RW</entry><entry>Normal memory, Inner Write-Back Non-transient</entry></row></tbody></tgroup></table>
<para>R = Inner Read-Allocate policy, W = Inner Write-Allocate policy.</para>
<para>The R and W bits in 'oooo' and 'iiii' fields have the following meanings:</para>
<table><tgroup cols="2"><thead><row><entry>R or W</entry><entry>Meaning</entry></row></thead><tbody><row><entry><binarynumber>0b0</binarynumber></entry><entry>No Allocate</entry></row><row><entry><binarynumber>0b1</binarynumber></entry><entry>Allocate</entry></row></tbody></tgroup></table>

          </field_description>
            <field_values>
            </field_values>
          <field_description order="after">
            
  

          </field_description>
          <field_resets>
  
  
    
    
        <field_reset>
          
      <field_reset_standard_text>AU</field_reset_standard_text>
  
        </field_reset>
  
</field_resets>
      </field>
    <text_after_fields>
    
  

    </text_after_fields>
  </fields>
  <reg_fieldset length="64">
      
        <fieldat id="Attr&lt;n&gt;_63_0" msb="63" lsb="0"/>
    </reg_fieldset>

      </reg_fieldsets>
      


<access_mechanisms>
  
    
      <access_permission_text>
        <para>When <register_link state="AArch64" id="AArch64-hcr_el2.xml">HCR_EL2</register_link>.E2H is 1, without explicit synchronization, access from EL3 using the mnemonic MAIR_EL1 or MAIR_EL12 are not guaranteed to be ordered with respect to accesses using the other mnemonic.</para>
      </access_permission_text>


      <access_mechanism accessor="MRS MAIR_EL1">
        <encoding>
          
          <access_instruction>MRS &lt;Xt&gt;, MAIR_EL1</access_instruction>
            
            <enc n="op0" v="0b11"/>
            
            <enc n="op1" v="0b000"/>
            
            <enc n="CRn" v="0b1010"/>
            
            <enc n="CRm" v="0b0010"/>
            
            <enc n="op2" v="0b000"/>
        </encoding>
          <access_permission>
            <ps name="MRS" sections="1" secttype="access_permission">
              <pstext>
if PSTATE.EL == EL0 then
    UNDEFINED;
elsif PSTATE.EL == EL1 then
    if EL2Enabled() &amp;&amp; HCR_EL2.TRVM == '1' then
        AArch64.SystemAccessTrap(EL2, 0x18);
    elsif EL2Enabled() &amp;&amp; (!HaveEL(EL3) || SCR_EL3.FGTEn == '1') &amp;&amp; HFGRTR_EL2.MAIR_EL1 == '1' then
        AArch64.SystemAccessTrap(EL2, 0x18);
    elsif EL2Enabled() &amp;&amp; HCR_EL2.&lt;NV2,NV1,NV&gt; == '111' then
        return NVMem[0x140];
    else
        return MAIR_EL1;
elsif PSTATE.EL == EL2 then
    if HCR_EL2.E2H == '1' then
        return MAIR_EL2;
    else
        return MAIR_EL1;
elsif PSTATE.EL == EL3 then
    return MAIR_EL1;
              </pstext>
            </ps>
          </access_permission>
      </access_mechanism>
      <access_mechanism accessor="MSRregister MAIR_EL1">
        <encoding>
          
          <access_instruction>MSR MAIR_EL1, &lt;Xt&gt;</access_instruction>
            
            <enc n="op0" v="0b11"/>
            
            <enc n="op1" v="0b000"/>
            
            <enc n="CRn" v="0b1010"/>
            
            <enc n="CRm" v="0b0010"/>
            
            <enc n="op2" v="0b000"/>
        </encoding>
          <access_permission>
            <ps name="MSRregister" sections="1" secttype="access_permission">
              <pstext>
if PSTATE.EL == EL0 then
    UNDEFINED;
elsif PSTATE.EL == EL1 then
    if EL2Enabled() &amp;&amp; HCR_EL2.TVM == '1' then
        AArch64.SystemAccessTrap(EL2, 0x18);
    elsif EL2Enabled() &amp;&amp; (!HaveEL(EL3) || SCR_EL3.FGTEn == '1') &amp;&amp; HFGWTR_EL2.MAIR_EL1 == '1' then
        AArch64.SystemAccessTrap(EL2, 0x18);
    elsif EL2Enabled() &amp;&amp; HCR_EL2.&lt;NV2,NV1,NV&gt; == '111' then
        NVMem[0x140] = X[t];
    else
        MAIR_EL1 = X[t];
elsif PSTATE.EL == EL2 then
    if HCR_EL2.E2H == '1' then
        MAIR_EL2 = X[t];
    else
        MAIR_EL1 = X[t];
elsif PSTATE.EL == EL3 then
    MAIR_EL1 = X[t];
              </pstext>
            </ps>
          </access_permission>
      </access_mechanism>
      <access_mechanism accessor="MRS MAIR_EL12">
        <encoding>
          
          <access_instruction>MRS &lt;Xt&gt;, MAIR_EL12</access_instruction>
            
            <enc n="op0" v="0b11"/>
            
            <enc n="op1" v="0b101"/>
            
            <enc n="CRn" v="0b1010"/>
            
            <enc n="CRm" v="0b0010"/>
            
            <enc n="op2" v="0b000"/>
        </encoding>
          <access_permission>
            <ps name="MRS" sections="1" secttype="access_permission">
              <pstext>
if PSTATE.EL == EL0 then
    UNDEFINED;
elsif PSTATE.EL == EL1 then
    if EL2Enabled() &amp;&amp; HCR_EL2.&lt;NV2,NV1,NV&gt; == '101' then
        return NVMem[0x140];
    elsif EL2Enabled() &amp;&amp; HCR_EL2.NV == '1' then
        AArch64.SystemAccessTrap(EL2, 0x18);
    else
        UNDEFINED;
elsif PSTATE.EL == EL2 then
    if HCR_EL2.E2H == '1' then
        return MAIR_EL1;
    else
        UNDEFINED;
elsif PSTATE.EL == EL3 then
    if EL2Enabled() &amp;&amp; !ELUsingAArch32(EL2) &amp;&amp; HCR_EL2.E2H == '1' then
        return MAIR_EL1;
    else
        UNDEFINED;
              </pstext>
            </ps>
          </access_permission>
      </access_mechanism>
      <access_mechanism accessor="MSRregister MAIR_EL12">
        <encoding>
          
          <access_instruction>MSR MAIR_EL12, &lt;Xt&gt;</access_instruction>
            
            <enc n="op0" v="0b11"/>
            
            <enc n="op1" v="0b101"/>
            
            <enc n="CRn" v="0b1010"/>
            
            <enc n="CRm" v="0b0010"/>
            
            <enc n="op2" v="0b000"/>
        </encoding>
          <access_permission>
            <ps name="MSRregister" sections="1" secttype="access_permission">
              <pstext>
if PSTATE.EL == EL0 then
    UNDEFINED;
elsif PSTATE.EL == EL1 then
    if EL2Enabled() &amp;&amp; HCR_EL2.&lt;NV2,NV1,NV&gt; == '101' then
        NVMem[0x140] = X[t];
    elsif EL2Enabled() &amp;&amp; HCR_EL2.NV == '1' then
        AArch64.SystemAccessTrap(EL2, 0x18);
    else
        UNDEFINED;
elsif PSTATE.EL == EL2 then
    if HCR_EL2.E2H == '1' then
        MAIR_EL1 = X[t];
    else
        UNDEFINED;
elsif PSTATE.EL == EL3 then
    if EL2Enabled() &amp;&amp; !ELUsingAArch32(EL2) &amp;&amp; HCR_EL2.E2H == '1' then
        MAIR_EL1 = X[t];
    else
        UNDEFINED;
              </pstext>
            </ps>
          </access_permission>
      </access_mechanism>
</access_mechanisms>

      <arch_variants>
      </arch_variants>
  </register>
</registers>

    <timestamp>01/07/2020 15:57; 80324f0b9997bede489cc15ad1565345720bcd2a</timestamp>
</register_page>