<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE register_page SYSTEM "registers.dtd">
<!-- Copyright (c) 2010-2018 Arm Limited or its affiliates. All rights reserved. -->
<!-- This document is Non-Confidential. This document may only be used and distributed in accordance with the terms of the agreement entered into by Arm and the party that Arm delivered this document to. -->
<?xml-stylesheet href="one_register.xsl" type="text/xsl" ?>






<register_page>
  <registers>
    <register execution_state="AArch64" is_register="True" is_internal="True" is_banked="False" is_stub_entry="False">
      <reg_short_name>MPAM1_EL1</reg_short_name>
      <reg_long_name>MPAM1 Register (EL1)</reg_long_name>
      
        <reg_condition otherwise="UNDEFINED">when FEAT_MPAM is implemented</reg_condition>
      

          <reg_reset_value></reg_reset_value>
      <reg_mappings>
          <reg_mapping>
              
            <mapped_name filename="AArch64-mpam3_el3.xml">MPAM3_EL3</mapped_name>
            <mapped_type>Architectural</mapped_type>
              <mapped_execution_state>AArch64</mapped_execution_state>
              <mapped_from_startbit>63</mapped_from_startbit>
              <mapped_from_endbit>63</mapped_from_endbit>

              <mapped_to_startbit>63</mapped_to_startbit>
              <mapped_to_endbit>63</mapped_to_endbit>

              <mapped_to_condition>when EL3 is implemented</mapped_to_condition>
          </reg_mapping>
          <reg_mapping>
              
            <mapped_name filename="AArch64-mpam2_el2.xml">MPAM2_EL2</mapped_name>
            <mapped_type>Architectural</mapped_type>
              <mapped_execution_state>AArch64</mapped_execution_state>
              <mapped_from_startbit>63</mapped_from_startbit>
              <mapped_from_endbit>63</mapped_from_endbit>

              <mapped_to_startbit>63</mapped_to_startbit>
              <mapped_to_endbit>63</mapped_to_endbit>

              <mapped_to_condition>when EL3 is not implemented and EL2 is implemented</mapped_to_condition>
          </reg_mapping>
      </reg_mappings>
      <reg_purpose>
        
    
      <purpose_text>
        <para>Holds information to generate MPAM labels for memory requests when executing at EL1.</para>

      </purpose_text>
      <purpose_text>
        <para>When EL2 is present and enabled, the MPAM virtualization option is present, <register_link state="AArch64" id="AArch64-mpamhcr_el2.xml">MPAMHCR_EL2</register_link>.GSTAPP_PLK == 1 and <register_link state="AArch64" id="AArch64-hcr_el2.xml">HCR_EL2</register_link>.TGE == 0, MPAM1_EL1 is used instead of <register_link state="AArch64" id="AArch64-mpam0_el1.xml">MPAM0_EL1</register_link> to generate MPAM labels for memory requests when executing at EL0.</para>

      </purpose_text>
      <purpose_text>
        <para>MPAM1_EL1 is an alias for <register_link state="AArch64" id="AArch64-mpam2_el2.xml">MPAM2_EL2</register_link> when executing at EL2 with <register_link state="AArch64" id="AArch64-hcr_el2.xml">HCR_EL2</register_link>.E2H == 1.</para>

      </purpose_text>
      <purpose_text>
        <para>MPAM1_EL12 is an alias for MPAM1_EL1 when executing at EL2 or EL3 with <register_link state="AArch64" id="AArch64-hcr_el2.xml">HCR_EL2</register_link>.E2H == 1.</para>

      </purpose_text>
      <purpose_text>
        <para>If EL2 is is present and enabled, the MPAM virtualization option is present and <register_link state="AArch64" id="AArch64-mpamhcr_el2.xml">MPAMHCR_EL2</register_link>.EL1_VPMEN == 1, MPAM PARTIDs in MPAM1_EL1 are virtual and mapped into physical PARTIDs for the current Security state. This mapping of MPAM1_EL1 virtual PARTIDs to physical PARTIDs when EL1_VPMEN is 1 also applies when MPAM1_EL1 is used at EL0 due to <register_link state="AArch64" id="AArch64-mpamhcr_el2.xml">MPAMHCR_EL2</register_link>.GSTAPP_PLK.</para>
      </purpose_text>

      </reg_purpose>
      <reg_groups>
          <reg_group>Memory Partitioning and Monitoring registers</reg_group>
      </reg_groups>
      <reg_configuration>
        

      </reg_configuration>
      <reg_attributes>
          <attributes_text>
            <para>MPAM1_EL1 is a 64-bit register.</para>
          </attributes_text>
      </reg_attributes>
      <reg_fieldsets>
        





  <fields length="64">
    <text_before_fields>
      
  

    </text_before_fields>
    
        <field
           id="MPAMEN_63_63"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>MPAMEN</field_name>
          <field_msb>63</field_msb>
          <field_lsb>63</field_lsb>
          <field_description order="before">
          
  <para>MPAM Enable. MPAM is enabled when MPAMEN == 1. When disabled, all PARTIDs and PMGs are output as their default value in the corresponding ID space.</para>

          </field_description>
            <field_values>
                  <field_value_instance>
        <field_value>0b0</field_value>
        <field_value_description>
  <para>The default PARTID and default PMG are output in MPAM information.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b1</field_value>
        <field_value_description>
  <para>MPAM information is output based on the MPAMn_ELx register for ELn according the MPAM configuration.</para>
</field_value_description>
    </field_value_instance>
            </field_values>
          <field_description order="after">
            
  <para>If neither EL3 nor EL2 is implemented, this field is read/write.</para>
<para>If EL3 is implemented, this field is read-only and reads the current value of the read/write bit <register_link state="AArch64" id="AArch64-mpam3_el3.xml">MPAM3_EL3</register_link>.MPAMEN.</para>
<para>If EL3 is not implemented and EL2 is implemented, this field is read-only and reads the current value of the read/write bit <register_link state="AArch64" id="AArch64-mpam2_el2.xml">MPAM2_EL2</register_link>.MPAMEN.</para>

          </field_description>
          <field_resets>
  
  
    
    
        <field_reset>
          
      <field_reset_number>0</field_reset_number>
  
        </field_reset>
  
</field_resets>
          <field_access>
              <field_access_state>
                  <field_access_level>When EL3 is not implemented and EL2 is not implemented</field_access_level>
               <field_access_type>RW</field_access_type>
              </field_access_state>
              <field_access_state>
               <field_access_type>RO</field_access_type>
              </field_access_state>
          </field_access>
      </field>
        <field
           id="0_62_61"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
           rwtype="RES0"
        >
          <field_name>0</field_name>
          <field_msb>62</field_msb>
          <field_lsb>61</field_lsb>
          <field_description order="before">
            <para>Reserved, <arm-defined-word>RES0</arm-defined-word>.</para>
          </field_description>
            <field_values>
            </field_values>
      </field>
        <field
           id="FORCED_NS_60_60_1"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
           reserved_type="RES0"
        >
          <field_name>FORCED_NS</field_name>
          <field_msb>60</field_msb>
          <field_lsb>60</field_lsb>
          <field_description order="before">
          
  <para>In the Secure state, FORCED_NS indicates the state of <register_link state="AArch64" id="AArch64-mpam3_el3.xml">MPAM3_EL3</register_link>.FORCE_NS.</para>

          </field_description>
            <field_values>
                  <field_value_instance>
        <field_value>0b0</field_value>
        <field_value_description>
  <para>In the Non-secure state, always reads as 0.</para>
<para>In the Secure state, indicates that <register_link state="AArch64" id="AArch64-mpam3_el3.xml">MPAM3_EL3</register_link>.FORCE_NS == 0.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b1</field_value>
        <field_value_description>
  <para>In the Secure state, indicates that <register_link state="AArch64" id="AArch64-mpam3_el3.xml">MPAM3_EL3</register_link>.FORCE_NS == 1.</para>
</field_value_description>
    </field_value_instance>
            </field_values>
          <field_description order="after">
            
  <para>Always reads as 0 in the Non-secure state.</para>
<para>Writes are ignored.</para>

          </field_description>
          <field_resets>
  
  
</field_resets>
          <field_access>
              <field_access_state>
               <field_access_type>RO</field_access_type>
              </field_access_state>
          </field_access>
            <fields_condition>When FEAT_MPAMv0p1 is implemented</fields_condition>
      </field>
        <field
           id="0_60_60_2"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
           rwtype="RES0"
        >
          <field_name>0</field_name>
          <field_msb>60</field_msb>
          <field_lsb>60</field_lsb>
          <field_description order="before">
            <para>Reserved, <arm-defined-word>RES0</arm-defined-word>.</para>
          </field_description>
            <field_values>
            </field_values>
      </field>
        <field
           id="0_59_48"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
           rwtype="RES0"
        >
          <field_name>0</field_name>
          <field_msb>59</field_msb>
          <field_lsb>48</field_lsb>
          <field_description order="before">
            <para>Reserved, <arm-defined-word>RES0</arm-defined-word>.</para>
          </field_description>
            <field_values>
            </field_values>
      </field>
        <field
           id="PMG_D_47_40"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>PMG_D</field_name>
          <field_msb>47</field_msb>
          <field_lsb>40</field_lsb>
          <field_description order="before">
          
  <para>Performance monitoring group property for PARTID_D.</para>

          </field_description>
            <field_values>
            </field_values>
          <field_description order="after">
            
  

          </field_description>
          <field_resets>
  
  
    
    
        <field_reset>
          
      <field_reset_standard_text>AU</field_reset_standard_text>
  
        </field_reset>
  
</field_resets>
      </field>
        <field
           id="PMG_I_39_32"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>PMG_I</field_name>
          <field_msb>39</field_msb>
          <field_lsb>32</field_lsb>
          <field_description order="before">
          
  <para>Performance monitoring group property for PARTID_I.</para>

          </field_description>
            <field_values>
            </field_values>
          <field_description order="after">
            
  

          </field_description>
          <field_resets>
  
  
    
    
        <field_reset>
          
      <field_reset_standard_text>AU</field_reset_standard_text>
  
        </field_reset>
  
</field_resets>
      </field>
        <field
           id="PARTID_D_31_16"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>PARTID_D</field_name>
          <field_msb>31</field_msb>
          <field_lsb>16</field_lsb>
          <field_description order="before">
          
  <para>Partition ID for data accesses, including load and store accesses, made from EL1.</para>

          </field_description>
            <field_values>
            </field_values>
          <field_description order="after">
            
  

          </field_description>
          <field_resets>
  
  
    
    
        <field_reset>
          
      <field_reset_standard_text>AU</field_reset_standard_text>
  
        </field_reset>
  
</field_resets>
      </field>
        <field
           id="PARTID_I_15_0"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>PARTID_I</field_name>
          <field_msb>15</field_msb>
          <field_lsb>0</field_lsb>
          <field_description order="before">
          
  <para>Partition ID for instruction accesses made from EL1.</para>

          </field_description>
            <field_values>
            </field_values>
          <field_description order="after">
            
  

          </field_description>
          <field_resets>
  
  
    
    
        <field_reset>
          
      <field_reset_standard_text>AU</field_reset_standard_text>
  
        </field_reset>
  
</field_resets>
      </field>
    <text_after_fields>
    
  

    </text_after_fields>
  </fields>
  <reg_fieldset length="64">
      
        <fieldat id="MPAMEN_63_63" msb="63" lsb="63"/>
        <fieldat id="0_62_61" msb="62" lsb="61"/>
        <fieldat id="FORCED_NS_60_60_1" msb="60" lsb="60"/>
        <fieldat id="0_59_48" msb="59" lsb="48"/>
        <fieldat id="PMG_D_47_40" msb="47" lsb="40"/>
        <fieldat id="PMG_I_39_32" msb="39" lsb="32"/>
        <fieldat id="PARTID_D_31_16" msb="31" lsb="16"/>
        <fieldat id="PARTID_I_15_0" msb="15" lsb="0"/>
    </reg_fieldset>

      </reg_fieldsets>
      


<access_mechanisms>
  
    
      <access_permission_text>
        <para>When <register_link state="AArch64" id="AArch64-hcr_el2.xml">HCR_EL2</register_link>.E2H is 1, without explicit synchronization, accesses from EL3 using the mnemonic MPAM1_EL1 or MPAM1_EL12 are not guaranteed to be ordered with respect to accesses using the other mnemonic.</para>

      </access_permission_text>
      <access_permission_text>
        <para>None of the fields in this register are permitted to be cached in a TLB.</para>
      </access_permission_text>


      <access_mechanism accessor="MRS MPAM1_EL1">
        <encoding>
          
          <access_instruction>MRS &lt;Xt&gt;, MPAM1_EL1</access_instruction>
            
            <enc n="op0" v="0b11"/>
            
            <enc n="op1" v="0b000"/>
            
            <enc n="CRn" v="0b1010"/>
            
            <enc n="CRm" v="0b0101"/>
            
            <enc n="op2" v="0b000"/>
        </encoding>
          <access_permission>
            <ps name="MRS" sections="1" secttype="access_permission">
              <pstext>
if PSTATE.EL == EL0 then
    UNDEFINED;
elsif PSTATE.EL == EL1 then
    if HaveEL(EL3) &amp;&amp; MPAM3_EL3.TRAPLOWER == '1' then
        if Halted() &amp;&amp; EDSCR.SDD == '1' then
            UNDEFINED;
        else
            AArch64.SystemAccessTrap(EL3, 0x18);
    elsif EL2Enabled() &amp;&amp; MPAM2_EL2.TRAPMPAM1EL1 == '1' then
        AArch64.SystemAccessTrap(EL2, 0x18);
    elsif EL2Enabled() &amp;&amp; HCR_EL2.&lt;NV2,NV1,NV&gt; == '111' then
        return NVMem[0x900];
    else
        return MPAM1_EL1;
elsif PSTATE.EL == EL2 then
    if HaveEL(EL3) &amp;&amp; MPAM3_EL3.TRAPLOWER == '1' then
        if Halted() &amp;&amp; EDSCR.SDD == '1' then
            UNDEFINED;
        else
            AArch64.SystemAccessTrap(EL3, 0x18);
    elsif HCR_EL2.E2H == '1' then
        return MPAM2_EL2;
    else
        return MPAM1_EL1;
elsif PSTATE.EL == EL3 then
    return MPAM1_EL1;
              </pstext>
            </ps>
          </access_permission>
      </access_mechanism>
      <access_mechanism accessor="MSRregister MPAM1_EL1">
        <encoding>
          
          <access_instruction>MSR MPAM1_EL1, &lt;Xt&gt;</access_instruction>
            
            <enc n="op0" v="0b11"/>
            
            <enc n="op1" v="0b000"/>
            
            <enc n="CRn" v="0b1010"/>
            
            <enc n="CRm" v="0b0101"/>
            
            <enc n="op2" v="0b000"/>
        </encoding>
          <access_permission>
            <ps name="MSRregister" sections="1" secttype="access_permission">
              <pstext>
if PSTATE.EL == EL0 then
    UNDEFINED;
elsif PSTATE.EL == EL1 then
    if HaveEL(EL3) &amp;&amp; MPAM3_EL3.TRAPLOWER == '1' then
        if Halted() &amp;&amp; EDSCR.SDD == '1' then
            UNDEFINED;
        else
            AArch64.SystemAccessTrap(EL3, 0x18);
    elsif EL2Enabled() &amp;&amp; MPAM2_EL2.TRAPMPAM1EL1 == '1' then
        AArch64.SystemAccessTrap(EL2, 0x18);
    elsif EL2Enabled() &amp;&amp; HCR_EL2.&lt;NV2,NV1,NV&gt; == '111' then
        NVMem[0x900] = X[t];
    else
        MPAM1_EL1 = X[t];
elsif PSTATE.EL == EL2 then
    if HaveEL(EL3) &amp;&amp; MPAM3_EL3.TRAPLOWER == '1' then
        if Halted() &amp;&amp; EDSCR.SDD == '1' then
            UNDEFINED;
        else
            AArch64.SystemAccessTrap(EL3, 0x18);
    elsif HCR_EL2.E2H == '1' then
        MPAM2_EL2 = X[t];
    else
        MPAM1_EL1 = X[t];
elsif PSTATE.EL == EL3 then
    MPAM1_EL1 = X[t];
              </pstext>
            </ps>
          </access_permission>
      </access_mechanism>
      <access_mechanism accessor="MRS MPAM1_EL12">
        <encoding>
          
          <access_instruction>MRS &lt;Xt&gt;, MPAM1_EL12</access_instruction>
            
            <enc n="op0" v="0b11"/>
            
            <enc n="op1" v="0b101"/>
            
            <enc n="CRn" v="0b1010"/>
            
            <enc n="CRm" v="0b0101"/>
            
            <enc n="op2" v="0b000"/>
        </encoding>
          <access_permission>
            <ps name="MRS" sections="1" secttype="access_permission">
              <pstext>
if PSTATE.EL == EL0 then
    UNDEFINED;
elsif PSTATE.EL == EL1 then
    if EL2Enabled() &amp;&amp; HCR_EL2.&lt;NV2,NV1,NV&gt; == '101' then
        return NVMem[0x900];
    elsif EL2Enabled() &amp;&amp; HCR_EL2.NV == '1' then
        if HaveEL(EL3) &amp;&amp; MPAM3_EL3.TRAPLOWER == '1' then
            AArch64.SystemAccessTrap(EL3, 0x18);
        else
            AArch64.SystemAccessTrap(EL2, 0x18);
    else
        UNDEFINED;
elsif PSTATE.EL == EL2 then
    if HCR_EL2.E2H == '1' then
        if HaveEL(EL3) &amp;&amp; MPAM3_EL3.TRAPLOWER == '1' then
            if Halted() &amp;&amp; EDSCR.SDD == '1' then
                UNDEFINED;
            else
                AArch64.SystemAccessTrap(EL3, 0x18);
        else
            return MPAM1_EL1;
    else
        UNDEFINED;
elsif PSTATE.EL == EL3 then
    if EL2Enabled() &amp;&amp; !ELUsingAArch32(EL2) &amp;&amp; HCR_EL2.E2H == '1' then
        return MPAM1_EL1;
    else
        UNDEFINED;
              </pstext>
            </ps>
          </access_permission>
      </access_mechanism>
      <access_mechanism accessor="MSRregister MPAM1_EL12">
        <encoding>
          
          <access_instruction>MSR MPAM1_EL12, &lt;Xt&gt;</access_instruction>
            
            <enc n="op0" v="0b11"/>
            
            <enc n="op1" v="0b101"/>
            
            <enc n="CRn" v="0b1010"/>
            
            <enc n="CRm" v="0b0101"/>
            
            <enc n="op2" v="0b000"/>
        </encoding>
          <access_permission>
            <ps name="MSRregister" sections="1" secttype="access_permission">
              <pstext>
if PSTATE.EL == EL0 then
    UNDEFINED;
elsif PSTATE.EL == EL1 then
    if EL2Enabled() &amp;&amp; HCR_EL2.&lt;NV2,NV1,NV&gt; == '101' then
        NVMem[0x900] = X[t];
    elsif EL2Enabled() &amp;&amp; HCR_EL2.NV == '1' then
        if HaveEL(EL3) &amp;&amp; MPAM3_EL3.TRAPLOWER == '1' then
            AArch64.SystemAccessTrap(EL3, 0x18);
        else
            AArch64.SystemAccessTrap(EL2, 0x18);
    else
        UNDEFINED;
elsif PSTATE.EL == EL2 then
    if HCR_EL2.E2H == '1' then
        if HaveEL(EL3) &amp;&amp; MPAM3_EL3.TRAPLOWER == '1' then
            if Halted() &amp;&amp; EDSCR.SDD == '1' then
                UNDEFINED;
            else
                AArch64.SystemAccessTrap(EL3, 0x18);
        else
            MPAM1_EL1 = X[t];
    else
        UNDEFINED;
elsif PSTATE.EL == EL3 then
    if EL2Enabled() &amp;&amp; !ELUsingAArch32(EL2) &amp;&amp; HCR_EL2.E2H == '1' then
        MPAM1_EL1 = X[t];
    else
        UNDEFINED;
              </pstext>
            </ps>
          </access_permission>
      </access_mechanism>
</access_mechanisms>

      <arch_variants>
      </arch_variants>
  </register>
</registers>

    <timestamp>01/07/2020 15:57; 80324f0b9997bede489cc15ad1565345720bcd2a</timestamp>
</register_page>