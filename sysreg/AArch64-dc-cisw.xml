<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE register_page SYSTEM "registers.dtd">
<!-- Copyright (c) 2010-2018 Arm Limited or its affiliates. All rights reserved. -->
<!-- This document is Non-Confidential. This document may only be used and distributed in accordance with the terms of the agreement entered into by Arm and the party that Arm delivered this document to. -->
<?xml-stylesheet href="one_register.xsl" type="text/xsl" ?>






<register_page>
  <registers>
    <register execution_state="AArch64" is_register="False" is_internal="True" is_banked="False" is_stub_entry="False">
      <reg_short_name>DC CISW</reg_short_name>
      <reg_long_name>Data or unified Cache line Clean and Invalidate by Set/Way</reg_long_name>
      
      

          <reg_reset_value></reg_reset_value>
      <reg_mappings>
          <reg_mapping>
              
            <mapped_name filename="AArch32-dccisw.xml">DCCISW</mapped_name>
            <mapped_type>Functional</mapped_type>
              <mapped_execution_state>AArch32</mapped_execution_state>


          </reg_mapping>
      </reg_mappings>
      <reg_purpose>
        
    
      <purpose_text>
        <para>Clean and Invalidate data cache by set/way.</para>

      </purpose_text>
      <purpose_text>
        <para>When <xref browsertext="FEAT_MTE" filename="A_armv8_architecture_extensions.fm" linkend="v8.5.MemTag"/> is implemented, this instruction might clean and invalidate Allocation Tags from caches.</para>
      </purpose_text>

      </reg_purpose>
      <reg_groups>
            <reg_group>Cache maintenance instructions</reg_group>
      </reg_groups>
      <reg_configuration>
        

      </reg_configuration>
      <reg_attributes>
          
    
      <attributes_text>
        <para>DC CISW is a 64-bit System instruction.</para>
      </attributes_text>

      </reg_attributes>
      <reg_fieldsets>
        





  <fields length="64">
    <text_before_fields>
      
  

    </text_before_fields>
    
        <field
           id="0_63_32"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
           rwtype="RES0"
        >
          <field_name>0</field_name>
          <field_msb>63</field_msb>
          <field_lsb>32</field_lsb>
          <field_description order="before">
            <para>Reserved, <arm-defined-word>RES0</arm-defined-word>.</para>
          </field_description>
            <field_values>
            </field_values>
      </field>
        <field
           id="SetWay_31_4"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>SetWay</field_name>
          <field_msb>31</field_msb>
          <field_lsb>4</field_lsb>
          <field_description order="before">
          
  <para>Contains two fields:</para>
<list type="unordered">
<listitem><content>Way, bits[31:32-A], the number of the way to operate on.</content>
</listitem><listitem><content>Set, bits[B-1:L], the number of the set to operate on.</content>
</listitem></list>
<para>Bits[L-1:4] are <arm-defined-word>RES0</arm-defined-word>.</para>
<para>A = Log<sub>2</sub>(ASSOCIATIVITY), L = Log<sub>2</sub>(LINELEN), B = (L + S), S = Log<sub>2</sub>(NSETS).</para>
<para>ASSOCIATIVITY, LINELEN (line length, in bytes), and NSETS (number of sets) have their usual meanings and are the values for the cache level being operated on. The values of A and S are rounded up to the next integer.</para>

          </field_description>
            <field_values>
            </field_values>
          <field_description order="after">
            
  

          </field_description>
          <field_resets>
  
  
</field_resets>
      </field>
        <field
           id="Level_3_1"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>Level</field_name>
          <field_msb>3</field_msb>
          <field_lsb>1</field_lsb>
          <field_description order="before">
          
  <para>Cache level to operate on, minus 1. For example, this field is 0 for operations on L1 cache, or 1 for operations on L2 cache.</para>

          </field_description>
            <field_values>
            </field_values>
          <field_description order="after">
            
  

          </field_description>
          <field_resets>
  
  
</field_resets>
      </field>
        <field
           id="0_0_0"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
           rwtype="RES0"
        >
          <field_name>0</field_name>
          <field_msb>0</field_msb>
          <field_lsb>0</field_lsb>
          <field_description order="before">
            <para>Reserved, <arm-defined-word>RES0</arm-defined-word>.</para>
          </field_description>
            <field_values>
            </field_values>
      </field>
    <text_after_fields>
    
  

    </text_after_fields>
  </fields>
  <reg_fieldset length="64">
      
        <fieldat id="0_63_32" msb="63" lsb="32"/>
        <fieldat id="SetWay_31_4" msb="31" lsb="4"/>
        <fieldat id="Level_3_1" msb="3" lsb="1"/>
        <fieldat id="0_0_0" msb="0" lsb="0"/>
    </reg_fieldset>

      </reg_fieldsets>
      


<access_mechanisms>
  
    
      <access_permission_text>
        <para>If this instruction is executed with a set, way or level argument that is larger than the value supported by the implementation then the behavior is <arm-defined-word>CONSTRAINED UNPREDICTABLE</arm-defined-word> and one of the following occurs:</para>

      </access_permission_text>
      <access_permission_text>
        <list type="unordered">
<listitem><content>The instruction is <arm-defined-word>UNDEFINED</arm-defined-word>.</content>
</listitem><listitem><content>The instruction performs cache maintenance on one of:<list type="unordered">
<listitem><content>No cache lines.</content>
</listitem><listitem><content>A single arbitrary cache line.</content>
</listitem><listitem><content>Multiple arbitrary cache lines.</content>
</listitem></list>
</content>
</listitem></list>
      </access_permission_text>


      <access_mechanism accessor="DC_SYS CISW">
        <encoding>
          
          <access_instruction>DC CISW, &lt;Xt&gt;</access_instruction>
            
            <enc n="op0" v="0b01"/>
            
            <enc n="op1" v="0b000"/>
            
            <enc n="CRn" v="0b0111"/>
            
            <enc n="CRm" v="0b1110"/>
            
            <enc n="op2" v="0b010"/>
        </encoding>
          <access_permission>
            <ps name="DC_SYS" sections="1" secttype="access_permission">
              <pstext>
if PSTATE.EL == EL0 then
    UNDEFINED;
elsif PSTATE.EL == EL1 then
    if EL2Enabled() &amp;&amp; HCR_EL2.TSW == '1' then
        AArch64.SystemAccessTrap(EL2, 0x18);
    elsif EL2Enabled() &amp;&amp; (!HaveEL(EL3) || SCR_EL3.FGTEn == '1') &amp;&amp; HFGITR_EL2.DCCISW == '1' then
        AArch64.SystemAccessTrap(EL2, 0x18);
    else
        DC_CISW(X[t]);
elsif PSTATE.EL == EL2 then
    DC_CISW(X[t]);
elsif PSTATE.EL == EL3 then
    DC_CISW(X[t]);
              </pstext>
            </ps>
          </access_permission>
      </access_mechanism>
</access_mechanisms>

      <arch_variants>
      </arch_variants>
  </register>
</registers>

    <timestamp>01/07/2020 15:57; 80324f0b9997bede489cc15ad1565345720bcd2a</timestamp>
</register_page>