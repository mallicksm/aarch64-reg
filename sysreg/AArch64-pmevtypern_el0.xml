<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE register_page SYSTEM "registers.dtd">
<!-- Copyright (c) 2010-2018 Arm Limited or its affiliates. All rights reserved. -->
<!-- This document is Non-Confidential. This document may only be used and distributed in accordance with the terms of the agreement entered into by Arm and the party that Arm delivered this document to. -->
<?xml-stylesheet href="one_register.xsl" type="text/xsl" ?>






<register_page>
  <registers>
    <register execution_state="AArch64" is_register="True" is_internal="True" is_banked="False" is_stub_entry="False">
      <reg_short_name>PMEVTYPER&lt;n&gt;_EL0</reg_short_name>
      <reg_long_name>Performance Monitors Event Type Registers</reg_long_name>
      
        <reg_condition otherwise="UNDEFINED">when FEAT_PMUv3 is implemented</reg_condition>
          <reg_array>
              <reg_array_start>0</reg_array_start>
              <reg_array_end>30</reg_array_end>
         </reg_array>
      

          <reg_reset_value>

      </reg_reset_value>
      <reg_mappings>
          <reg_mapping>
              
            <mapped_name filename="AArch32-pmevtypern.xml">PMEVTYPER&lt;n&gt;</mapped_name>
            <mapped_type>Architectural</mapped_type>
              <mapped_execution_state>AArch32</mapped_execution_state>
              <mapped_from_startbit>31</mapped_from_startbit>
              <mapped_from_endbit>0</mapped_from_endbit>

              <mapped_to_startbit>31</mapped_to_startbit>
              <mapped_to_endbit>0</mapped_to_endbit>

          </reg_mapping>
          <reg_mapping>
              
            <mapped_name filename="ext-pmevtypern_el0.xml">PMEVTYPER&lt;n&gt;_EL0</mapped_name>
            <mapped_type>Architectural</mapped_type>
              <mapped_execution_state>External</mapped_execution_state>
              <mapped_from_startbit>31</mapped_from_startbit>
              <mapped_from_endbit>0</mapped_from_endbit>

              <mapped_to_startbit>31</mapped_to_startbit>
              <mapped_to_endbit>0</mapped_to_endbit>

          </reg_mapping>
      </reg_mappings>
      <reg_purpose>
        
    
      <purpose_text>
        <para>Configures event counter n, where n is 0 to 30.</para>
      </purpose_text>

      </reg_purpose>
      <reg_groups>
          <reg_group>Performance Monitors registers</reg_group>
      </reg_groups>
      <reg_configuration>
        

      </reg_configuration>
      <reg_attributes>
          <attributes_text>
            <para>PMEVTYPER&lt;n&gt;_EL0 is a 64-bit register.</para>
          </attributes_text>
      </reg_attributes>
      <reg_fieldsets>
        





  <fields length="64">
    <text_before_fields>
      
  

    </text_before_fields>
    
        <field
           id="0_63_32"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
           rwtype="RES0"
        >
          <field_name>0</field_name>
          <field_msb>63</field_msb>
          <field_lsb>32</field_lsb>
          <field_description order="before">
            <para>Reserved, <arm-defined-word>RES0</arm-defined-word>.</para>
          </field_description>
            <field_values>
            </field_values>
      </field>
        <field
           id="P_31_31"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>P</field_name>
          <field_msb>31</field_msb>
          <field_lsb>31</field_lsb>
          <field_description order="before">
          
  <para>Privileged filtering bit. Controls counting in EL1.</para>
<para>If EL3 is implemented, then counting in Non-secure EL1 is further controlled by the PMEVTYPER&lt;n&gt;_EL0.NSK bit.</para>

          </field_description>
            <field_values>
                  <field_value_instance>
        <field_value>0b0</field_value>
        <field_value_description>
  <para>Count events in EL1.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b1</field_value>
        <field_value_description>
  <para>Do not count events in EL1.</para>
</field_value_description>
    </field_value_instance>
            </field_values>
          <field_description order="after">
            
  

          </field_description>
          <field_resets>
  
  
        
    
      <field_reset reset_type="Warm">
        
      <field_reset_standard_text>AU</field_reset_standard_text>
  
      </field_reset>
  
</field_resets>
      </field>
        <field
           id="U_30_30"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>U</field_name>
          <field_msb>30</field_msb>
          <field_lsb>30</field_lsb>
          <field_description order="before">
          
  <para>User filtering bit. Controls counting in EL0.</para>
<para>If EL3 is implemented, then counting in Non-secure EL0 is further controlled by the PMEVTYPER&lt;n&gt;_EL0.NSU bit.</para>

          </field_description>
            <field_values>
                  <field_value_instance>
        <field_value>0b0</field_value>
        <field_value_description>
  <para>Count events in EL0.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b1</field_value>
        <field_value_description>
  <para>Do not count events in EL0.</para>
</field_value_description>
    </field_value_instance>
            </field_values>
          <field_description order="after">
            
  

          </field_description>
          <field_resets>
  
  
        
    
      <field_reset reset_type="Warm">
        
      <field_reset_standard_text>AU</field_reset_standard_text>
  
      </field_reset>
  
</field_resets>
      </field>
        <field
           id="NSK_29_29_1"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
           reserved_type="RES0"
        >
          <field_name>NSK</field_name>
          <field_msb>29</field_msb>
          <field_lsb>29</field_lsb>
          <field_description order="before">
          
  <para>Non-secure EL1 (kernel) modes filtering bit. Controls counting in Non-secure EL1.</para>
<para>If the value of this bit is equal to the value of the PMEVTYPER&lt;n&gt;_EL0.P bit, events in Non-secure EL1 are counted.</para>
<para>Otherwise, events in Non-secure EL1 are not counted.</para>

          </field_description>
            <field_values>
            </field_values>
          <field_description order="after">
            
  

          </field_description>
          <field_resets>
  
  
        
    
      <field_reset reset_type="Warm">
        
      <field_reset_standard_text>AU</field_reset_standard_text>
  
      </field_reset>
  
</field_resets>
            <fields_condition>When EL3 is implemented</fields_condition>
      </field>
        <field
           id="0_29_29_2"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
           rwtype="RES0"
        >
          <field_name>0</field_name>
          <field_msb>29</field_msb>
          <field_lsb>29</field_lsb>
          <field_description order="before">
            <para>Reserved, <arm-defined-word>RES0</arm-defined-word>.</para>
          </field_description>
            <field_values>
            </field_values>
      </field>
        <field
           id="NSU_28_28_1"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
           reserved_type="RES0"
        >
          <field_name>NSU</field_name>
          <field_msb>28</field_msb>
          <field_lsb>28</field_lsb>
          <field_description order="before">
          
  <para>Non-secure EL0 (Unprivileged) filtering bit. Controls counting in Non-secure EL0.</para>
<para>If the value of this bit is equal to the value of the PMEVTYPER&lt;n&gt;_EL0.U bit, events in Non-secure EL0 are counted.</para>
<para>Otherwise, events in Non-secure EL0 are not counted.</para>

          </field_description>
            <field_values>
            </field_values>
          <field_description order="after">
            
  

          </field_description>
          <field_resets>
  
  
        
    
      <field_reset reset_type="Warm">
        
      <field_reset_standard_text>AU</field_reset_standard_text>
  
      </field_reset>
  
</field_resets>
            <fields_condition>When EL3 is implemented</fields_condition>
      </field>
        <field
           id="0_28_28_2"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
           rwtype="RES0"
        >
          <field_name>0</field_name>
          <field_msb>28</field_msb>
          <field_lsb>28</field_lsb>
          <field_description order="before">
            <para>Reserved, <arm-defined-word>RES0</arm-defined-word>.</para>
          </field_description>
            <field_values>
            </field_values>
      </field>
        <field
           id="NSH_27_27_1"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
           reserved_type="RES0"
        >
          <field_name>NSH</field_name>
          <field_msb>27</field_msb>
          <field_lsb>27</field_lsb>
          <field_description order="before">
          
  <para>EL2 (Hypervisor) filtering bit. Controls counting in EL2.</para>
<para>If Secure EL2 is implemented, and EL3 is implemented, counting in Secure EL2 is further controlled by the PMEVTYPER&lt;n&gt;_EL0.SH bit.</para>

          </field_description>
            <field_values>
                  <field_value_instance>
        <field_value>0b0</field_value>
        <field_value_description>
  <para>Do not count events in EL2.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b1</field_value>
        <field_value_description>
  <para>Count events in EL2.</para>
</field_value_description>
    </field_value_instance>
            </field_values>
          <field_description order="after">
            
  

          </field_description>
          <field_resets>
  
  
        
    
      <field_reset reset_type="Warm">
        
      <field_reset_standard_text>AU</field_reset_standard_text>
  
      </field_reset>
  
</field_resets>
            <fields_condition>When EL2 is implemented</fields_condition>
      </field>
        <field
           id="0_27_27_2"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
           rwtype="RES0"
        >
          <field_name>0</field_name>
          <field_msb>27</field_msb>
          <field_lsb>27</field_lsb>
          <field_description order="before">
            <para>Reserved, <arm-defined-word>RES0</arm-defined-word>.</para>
          </field_description>
            <field_values>
            </field_values>
      </field>
        <field
           id="M_26_26_1"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
           reserved_type="RES0"
        >
          <field_name>M</field_name>
          <field_msb>26</field_msb>
          <field_lsb>26</field_lsb>
          <field_description order="before">
          
  <para>Secure EL3 filtering bit.</para>
<para>If the value of this bit is equal to the value of the PMEVTYPER&lt;n&gt;_EL0.P bit, events in Secure EL3 are counted.</para>
<para>Otherwise, events in Secure EL3 are not counted.</para>
<para>Most applications can ignore this field and set its value to <binarynumber>0b0</binarynumber>.</para>
<note><para>This field is not visible in the AArch32 <register_link state="AArch32" id="AArch32-pmevtypern.xml">PMEVTYPER&lt;n&gt;</register_link> System register.</para></note>

          </field_description>
            <field_values>
            </field_values>
          <field_description order="after">
            
  

          </field_description>
          <field_resets>
  
  
        
    
      <field_reset reset_type="Warm">
        
      <field_reset_standard_text>AU</field_reset_standard_text>
  
      </field_reset>
  
</field_resets>
            <fields_condition>When EL3 is implemented</fields_condition>
      </field>
        <field
           id="0_26_26_2"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
           rwtype="RES0"
        >
          <field_name>0</field_name>
          <field_msb>26</field_msb>
          <field_lsb>26</field_lsb>
          <field_description order="before">
            <para>Reserved, <arm-defined-word>RES0</arm-defined-word>.</para>
          </field_description>
            <field_values>
            </field_values>
      </field>
        <field
           id="MT_25_25_1"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
           reserved_type="RES0"
        >
          <field_name>MT</field_name>
          <field_msb>25</field_msb>
          <field_lsb>25</field_lsb>
          <field_description order="before">
          
  <para>Multithreading.</para>

          </field_description>
            <field_values>
                  <field_value_instance>
        <field_value>0b0</field_value>
        <field_value_description>
  <para>Count events only on controlling PE.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b1</field_value>
        <field_value_description>
  <para>Count events from any PE with the same affinity at level 1 and above as this PE.</para>
</field_value_description>
    </field_value_instance>
            </field_values>
          <field_description order="after">
            
  <note><list type="unordered"><listitem><content>When the lowest level of <xref browsertext="affinity" filename="D_the_performance_monitors_Extension.fm" linkend="BABIJFGF"></xref> consists of logical PEs that are implemented using a multi-threading type approach, an implementation is described as multi-threaded. That is, the performance of PEs at the lowest affinity level is highly interdependent.</content></listitem><listitem><content>Events from a different thread of a multithreaded implementation are not Attributable to the thread counting the event.</content></listitem></list></note>

          </field_description>
          <field_resets>
  
  
        
    
      <field_reset reset_type="Warm">
        
      <field_reset_standard_text>AU</field_reset_standard_text>
  
      </field_reset>
  
</field_resets>
            <fields_condition>When (FEAT_MTPMU is implemented and enabled) or an IMPLEMENTATION DEFINED multi-threaded PMU Extension is implemented</fields_condition>
      </field>
        <field
           id="0_25_25_2"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
           rwtype="RES0"
        >
          <field_name>0</field_name>
          <field_msb>25</field_msb>
          <field_lsb>25</field_lsb>
          <field_description order="before">
            <para>Reserved, <arm-defined-word>RES0</arm-defined-word>.</para>
          </field_description>
            <field_values>
            </field_values>
      </field>
        <field
           id="SH_24_24_1"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
           reserved_type="RES0"
        >
          <field_name>SH</field_name>
          <field_msb>24</field_msb>
          <field_lsb>24</field_lsb>
          <field_description order="before">
          
  <para>Secure EL2 filtering.</para>
<para>If the value of this bit is not equal to the value of the PMEVTYPER&lt;n&gt;_EL0.NSH bit, events in Secure EL2 are counted.</para>
<para>Otherwise, events in Secure EL2 are not counted.</para>
<note><para>This field is not visible in the AArch32 <register_link state="AArch32" id="AArch32-pmevtypern.xml">PMEVTYPER&lt;n&gt;</register_link> System register.</para></note>

          </field_description>
            <field_values>
            </field_values>
          <field_description order="after">
            
  

          </field_description>
          <field_resets>
  
  
        
    
      <field_reset reset_type="Warm">
        
      <field_reset_standard_text>AU</field_reset_standard_text>
  
      </field_reset>
  
</field_resets>
            <fields_condition>When FEAT_SEL2 is implemented and EL3 is implemented</fields_condition>
      </field>
        <field
           id="0_24_24_2"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
           rwtype="RES0"
        >
          <field_name>0</field_name>
          <field_msb>24</field_msb>
          <field_lsb>24</field_lsb>
          <field_description order="before">
            <para>Reserved, <arm-defined-word>RES0</arm-defined-word>.</para>
          </field_description>
            <field_values>
            </field_values>
      </field>
        <field
           id="0_23_16"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
           rwtype="RES0"
        >
          <field_name>0</field_name>
          <field_msb>23</field_msb>
          <field_lsb>16</field_lsb>
          <field_description order="before">
            <para>Reserved, <arm-defined-word>RES0</arm-defined-word>.</para>
          </field_description>
            <field_values>
            </field_values>
      </field>
        <field
           id="evtCount[15:10]_15_10_1"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
           reserved_type="RES0"
        >
          <field_name>evtCount[15:10]</field_name>
          <field_msb>15</field_msb>
          <field_lsb>10</field_lsb>
           <field_range>15:10</field_range>
          <field_description order="before">
          
  <para>Extension to evtCount[9:0]. See evtCount[9:0] for more details.</para>

          </field_description>
            <field_values>
            </field_values>
          <field_description order="after">
            
  

          </field_description>
          <field_resets>
  
  
        
    
      <field_reset reset_type="Warm">
        
      <field_reset_standard_text>AU</field_reset_standard_text>
  
      </field_reset>
  
</field_resets>
            <fields_condition>When FEAT_PMUv3p1 is implemented</fields_condition>
      </field>
        <field
           id="0_15_10_2"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
           rwtype="RES0"
        >
          <field_name>0</field_name>
          <field_msb>15</field_msb>
          <field_lsb>10</field_lsb>
           <field_range>15:10</field_range>
          <field_description order="before">
            <para>Reserved, <arm-defined-word>RES0</arm-defined-word>.</para>
          </field_description>
            <field_values>
            </field_values>
      </field>
        <field
           id="evtCount[9:0]_9_0"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>evtCount[9:0]</field_name>
          <field_msb>9</field_msb>
          <field_lsb>0</field_lsb>
          <field_description order="before">
          
  <para>Event to count. The event number of the event that is counted by event counter <register_link state="AArch64" id="AArch64-pmevcntrn_el0.xml">PMEVCNTR&lt;n&gt;_EL0</register_link>.</para>
<para>Software must program this field with an event that is supported by the PE being programmed.</para>
<para>The ranges of event numbers allocated to each type of event are shown in <xref browsertext="'Allocation of the PMU event number space'" filename="D_the_performance_monitors_extension.fm" linkend="CACBHBFJ"></xref>.</para>
<para>If evtCount is programmed to an event that is reserved or not supported by the PE, the behavior depends on the value written:</para>
<list type="unordered">
<listitem><content>For the range <hexnumber>0x0000</hexnumber> to <hexnumber>0x003F</hexnumber>, no events are counted, and the value returned by a direct or external read of the evtCount field is the value written to the field.</content>
</listitem><listitem><content>If 16-bit evtCount is implemented, for the range <hexnumber>0x4000</hexnumber> to <hexnumber>0x403F</hexnumber>, no events are counted, and the value returned by a direct or external read of the evtCount field is the value written to the field.</content>
</listitem><listitem><content>For <arm-defined-word>IMPLEMENTATION DEFINED</arm-defined-word> events, it is <arm-defined-word>UNPREDICTABLE</arm-defined-word> what event, if any, is counted, and the value returned by a direct or external read of the evtCount field is <arm-defined-word>UNKNOWN</arm-defined-word>.</content>
</listitem></list>
<note><para><arm-defined-word>UNPREDICTABLE</arm-defined-word> means the event must not expose privileged information.</para></note><para>Arm recommends that the behavior across a family of implementations is defined such that if a given implementation does not include an event from a set of common <arm-defined-word>IMPLEMENTATION DEFINED</arm-defined-word> events, then no event is counted and the value read back on evtCount is the value written.</para>

          </field_description>
            <field_values>
            </field_values>
          <field_description order="after">
            
  

          </field_description>
          <field_resets>
  
  
        
    
      <field_reset reset_type="Warm">
        
      <field_reset_standard_text>AU</field_reset_standard_text>
  
      </field_reset>
  
</field_resets>
      </field>
    <text_after_fields>
    
  

    </text_after_fields>
  </fields>
  <reg_fieldset length="64">
      
        <fieldat id="0_63_32" msb="63" lsb="32"/>
        <fieldat id="P_31_31" msb="31" lsb="31"/>
        <fieldat id="U_30_30" msb="30" lsb="30"/>
        <fieldat id="NSK_29_29_1" msb="29" lsb="29"/>
        <fieldat id="NSU_28_28_1" msb="28" lsb="28"/>
        <fieldat id="NSH_27_27_1" msb="27" lsb="27"/>
        <fieldat id="M_26_26_1" msb="26" lsb="26"/>
        <fieldat id="MT_25_25_1" msb="25" lsb="25"/>
        <fieldat id="SH_24_24_1" msb="24" lsb="24"/>
        <fieldat id="0_23_16" msb="23" lsb="16"/>
        <fieldat id="evtCount[15:10]_15_10_1" msb="15" lsb="10"/>
        <fieldat id="evtCount[9:0]_9_0" msb="9" lsb="0"/>
    </reg_fieldset>

      </reg_fieldsets>
        <reg_variables>
              <reg_variable variable="n" max="30"/>
        </reg_variables>
      


<access_mechanisms>
  
    
      <access_permission_text>
        <para>PMEVTYPER&lt;n&gt;_EL0 can also be accessed by using <register_link state="AArch64" id="AArch64-pmxevtyper_el0.xml">PMXEVTYPER_EL0</register_link> with <register_link state="AArch64" id="AArch64-pmselr_el0.xml">PMSELR_EL0</register_link>.SEL set to n.</para>

      </access_permission_text>
      <access_permission_text>
        <para>If <xref browsertext="FEAT_FGT" filename="A_armv8_architecture_extensions.fm" linkend="v8.6.FGT"/> is implemented and &lt;n&gt; is greater than or equal to the number of accessible counters, then the behavior of permitted reads and writes of <register_link state="AArch64" id="AArch64-pmevtypern_el0.xml">PMEVTYPER&lt;n&gt;_EL0</register_link> is as follows:</para>

      </access_permission_text>
      <access_permission_text>
        <list type="unordered">
<listitem><content>If &lt;n&gt; is an unimplemented event counter, the access is <arm-defined-word>UNDEFINED</arm-defined-word>.</content>
</listitem><listitem><content>Otherwise, the access is trapped to EL2.</content>
</listitem></list>

      </access_permission_text>
      <access_permission_text>
        <para>If <xref browsertext="FEAT_FGT" filename="A_armv8_architecture_extensions.fm" linkend="v8.6.FGT"/> is not implemented and &lt;n&gt; is greater than or equal to the number of accessible counters, then reads and writes of <register_link state="AArch64" id="AArch64-pmevtypern_el0.xml">PMEVTYPER&lt;n&gt;_EL0</register_link> are <arm-defined-word>CONSTRAINED UNPREDICTABLE</arm-defined-word>, and the following behaviors are permitted:</para>

      </access_permission_text>
      <access_permission_text>
        <list type="unordered">
<listitem><content>Accesses to the register are <arm-defined-word>UNDEFINED</arm-defined-word>.</content>
</listitem><listitem><content>Accesses to the register behave as RAZ/WI.</content>
</listitem><listitem><content>Accesses to the register execute as a <instruction>NOP</instruction>.</content>
</listitem><listitem><content>If EL2 is implemented and enabled in the current Security state, and &lt;n&gt; is less than the number of implemented event counters, accesses from EL1 or permitted accesses from EL0 are trapped to EL2.</content>
</listitem></list>

      </access_permission_text>
      <access_permission_text>
        <note><para>In EL0, an access is permitted if it is enabled by <register_link state="AArch64" id="AArch64-pmuserenr_el0.xml">PMUSERENR_EL0</register_link>.EN.</para><para>If EL2 is implemented and enabled in the current Security state, in EL1 and EL0, <register_link state="AArch64" id="AArch64-mdcr_el2.xml">MDCR_EL2</register_link>.HPMN identifies the number of accessible event counters. Otherwise, the number of accessible event counters is the number of implemented event counters. See <register_link state="AArch64" id="AArch64-mdcr_el2.xml">MDCR_EL2</register_link>.HPMN for more details.</para></note>
      </access_permission_text>


      <access_mechanism accessor="MRS PMEVTYPER&lt;n&gt;_EL0">
        <encoding>
          
          <access_instruction>MRS &lt;Xt&gt;, PMEVTYPER&lt;n&gt;_EL0</access_instruction>
            
            <enc n="op0" v="0b11"/>
            
            <enc n="op1" v="0b011"/>
            
            <enc n="CRn" v="0b1110"/>
            
            <enc n="CRm" v="0b11:n[4:3]"/>
            
            <enc n="op2" v="n[2:0]"/>
        </encoding>
          <access_permission>
            <ps name="MRS" sections="1" secttype="access_permission">
              <pstext>
if PSTATE.EL == EL0 then
    if Halted() &amp;&amp; HaveEL(EL3) &amp;&amp; EDSCR.SDD == '1' &amp;&amp; boolean IMPLEMENTATION_DEFINED "EL3 trap priority when SDD == '1'" &amp;&amp; MDCR_EL3.TPM == '1' then
        UNDEFINED;
    elsif PMUSERENR_EL0.EN == '0' then
        if EL2Enabled() &amp;&amp; HCR_EL2.TGE == '1' then
            AArch64.SystemAccessTrap(EL2, 0x18);
        else
            AArch64.SystemAccessTrap(EL1, 0x18);
    elsif EL2Enabled() &amp;&amp; HCR_EL2.&lt;E2H,TGE&gt; != '11' &amp;&amp; (!HaveEL(EL3) || SCR_EL3.FGTEn == '1') &amp;&amp; HDFGRTR_EL2.PMEVTYPERn_EL0 == '1' then
        AArch64.SystemAccessTrap(EL2, 0x18);
    elsif EL2Enabled() &amp;&amp; MDCR_EL2.TPM == '1' then
        AArch64.SystemAccessTrap(EL2, 0x18);
    elsif HaveEL(EL3) &amp;&amp; MDCR_EL3.TPM == '1' then
        if Halted() &amp;&amp; EDSCR.SDD == '1' then
            UNDEFINED;
        else
            AArch64.SystemAccessTrap(EL3, 0x18);
    else
        return PMEVTYPER_EL0[UInt(CRm&lt;1:0&gt;:op2&lt;2:0&gt;)];
elsif PSTATE.EL == EL1 then
    if Halted() &amp;&amp; HaveEL(EL3) &amp;&amp; EDSCR.SDD == '1' &amp;&amp; boolean IMPLEMENTATION_DEFINED "EL3 trap priority when SDD == '1'" &amp;&amp; MDCR_EL3.TPM == '1' then
        UNDEFINED;
    elsif EL2Enabled() &amp;&amp; (!HaveEL(EL3) || SCR_EL3.FGTEn == '1') &amp;&amp; HDFGRTR_EL2.PMEVTYPERn_EL0 == '1' then
        AArch64.SystemAccessTrap(EL2, 0x18);
    elsif EL2Enabled() &amp;&amp; MDCR_EL2.TPM == '1' then
        AArch64.SystemAccessTrap(EL2, 0x18);
    elsif HaveEL(EL3) &amp;&amp; MDCR_EL3.TPM == '1' then
        if Halted() &amp;&amp; EDSCR.SDD == '1' then
            UNDEFINED;
        else
            AArch64.SystemAccessTrap(EL3, 0x18);
    else
        return PMEVTYPER_EL0[UInt(CRm&lt;1:0&gt;:op2&lt;2:0&gt;)];
elsif PSTATE.EL == EL2 then
    if Halted() &amp;&amp; HaveEL(EL3) &amp;&amp; EDSCR.SDD == '1' &amp;&amp; boolean IMPLEMENTATION_DEFINED "EL3 trap priority when SDD == '1'" &amp;&amp; MDCR_EL3.TPM == '1' then
        UNDEFINED;
    elsif HaveEL(EL3) &amp;&amp; MDCR_EL3.TPM == '1' then
        if Halted() &amp;&amp; EDSCR.SDD == '1' then
            UNDEFINED;
        else
            AArch64.SystemAccessTrap(EL3, 0x18);
    else
        return PMEVTYPER_EL0[UInt(CRm&lt;1:0&gt;:op2&lt;2:0&gt;)];
elsif PSTATE.EL == EL3 then
    return PMEVTYPER_EL0[UInt(CRm&lt;1:0&gt;:op2&lt;2:0&gt;)];
              </pstext>
            </ps>
          </access_permission>
      </access_mechanism>
      <access_mechanism accessor="MSRregister PMEVTYPER&lt;n&gt;_EL0">
        <encoding>
          
          <access_instruction>MSR PMEVTYPER&lt;n&gt;_EL0, &lt;Xt&gt;</access_instruction>
            
            <enc n="op0" v="0b11"/>
            
            <enc n="op1" v="0b011"/>
            
            <enc n="CRn" v="0b1110"/>
            
            <enc n="CRm" v="0b11:n[4:3]"/>
            
            <enc n="op2" v="n[2:0]"/>
        </encoding>
          <access_permission>
            <ps name="MSRregister" sections="1" secttype="access_permission">
              <pstext>
if PSTATE.EL == EL0 then
    if Halted() &amp;&amp; HaveEL(EL3) &amp;&amp; EDSCR.SDD == '1' &amp;&amp; boolean IMPLEMENTATION_DEFINED "EL3 trap priority when SDD == '1'" &amp;&amp; MDCR_EL3.TPM == '1' then
        UNDEFINED;
    elsif PMUSERENR_EL0.EN == '0' then
        if EL2Enabled() &amp;&amp; HCR_EL2.TGE == '1' then
            AArch64.SystemAccessTrap(EL2, 0x18);
        else
            AArch64.SystemAccessTrap(EL1, 0x18);
    elsif EL2Enabled() &amp;&amp; HCR_EL2.&lt;E2H,TGE&gt; != '11' &amp;&amp; (!HaveEL(EL3) || SCR_EL3.FGTEn == '1') &amp;&amp; HDFGWTR_EL2.PMEVTYPERn_EL0 == '1' then
        AArch64.SystemAccessTrap(EL2, 0x18);
    elsif EL2Enabled() &amp;&amp; MDCR_EL2.TPM == '1' then
        AArch64.SystemAccessTrap(EL2, 0x18);
    elsif HaveEL(EL3) &amp;&amp; MDCR_EL3.TPM == '1' then
        if Halted() &amp;&amp; EDSCR.SDD == '1' then
            UNDEFINED;
        else
            AArch64.SystemAccessTrap(EL3, 0x18);
    else
        PMEVTYPER_EL0[UInt(CRm&lt;1:0&gt;:op2&lt;2:0&gt;)] = X[t];
elsif PSTATE.EL == EL1 then
    if Halted() &amp;&amp; HaveEL(EL3) &amp;&amp; EDSCR.SDD == '1' &amp;&amp; boolean IMPLEMENTATION_DEFINED "EL3 trap priority when SDD == '1'" &amp;&amp; MDCR_EL3.TPM == '1' then
        UNDEFINED;
    elsif EL2Enabled() &amp;&amp; (!HaveEL(EL3) || SCR_EL3.FGTEn == '1') &amp;&amp; HDFGWTR_EL2.PMEVTYPERn_EL0 == '1' then
        AArch64.SystemAccessTrap(EL2, 0x18);
    elsif EL2Enabled() &amp;&amp; MDCR_EL2.TPM == '1' then
        AArch64.SystemAccessTrap(EL2, 0x18);
    elsif HaveEL(EL3) &amp;&amp; MDCR_EL3.TPM == '1' then
        if Halted() &amp;&amp; EDSCR.SDD == '1' then
            UNDEFINED;
        else
            AArch64.SystemAccessTrap(EL3, 0x18);
    else
        PMEVTYPER_EL0[UInt(CRm&lt;1:0&gt;:op2&lt;2:0&gt;)] = X[t];
elsif PSTATE.EL == EL2 then
    if Halted() &amp;&amp; HaveEL(EL3) &amp;&amp; EDSCR.SDD == '1' &amp;&amp; boolean IMPLEMENTATION_DEFINED "EL3 trap priority when SDD == '1'" &amp;&amp; MDCR_EL3.TPM == '1' then
        UNDEFINED;
    elsif HaveEL(EL3) &amp;&amp; MDCR_EL3.TPM == '1' then
        if Halted() &amp;&amp; EDSCR.SDD == '1' then
            UNDEFINED;
        else
            AArch64.SystemAccessTrap(EL3, 0x18);
    else
        PMEVTYPER_EL0[UInt(CRm&lt;1:0&gt;:op2&lt;2:0&gt;)] = X[t];
elsif PSTATE.EL == EL3 then
    PMEVTYPER_EL0[UInt(CRm&lt;1:0&gt;:op2&lt;2:0&gt;)] = X[t];
              </pstext>
            </ps>
          </access_permission>
      </access_mechanism>
</access_mechanisms>

      <arch_variants>
      </arch_variants>
  </register>
</registers>

    <timestamp>01/07/2020 15:57; 80324f0b9997bede489cc15ad1565345720bcd2a</timestamp>
</register_page>