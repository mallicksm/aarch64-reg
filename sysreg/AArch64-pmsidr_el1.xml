<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE register_page SYSTEM "registers.dtd">
<!-- Copyright (c) 2010-2018 Arm Limited or its affiliates. All rights reserved. -->
<!-- This document is Non-Confidential. This document may only be used and distributed in accordance with the terms of the agreement entered into by Arm and the party that Arm delivered this document to. -->
<?xml-stylesheet href="one_register.xsl" type="text/xsl" ?>






<register_page>
  <registers>
    <register execution_state="AArch64" is_register="True" is_internal="True" is_banked="False" is_stub_entry="False">
      <reg_short_name>PMSIDR_EL1</reg_short_name>
      <reg_long_name>Sampling Profiling ID Register</reg_long_name>
      
        <reg_condition otherwise="UNDEFINED">when FEAT_SPE is implemented</reg_condition>
      

          <reg_reset_value></reg_reset_value>
      <reg_mappings>
      </reg_mappings>
      <reg_purpose>
        
    
      <purpose_text>
        <para>Describes the Statistical Profiling implementation to software</para>
      </purpose_text>

      </reg_purpose>
      <reg_groups>
          <reg_group>Statistical Profiling Extension registers</reg_group>
      </reg_groups>
      <reg_configuration>
        

      </reg_configuration>
      <reg_attributes>
          <attributes_text>
            <para>PMSIDR_EL1 is a 64-bit register.</para>
          </attributes_text>
      </reg_attributes>
      <reg_fieldsets>
        





  <fields length="64">
    <text_before_fields>
      
  

    </text_before_fields>
    
        <field
           id="0_63_20"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
           rwtype="RES0"
        >
          <field_name>0</field_name>
          <field_msb>63</field_msb>
          <field_lsb>20</field_lsb>
          <field_description order="before">
            <para>Reserved, <arm-defined-word>RES0</arm-defined-word>.</para>
          </field_description>
            <field_values>
            </field_values>
      </field>
        <field
           id="CountSize_19_16"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>CountSize</field_name>
          <field_msb>19</field_msb>
          <field_lsb>16</field_lsb>
          <field_description order="before">
          
  <para>Defines the size of the counters</para>

          </field_description>
            <field_values>
                  <field_value_instance>
        <field_value>0b0010</field_value>
        <field_value_description>
  <para>12-bit saturating counters</para>
</field_value_description>
    </field_value_instance>
            </field_values>
          <field_description order="after">
            
  <para>All other values are reserved. Reserved values might be defined in a future version of the architecture.</para>

          </field_description>
          <field_resets>
  
  
</field_resets>
      </field>
        <field
           id="MaxSize_15_12"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>MaxSize</field_name>
          <field_msb>15</field_msb>
          <field_lsb>12</field_lsb>
          <field_description order="before">
          
  <para>Defines the largest size for a single record, rounded up to a power-of-two. If this is the same as the minimum alignment (PMBIDR_EL1.Align), then each record is exactly this size</para>

          </field_description>
            <field_values>
                  <field_value_instance>
        <field_value>0b0100</field_value>
        <field_value_description>
  <para>16 bytes</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b0101</field_value>
        <field_value_description>
  <para>32 bytes</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b0110</field_value>
        <field_value_description>
  <para>64 bytes</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b0111</field_value>
        <field_value_description>
  <para>128 bytes</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b1000</field_value>
        <field_value_description>
  <para>256 bytes</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b1001</field_value>
        <field_value_description>
  <para>512 bytes</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b1010</field_value>
        <field_value_description>
  <para>1024 bytes</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b1011</field_value>
        <field_value_description>
  <para>2KB</para>
</field_value_description>
    </field_value_instance>
            </field_values>
          <field_description order="after">
            
  <para>All other values are reserved. Reserved values might be defined in a future version of the architecture.</para>

          </field_description>
          <field_resets>
  
  
</field_resets>
      </field>
        <field
           id="Interval_11_8"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>Interval</field_name>
          <field_msb>11</field_msb>
          <field_lsb>8</field_lsb>
          <field_description order="before">
          
  <para>Recommended minimum sampling interval. This provides guidance from the implementer to the smallest minimum sampling interval, N.</para>

          </field_description>
            <field_values>
                  <field_value_instance>
        <field_value>0b0000</field_value>
        <field_value_description>
  <para>256</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b0010</field_value>
        <field_value_description>
  <para>512</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b0011</field_value>
        <field_value_description>
  <para>768</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b0100</field_value>
        <field_value_description>
  <para>1,024</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b0101</field_value>
        <field_value_description>
  <para>1,536</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b0110</field_value>
        <field_value_description>
  <para>2,048</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b0111</field_value>
        <field_value_description>
  <para>3,072</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b1000</field_value>
        <field_value_description>
  <para>4,096</para>
</field_value_description>
    </field_value_instance>
            </field_values>
          <field_description order="after">
            
  <para>All other values are reserved. Reserved values might be defined in a future version of the architecture.</para>

          </field_description>
          <field_resets>
  
  
</field_resets>
      </field>
        <field
           id="0_7_6"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
           rwtype="RES0"
        >
          <field_name>0</field_name>
          <field_msb>7</field_msb>
          <field_lsb>6</field_lsb>
          <field_description order="before">
            <para>Reserved, <arm-defined-word>RES0</arm-defined-word>.</para>
          </field_description>
            <field_values>
            </field_values>
      </field>
        <field
           id="ERnd_5_5"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>ERnd</field_name>
          <field_msb>5</field_msb>
          <field_lsb>5</field_lsb>
          <field_description order="before">
          
  <para>Defines how the random number generator is used in determining the interval between samples, when enabled by PMSIRR_EL1.RND.</para>

          </field_description>
            <field_values>
                  <field_value_instance>
        <field_value>0b0</field_value>
        <field_value_description>
  <para>The random number is added at the start of the interval, and the sample is taken and a new interval started when the combined interval expires.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b1</field_value>
        <field_value_description>
  <para>The random number is added and the new interval started after the interval programmed in PMSIRR_EL1.INTERVAL expires, and the sample is taken when the random interval expires.</para>
</field_value_description>
    </field_value_instance>
            </field_values>
          <field_description order="after">
            
  

          </field_description>
          <field_resets>
  
  
</field_resets>
      </field>
        <field
           id="LDS_4_4"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>LDS</field_name>
          <field_msb>4</field_msb>
          <field_lsb>4</field_lsb>
          <field_description order="before">
          
  <para>Data source indicator for sampled load instructions</para>

          </field_description>
            <field_values>
                  <field_value_instance>
        <field_value>0b0</field_value>
        <field_value_description>
  <para>Loaded data source not implemented</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b1</field_value>
        <field_value_description>
  <para>Loaded data source implemented</para>
</field_value_description>
    </field_value_instance>
            </field_values>
          <field_description order="after">
            
  

          </field_description>
          <field_resets>
  
  
</field_resets>
      </field>
        <field
           id="ArchInst_3_3"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>ArchInst</field_name>
          <field_msb>3</field_msb>
          <field_lsb>3</field_lsb>
          <field_description order="before">
          
  <para>Architectural instruction profiling</para>

          </field_description>
            <field_values>
                  <field_value_instance>
        <field_value>0b0</field_value>
        <field_value_description>
  <para>Micro-op sampling implemented</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b1</field_value>
        <field_value_description>
  <para>Architecture instruction sampling implemented</para>
</field_value_description>
    </field_value_instance>
            </field_values>
          <field_description order="after">
            
  

          </field_description>
          <field_resets>
  
  
</field_resets>
      </field>
        <field
           id="FL_2_2"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>FL</field_name>
          <field_msb>2</field_msb>
          <field_lsb>2</field_lsb>
          <field_description order="before">
          
  <para>Filtering by latency. This bit is RAO.</para>

          </field_description>
            <field_values>
            </field_values>
          <field_description order="after">
            
  

          </field_description>
          <field_resets>
  
  
</field_resets>
      </field>
        <field
           id="FT_1_1"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>FT</field_name>
          <field_msb>1</field_msb>
          <field_lsb>1</field_lsb>
          <field_description order="before">
          
  <para>Filtering by operation type. This bit is RAO.</para>

          </field_description>
            <field_values>
            </field_values>
          <field_description order="after">
            
  

          </field_description>
          <field_resets>
  
  
</field_resets>
      </field>
        <field
           id="FE_0_0"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>FE</field_name>
          <field_msb>0</field_msb>
          <field_lsb>0</field_lsb>
          <field_description order="before">
          
  <para>Filtering by events. This bit is RAO.</para>

          </field_description>
            <field_values>
            </field_values>
          <field_description order="after">
            
  

          </field_description>
          <field_resets>
  
  
</field_resets>
      </field>
    <text_after_fields>
    
  

    </text_after_fields>
  </fields>
  <reg_fieldset length="64">
      
        <fieldat id="0_63_20" msb="63" lsb="20"/>
        <fieldat id="CountSize_19_16" msb="19" lsb="16"/>
        <fieldat id="MaxSize_15_12" msb="15" lsb="12"/>
        <fieldat id="Interval_11_8" msb="11" lsb="8"/>
        <fieldat id="0_7_6" msb="7" lsb="6"/>
        <fieldat id="ERnd_5_5" msb="5" lsb="5"/>
        <fieldat id="LDS_4_4" msb="4" lsb="4"/>
        <fieldat id="ArchInst_3_3" msb="3" lsb="3"/>
        <fieldat id="FL_2_2" msb="2" lsb="2"/>
        <fieldat id="FT_1_1" msb="1" lsb="1"/>
        <fieldat id="FE_0_0" msb="0" lsb="0"/>
    </reg_fieldset>

      </reg_fieldsets>
      


<access_mechanisms>
  


      <access_mechanism accessor="MRS PMSIDR_EL1">
        <encoding>
          
          <access_instruction>MRS &lt;Xt&gt;, PMSIDR_EL1</access_instruction>
            
            <enc n="op0" v="0b11"/>
            
            <enc n="op1" v="0b000"/>
            
            <enc n="CRn" v="0b1001"/>
            
            <enc n="CRm" v="0b1001"/>
            
            <enc n="op2" v="0b111"/>
        </encoding>
          <access_permission>
            <ps name="MRS" sections="1" secttype="access_permission">
              <pstext>
if PSTATE.EL == EL0 then
    UNDEFINED;
elsif PSTATE.EL == EL1 then
    if Halted() &amp;&amp; HaveEL(EL3) &amp;&amp; EDSCR.SDD == '1' &amp;&amp; boolean IMPLEMENTATION_DEFINED "EL3 trap priority when SDD == '1'" &amp;&amp; SCR_EL3.NS == '0' &amp;&amp; MDCR_EL3.NSPB != '01' then
        UNDEFINED;
    elsif Halted() &amp;&amp; HaveEL(EL3) &amp;&amp; EDSCR.SDD == '1' &amp;&amp; boolean IMPLEMENTATION_DEFINED "EL3 trap priority when SDD == '1'" &amp;&amp; SCR_EL3.NS == '1' &amp;&amp; MDCR_EL3.NSPB != '11' then
        UNDEFINED;
    elsif EL2Enabled() &amp;&amp; (!HaveEL(EL3) || SCR_EL3.FGTEn == '1') &amp;&amp; HDFGRTR_EL2.PMSIDR_EL1 == '1' then
        AArch64.SystemAccessTrap(EL2, 0x18);
    elsif EL2Enabled() &amp;&amp; MDCR_EL2.TPMS == '1' then
        AArch64.SystemAccessTrap(EL2, 0x18);
    elsif HaveEL(EL3) &amp;&amp; SCR_EL3.NS == '0' &amp;&amp; MDCR_EL3.NSPB != '01' then
        if Halted() &amp;&amp; EDSCR.SDD == '1' then
            UNDEFINED;
        else
            AArch64.SystemAccessTrap(EL3, 0x18);
    elsif HaveEL(EL3) &amp;&amp; SCR_EL3.NS == '1' &amp;&amp; MDCR_EL3.NSPB != '11' then
        if Halted() &amp;&amp; EDSCR.SDD == '1' then
            UNDEFINED;
        else
            AArch64.SystemAccessTrap(EL3, 0x18);
    else
        return PMSIDR_EL1;
elsif PSTATE.EL == EL2 then
    if Halted() &amp;&amp; HaveEL(EL3) &amp;&amp; EDSCR.SDD == '1' &amp;&amp; boolean IMPLEMENTATION_DEFINED "EL3 trap priority when SDD == '1'" &amp;&amp; SCR_EL3.NS == '0' &amp;&amp; MDCR_EL3.NSPB != '01' then
        UNDEFINED;
    elsif Halted() &amp;&amp; HaveEL(EL3) &amp;&amp; EDSCR.SDD == '1' &amp;&amp; boolean IMPLEMENTATION_DEFINED "EL3 trap priority when SDD == '1'" &amp;&amp; SCR_EL3.NS == '1' &amp;&amp; MDCR_EL3.NSPB != '11' then
        UNDEFINED;
    elsif HaveEL(EL3) &amp;&amp; SCR_EL3.NS == '0' &amp;&amp; MDCR_EL3.NSPB != '01' then
        if Halted() &amp;&amp; EDSCR.SDD == '1' then
            UNDEFINED;
        else
            AArch64.SystemAccessTrap(EL3, 0x18);
    elsif HaveEL(EL3) &amp;&amp; SCR_EL3.NS == '1' &amp;&amp; MDCR_EL3.NSPB != '11' then
        if Halted() &amp;&amp; EDSCR.SDD == '1' then
            UNDEFINED;
        else
            AArch64.SystemAccessTrap(EL3, 0x18);
    else
        return PMSIDR_EL1;
elsif PSTATE.EL == EL3 then
    return PMSIDR_EL1;
              </pstext>
            </ps>
          </access_permission>
      </access_mechanism>
</access_mechanisms>

      <arch_variants>
      </arch_variants>
  </register>
</registers>

    <timestamp>01/07/2020 15:57; 80324f0b9997bede489cc15ad1565345720bcd2a</timestamp>
</register_page>