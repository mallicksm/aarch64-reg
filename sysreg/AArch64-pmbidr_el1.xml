<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE register_page SYSTEM "registers.dtd">
<!-- Copyright (c) 2010-2018 Arm Limited or its affiliates. All rights reserved. -->
<!-- This document is Non-Confidential. This document may only be used and distributed in accordance with the terms of the agreement entered into by Arm and the party that Arm delivered this document to. -->
<?xml-stylesheet href="one_register.xsl" type="text/xsl" ?>






<register_page>
  <registers>
    <register execution_state="AArch64" is_register="True" is_internal="True" is_banked="False" is_stub_entry="False">
      <reg_short_name>PMBIDR_EL1</reg_short_name>
      <reg_long_name>Profiling Buffer ID Register</reg_long_name>
      
        <reg_condition otherwise="UNDEFINED">when FEAT_SPE is implemented</reg_condition>
      

          <reg_reset_value></reg_reset_value>
      <reg_mappings>
      </reg_mappings>
      <reg_purpose>
        
    
      <purpose_text>
        <para>Provides information to software as to whether the buffer can be programmed at the current Exception level.</para>
      </purpose_text>

      </reg_purpose>
      <reg_groups>
          <reg_group>Statistical Profiling Extension registers</reg_group>
      </reg_groups>
      <reg_configuration>
        

      </reg_configuration>
      <reg_attributes>
          <attributes_text>
            <para>PMBIDR_EL1 is a 64-bit register.</para>
          </attributes_text>
      </reg_attributes>
      <reg_fieldsets>
        





  <fields length="64">
    <text_before_fields>
      
  

    </text_before_fields>
    
        <field
           id="0_63_6"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
           rwtype="RES0"
        >
          <field_name>0</field_name>
          <field_msb>63</field_msb>
          <field_lsb>6</field_lsb>
          <field_description order="before">
            <para>Reserved, <arm-defined-word>RES0</arm-defined-word>.</para>
          </field_description>
            <field_values>
            </field_values>
      </field>
        <field
           id="F_5_5"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>F</field_name>
          <field_msb>5</field_msb>
          <field_lsb>5</field_lsb>
          <field_description order="before">
          
  <para>Flag updates. Defines whether the address translation performed by the Profiling Buffer manages the Access Flag and dirty state.</para>

          </field_description>
            <field_values>
                  <field_value_instance>
        <field_value>0b0</field_value>
        <field_value_description>
  <para>Hardware management of the Access Flag and dirty state for accesses made by the Statistical Profiling Extension is always disabled for all translation stages.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b1</field_value>
        <field_value_description>
  <para>Hardware management for the Access Flag and dirty state for accesses made by the Statistical Profiling Extension is controlled in the same way as explicit memory accesses in the owning translation regime.</para>
</field_value_description>
    </field_value_instance>
            </field_values>
          <field_description order="after">
            
  <para>If hardware management of the Access Flag is disabled for a stage of translation, an access to Page or Block with the Access flag bit not set in the descriptor will generate an Access Flag fault.</para>
<para>If hardware management of the dirty state is disabled for a stage of translation, an access to a Page or Block will ignore the Dirty Bit Modifier in the descriptor might generate a Permission fault, depending on the values of the access permission bits in the descriptor.</para>

          </field_description>
          <field_resets>
  
  
</field_resets>
      </field>
        <field
           id="P_4_4"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>P</field_name>
          <field_msb>4</field_msb>
          <field_lsb>4</field_lsb>
          <field_description order="before">
          
  <para>Programming not allowed. The Profiling Buffer is owned by a higher Exception level or the other Security state.</para>

          </field_description>
            <field_values>
                  <field_value_instance>
        <field_value>0b0</field_value>
        <field_value_description>
  <para>Profiling Buffer is owned by the current or a lower Exception level in the current Security state.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b1</field_value>
        <field_value_description>
  <para>Profiling Buffer is owned by a higher Exception level or the other Security state.</para>
</field_value_description>
    </field_value_instance>
            </field_values>
          <field_description order="after">
            
  <para>The value read from this field depends on the current Exception level and the Effective values of <register_link state="AArch64" id="AArch64-mdcr_el3.xml">MDCR_EL3</register_link>.NSPB and <register_link state="AArch64" id="AArch64-mdcr_el2.xml">MDCR_EL2</register_link>.E2PB:</para>
<list type="unordered">
<listitem><content>If EL3 is implemented, and either <register_link state="AArch64" id="AArch64-mdcr_el3.xml">MDCR_EL3</register_link>.NSPB == <binarynumber>0b00</binarynumber> or <register_link state="AArch64" id="AArch64-mdcr_el3.xml">MDCR_EL3</register_link>.NSPB == <binarynumber>0b01</binarynumber>, this bit reads as one from:<list type="unordered">
<listitem><content>Non-secure EL1.</content>
</listitem><listitem><content>Non-secure EL2.</content>
</listitem><listitem><content>If Secure EL2 is implemented and enabled, and <register_link state="AArch64" id="AArch64-mdcr_el2.xml">MDCR_EL2</register_link>.E2PB == <binarynumber>0b00</binarynumber>, Secure EL1.</content>
</listitem></list>
</content>
</listitem><listitem><content>If EL3 is implemented, and either <register_link state="AArch64" id="AArch64-mdcr_el3.xml">MDCR_EL3</register_link>.NSPB == <binarynumber>0b10</binarynumber> or <register_link state="AArch64" id="AArch64-mdcr_el3.xml">MDCR_EL3</register_link>.NSPB == <binarynumber>0b11</binarynumber>, this bit reads as one from:<list type="unordered">
<listitem><content>Secure EL1.</content>
</listitem><listitem><content>If Secure EL2 is implemented, Secure EL2.</content>
</listitem><listitem><content>If EL2 is implemented and <register_link state="AArch64" id="AArch64-mdcr_el2.xml">MDCR_EL2</register_link>.E2PB == <binarynumber>0b00</binarynumber>, Non-secure EL1.</content>
</listitem></list>
</content>
</listitem><listitem><content>If EL3 is not implemented, EL2 is implemented, and <register_link state="AArch64" id="AArch64-mdcr_el2.xml">MDCR_EL2</register_link>.E2PB == <binarynumber>0b00</binarynumber>, this bit reads as one from EL1.</content>
</listitem><listitem><content>Otherwise, this bit reads as zero.</content>
</listitem></list>

          </field_description>
          <field_resets>
  
  
</field_resets>
      </field>
        <field
           id="Align_3_0"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>Align</field_name>
          <field_msb>3</field_msb>
          <field_lsb>0</field_lsb>
          <field_description order="before">
          
  <para>Defines the minimum alignment constraint for <register_link state="AArch64" id="AArch64-pmbptr_el1.xml">PMBPTR_EL1</register_link>. If this field is non-zero, then the PE must pad every record up to a multiple of this size.</para>

          </field_description>
            <field_values>
                  <field_value_instance>
        <field_value>0b0000</field_value>
        <field_value_description>
  <para>Byte</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b0001</field_value>
        <field_value_description>
  <para>Halfword.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b0010</field_value>
        <field_value_description>
  <para>Word.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b0011</field_value>
        <field_value_description>
  <para>Doubleword.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b0100</field_value>
        <field_value_description>
  <para>16 Bytes.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b0101</field_value>
        <field_value_description>
  <para>32 Bytes.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b0110</field_value>
        <field_value_description>
  <para>64 Bytes.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b0111</field_value>
        <field_value_description>
  <para>128 Bytes.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b1000</field_value>
        <field_value_description>
  <para>256 Bytes.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b1001</field_value>
        <field_value_description>
  <para>512 Bytes.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b1010</field_value>
        <field_value_description>
  <para>1KB.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b1011</field_value>
        <field_value_description>
  <para>2KB.</para>
</field_value_description>
    </field_value_instance>
            </field_values>
          <field_description order="after">
            
  <para>For more information, see <xref browsertext="'Restrictions on the current write pointer'" filename="D_the_statistical_profiling_extension.fm" linkend="CHDGCEIB"></xref>.</para>

          </field_description>
          <field_resets>
  
  
</field_resets>
      </field>
    <text_after_fields>
    
  

    </text_after_fields>
  </fields>
  <reg_fieldset length="64">
      
        <fieldat id="0_63_6" msb="63" lsb="6"/>
        <fieldat id="F_5_5" msb="5" lsb="5"/>
        <fieldat id="P_4_4" msb="4" lsb="4"/>
        <fieldat id="Align_3_0" msb="3" lsb="0"/>
    </reg_fieldset>

      </reg_fieldsets>
      


<access_mechanisms>
  


      <access_mechanism accessor="MRS PMBIDR_EL1">
        <encoding>
          
          <access_instruction>MRS &lt;Xt&gt;, PMBIDR_EL1</access_instruction>
            
            <enc n="op0" v="0b11"/>
            
            <enc n="op1" v="0b000"/>
            
            <enc n="CRn" v="0b1001"/>
            
            <enc n="CRm" v="0b1010"/>
            
            <enc n="op2" v="0b111"/>
        </encoding>
          <access_permission>
            <ps name="MRS" sections="1" secttype="access_permission">
              <pstext>
if PSTATE.EL == EL0 then
    UNDEFINED;
elsif PSTATE.EL == EL1 then
    return PMBIDR_EL1;
elsif PSTATE.EL == EL2 then
    return PMBIDR_EL1;
elsif PSTATE.EL == EL3 then
    return PMBIDR_EL1;
              </pstext>
            </ps>
          </access_permission>
      </access_mechanism>
</access_mechanisms>

      <arch_variants>
      </arch_variants>
  </register>
</registers>

    <timestamp>01/07/2020 15:57; 80324f0b9997bede489cc15ad1565345720bcd2a</timestamp>
</register_page>