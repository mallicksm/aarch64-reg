<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE register_page SYSTEM "registers.dtd">
<!-- Copyright (c) 2010-2018 Arm Limited or its affiliates. All rights reserved. -->
<!-- This document is Non-Confidential. This document may only be used and distributed in accordance with the terms of the agreement entered into by Arm and the party that Arm delivered this document to. -->
<?xml-stylesheet href="one_register.xsl" type="text/xsl" ?>






<register_page>
  <registers>
    <register execution_state="AArch64" is_register="True" is_internal="True" is_banked="False" is_stub_entry="False">
      <reg_short_name>ID_AA64ISAR0_EL1</reg_short_name>
      <reg_long_name>AArch64 Instruction Set Attribute Register 0</reg_long_name>
      
      

          <reg_reset_value></reg_reset_value>
      <reg_mappings>
      </reg_mappings>
      <reg_purpose>
        
    
      <purpose_text>
        <para>Provides information about the instructions implemented in AArch64 state.</para>

      </purpose_text>
      <purpose_text>
        <para>For general information about the interpretation of the ID registers, see <xref browsertext="'Principles of the ID scheme for fields in ID registers'" filename="D_aarch64_system_register_descriptions.fm" linkend="BABFAFHI"/>.</para>
      </purpose_text>

      </reg_purpose>
      <reg_groups>
          <reg_group>Identification registers</reg_group>
      </reg_groups>
      <reg_configuration>
        

      </reg_configuration>
      <reg_attributes>
          <attributes_text>
            <para>ID_AA64ISAR0_EL1 is a 64-bit register.</para>
          </attributes_text>
      </reg_attributes>
      <reg_fieldsets>
        





  <fields length="64">
    <text_before_fields>
      
  

    </text_before_fields>
    
        <field
           id="RNDR_63_60"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>RNDR</field_name>
          <field_msb>63</field_msb>
          <field_lsb>60</field_lsb>
          <field_description order="before">
          
  <para>Indicates support for Random Number instructions in AArch64 state. Defined values are:</para>

          </field_description>
            <field_values>
                  <field_value_instance>
        <field_value>0b0000</field_value>
        <field_value_description>
  <para>No Random Number instructions are implemented.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b0001</field_value>
        <field_value_description>
  <para><register_link state="AArch64" id="AArch64-rndr.xml">RNDR</register_link> and <register_link state="AArch64" id="AArch64-rndrrs.xml">RNDRRS</register_link> registers are implemented.</para>
</field_value_description>
    </field_value_instance>
            </field_values>
          <field_description order="after">
            
  <para>All other values are reserved.</para>
<para><xref browsertext="FEAT_RNG" filename="A_armv8_architecture_extensions.fm" linkend="v8.5.RNG"></xref> implements the functionality identified by the value <binarynumber>0b0001</binarynumber>.</para>
<para>From Armv8.5, the permitted values are <binarynumber>0b0000</binarynumber> and <binarynumber>0b0001</binarynumber>.</para>

          </field_description>
          <field_resets>
  
  
</field_resets>
      </field>
        <field
           id="TLB_59_56"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>TLB</field_name>
          <field_msb>59</field_msb>
          <field_lsb>56</field_lsb>
          <field_description order="before">
          
  <para>Indicates support for Outer shareable and TLB range maintenance instructions. Defined values are:</para>

          </field_description>
            <field_values>
                  <field_value_instance>
        <field_value>0b0000</field_value>
        <field_value_description>
  <para>Outer shareable and TLB range maintenance instructions are not implemented.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b0001</field_value>
        <field_value_description>
  <para>Outer shareable TLB maintenance instructions are implemented.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b0010</field_value>
        <field_value_description>
  <para>Outer shareable and TLB range maintenance instructions are implemented.</para>
</field_value_description>
    </field_value_instance>
            </field_values>
          <field_description order="after">
            
  <para>All other values are reserved.</para>
<para><xref browsertext="FEAT_TLBIOS" filename="A_armv8_architecture_extensions.fm" linkend="v8.4.TLBIOS"></xref> implements the functionality identified by the values <binarynumber>0b0001</binarynumber> and <binarynumber>0b0010</binarynumber>.</para>
<para><xref browsertext="FEAT_TLBIRANGE" filename="A_armv8_architecture_extensions.fm" linkend="v8.4.TLBIRANGE"></xref> implements the functionality identified by the value <binarynumber>0b0010</binarynumber>.</para>
<para>From Armv8.4, the only permitted value is <binarynumber>0b0010</binarynumber>.</para>

          </field_description>
          <field_resets>
  
  
</field_resets>
      </field>
        <field
           id="TS_55_52"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>TS</field_name>
          <field_msb>55</field_msb>
          <field_lsb>52</field_lsb>
          <field_description order="before">
          
  <para>Indicates support for flag manipulation instructions. Defined values are:</para>

          </field_description>
            <field_values>
                  <field_value_instance>
        <field_value>0b0000</field_value>
        <field_value_description>
  <para>No flag manipulation instructions are implemented.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b0001</field_value>
        <field_value_description>
  <para>CFINV, RMIF, SETF16, and SETF8 instructions are implemented.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b0010</field_value>
        <field_value_description>
  <para>CFINV, RMIF, SETF16, SETF8, AXFLAG, and XAFLAG instructions are implemented.</para>
</field_value_description>
    </field_value_instance>
            </field_values>
          <field_description order="after">
            
  <para>All other values are reserved.</para>
<para><xref browsertext="FEAT_FlagM" filename="A_armv8_architecture_extensions.fm" linkend="v8.4.FlagM"></xref> implements the functionality identified by the value <binarynumber>0b0001</binarynumber>.</para>
<para><xref browsertext="FEAT_FlagM2" filename="A_armv8_architecture_extensions.fm" linkend="v8.5.CondM"></xref> implements the functionality identified by the value <binarynumber>0b0010</binarynumber>.</para>
<para>In Armv8.2, the permitted values are <binarynumber>0b0000</binarynumber> and <binarynumber>0b0001</binarynumber>.</para>
<para>In Armv8.4, the only permitted value is <binarynumber>0b0001</binarynumber>.</para>
<para>From Armv8.5, the only permitted value is <binarynumber>0b0010</binarynumber>.</para>

          </field_description>
          <field_resets>
  
  
</field_resets>
      </field>
        <field
           id="FHM_51_48"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>FHM</field_name>
          <field_msb>51</field_msb>
          <field_lsb>48</field_lsb>
          <field_description order="before">
          
  <para>Indicates support for FMLAL and FMLSL instructions. Defined values are:</para>

          </field_description>
            <field_values>
                  <field_value_instance>
        <field_value>0b0000</field_value>
        <field_value_description>
  <para>FMLAL and FMLSL instructions are not implemented.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b0001</field_value>
        <field_value_description>
  <para>FMLAL and FMLSL instructions are implemented.</para>
</field_value_description>
    </field_value_instance>
            </field_values>
          <field_description order="after">
            
  <para>All other values are reserved.</para>
<para><xref browsertext="FEAT_FHM" filename="A_armv8_architecture_extensions.fm" linkend="v8.2.FHM"></xref> implements the functionality identified by the value <binarynumber>0b0001</binarynumber>.</para>
<para>From Armv8.2, the permitted values are <binarynumber>0b0000</binarynumber> and <binarynumber>0b0001</binarynumber>.</para>

          </field_description>
          <field_resets>
  
  
</field_resets>
      </field>
        <field
           id="DP_47_44"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>DP</field_name>
          <field_msb>47</field_msb>
          <field_lsb>44</field_lsb>
          <field_description order="before">
          
  <para>Indicates support for Dot Product instructions in AArch64 state. Defined values are:</para>

          </field_description>
            <field_values>
                  <field_value_instance>
        <field_value>0b0000</field_value>
        <field_value_description>
  <para>No Dot Product instructions implemented.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b0001</field_value>
        <field_value_description>
  <para>UDOT and SDOT instructions implemented.</para>
</field_value_description>
    </field_value_instance>
            </field_values>
          <field_description order="after">
            
  <para>All other values are reserved.</para>
<para><xref browsertext="FEAT_DotProd" filename="A_armv8_architecture_extensions.fm" linkend="v8.2.DotProd"></xref> implements the functionality identified by the value <binarynumber>0b0001</binarynumber>.</para>
<para>From Armv8.2, the permitted values are <binarynumber>0b0000</binarynumber> and <binarynumber>0b0001</binarynumber>.</para>

          </field_description>
          <field_resets>
  
  
</field_resets>
      </field>
        <field
           id="SM4_43_40"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>SM4</field_name>
          <field_msb>43</field_msb>
          <field_lsb>40</field_lsb>
          <field_description order="before">
          
  <para>Indicates support for SM4 instructions in AArch64 state. Defined values are:</para>

          </field_description>
            <field_values>
                  <field_value_instance>
        <field_value>0b0000</field_value>
        <field_value_description>
  <para>No SM4 instructions implemented.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b0001</field_value>
        <field_value_description>
  <para>SM4E and SM4EKEY instructions implemented.</para>
</field_value_description>
    </field_value_instance>
            </field_values>
          <field_description order="after">
            
  <para>All other values are reserved.</para>
<para>If <xref browsertext="FEAT_SM4" filename="A_armv8_architecture_extensions.fm" linkend="v8.2.SM4"></xref> is not implemented, the value <binarynumber>0b0001</binarynumber> is reserved.</para>
<para>From Armv8.2, the permitted values are <binarynumber>0b0000</binarynumber> and <binarynumber>0b0001</binarynumber>.</para>
<para>This field must have the same value as ID_AA64ISAR0_EL1.SM3.</para>

          </field_description>
          <field_resets>
  
  
</field_resets>
      </field>
        <field
           id="SM3_39_36"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>SM3</field_name>
          <field_msb>39</field_msb>
          <field_lsb>36</field_lsb>
          <field_description order="before">
          
  <para>Indicates support for SM3 instructions in AArch64 state. Defined values are:</para>

          </field_description>
            <field_values>
                  <field_value_instance>
        <field_value>0b0000</field_value>
        <field_value_description>
  <para>No SM3 instructions implemented.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b0001</field_value>
        <field_value_description>
  <para>SM3SS1, SM3TT1A, SM3TT1B, SM3TT2A, SM3TT2B, SM3PARTW1, and SM3PARTW2 instructions implemented.</para>
</field_value_description>
    </field_value_instance>
            </field_values>
          <field_description order="after">
            
  <para>All other values are reserved.</para>
<para>If <xref browsertext="FEAT_SM3" filename="A_armv8_architecture_extensions.fm" linkend="v8.2.SM3"></xref> is not implemented, the value <binarynumber>0b0001</binarynumber> is reserved.</para>
<para><xref browsertext="FEAT_SM3" filename="A_armv8_architecture_extensions.fm" linkend="v8.2.SM3"></xref> implements the functionality identified by the value <binarynumber>0b0001</binarynumber>.</para>
<para>From Armv8.2, the permitted values are <binarynumber>0b0000</binarynumber> and <binarynumber>0b0001</binarynumber>.</para>
<para>This field must have the same value as ID_AA64ISAR0_EL1.SM4.</para>

          </field_description>
          <field_resets>
  
  
</field_resets>
      </field>
        <field
           id="SHA3_35_32"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>SHA3</field_name>
          <field_msb>35</field_msb>
          <field_lsb>32</field_lsb>
          <field_description order="before">
          
  <para>Indicates support for SHA3 instructions in AArch64 state. Defined values are:</para>

          </field_description>
            <field_values>
                  <field_value_instance>
        <field_value>0b0000</field_value>
        <field_value_description>
  <para>No SHA3 instructions implemented.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b0001</field_value>
        <field_value_description>
  <para>EOR3, RAX1, XAR, and BCAX instructions implemented.</para>
</field_value_description>
    </field_value_instance>
            </field_values>
          <field_description order="after">
            
  <para>All other values are reserved.</para>
<para>If <xref browsertext="FEAT_SHA3" filename="A_armv8_architecture_extensions.fm" linkend="v8.2.SHA3"></xref> is not implemented, the value <binarynumber>0b0001</binarynumber> is reserved.</para>
<para><xref browsertext="FEAT_SHA3" filename="A_armv8_architecture_extensions.fm" linkend="v8.2.SHA3"></xref> implements the functionality identified by the value <binarynumber>0b0001</binarynumber>.</para>
<para>From Armv8.2, the permitted values are <binarynumber>0b0000</binarynumber> and <binarynumber>0b0001</binarynumber>.</para>
<para>If the value of ID_AA64ISAR0_EL1.SHA1 is <binarynumber>0b0000</binarynumber>, this field must have the value <binarynumber>0b0000</binarynumber>.</para>
<para>If the value of this field is <binarynumber>0b0001</binarynumber>, ID_AA64ISAR0_EL1.SHA2 must have the value <binarynumber>0b0010</binarynumber>.</para>

          </field_description>
          <field_resets>
  
  
</field_resets>
      </field>
        <field
           id="RDM_31_28"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>RDM</field_name>
          <field_msb>31</field_msb>
          <field_lsb>28</field_lsb>
          <field_description order="before">
          
  <para>Indicates support for SQRDMLAH and SQRDMLSH instructions in AArch64 state. Defined values are:</para>

          </field_description>
            <field_values>
                  <field_value_instance>
        <field_value>0b0000</field_value>
        <field_value_description>
  <para>No RDMA instructions implemented.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b0001</field_value>
        <field_value_description>
  <para>SQRDMLAH and SQRDMLSH instructions implemented.</para>
</field_value_description>
    </field_value_instance>
            </field_values>
          <field_description order="after">
            
  <para>All other values are reserved.</para>
<para><xref browsertext="FEAT_RDM" filename="A_armv8_architecture_extensions.fm" linkend="v8.1.RDMA"></xref> implements the functionality identified by the value <binarynumber>0b0001</binarynumber>.</para>
<para>From Armv8.1, the only permitted value is <binarynumber>0b0001</binarynumber>.</para>

          </field_description>
          <field_resets>
  
  
</field_resets>
      </field>
        <field
           id="0_27_24"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
           rwtype="RES0"
        >
          <field_name>0</field_name>
          <field_msb>27</field_msb>
          <field_lsb>24</field_lsb>
          <field_description order="before">
            <para>Reserved, <arm-defined-word>RES0</arm-defined-word>.</para>
          </field_description>
            <field_values>
            </field_values>
      </field>
        <field
           id="Atomic_23_20"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>Atomic</field_name>
          <field_msb>23</field_msb>
          <field_lsb>20</field_lsb>
          <field_description order="before">
          
  <para>Indicates support for Atomic instructions in AArch64 state. Defined values are:</para>

          </field_description>
            <field_values>
                  <field_value_instance>
        <field_value>0b0000</field_value>
        <field_value_description>
  <para>No Atomic instructions implemented.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b0010</field_value>
        <field_value_description>
  <para>LDADD, LDCLR, LDEOR, LDSET, LDSMAX, LDSMIN, LDUMAX, LDUMIN, CAS, CASP, and SWP instructions implemented.</para>
</field_value_description>
    </field_value_instance>
            </field_values>
          <field_description order="after">
            
  <para>All other values are reserved.</para>
<para><xref browsertext="FEAT_LSE" filename="A_armv8_architecture_extensions.fm" linkend="v8.1.Atomics"></xref> implements the functionality identified by the value <binarynumber>0b0010</binarynumber>.</para>
<para>From Armv8.1, the only permitted value is <binarynumber>0b0010</binarynumber>.</para>

          </field_description>
          <field_resets>
  
  
</field_resets>
      </field>
        <field
           id="CRC32_19_16"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>CRC32</field_name>
          <field_msb>19</field_msb>
          <field_lsb>16</field_lsb>
          <field_description order="before">
          
  <para>Indicates support for CRC32 instructions in AArch64 state. Defined values are:</para>

          </field_description>
            <field_values>
                  <field_value_instance>
        <field_value>0b0000</field_value>
        <field_value_description>
  <para>No CRC32 instructions implemented.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b0001</field_value>
        <field_value_description>
  <para>CRC32B, CRC32H, CRC32W, CRC32X, CRC32CB, CRC32CH, CRC32CW, and CRC32CX instructions implemented.</para>
</field_value_description>
    </field_value_instance>
            </field_values>
          <field_description order="after">
            
  <para>All other values are reserved.</para>
<para>In Armv8.0, the permitted values are <binarynumber>0b0000</binarynumber> and <binarynumber>0b0001</binarynumber>.</para>
<para>From Armv8.1, the only permitted value is <binarynumber>0b0001</binarynumber>.</para>

          </field_description>
          <field_resets>
  
  
</field_resets>
      </field>
        <field
           id="SHA2_15_12"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>SHA2</field_name>
          <field_msb>15</field_msb>
          <field_lsb>12</field_lsb>
          <field_description order="before">
          
  <para>Indicates support for SHA2 instructions in AArch64 state. Defined values are:</para>

          </field_description>
            <field_values>
                  <field_value_instance>
        <field_value>0b0000</field_value>
        <field_value_description>
  <para>No SHA2 instructions implemented.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b0001</field_value>
        <field_value_description>
  <para>Implements instructions: SHA256H, SHA256H2, SHA256SU0, and SHA256SU1.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b0010</field_value>
        <field_value_description>
  <para>Implements instructions:</para>
<list type="unordered">
<listitem><content>
<para>SHA256H, SHA256H2, SHA256SU0, and SHA256SU1.</para>
</content>
</listitem><listitem><content>
<para>SHA512H, SHA512H2, SHA512SU0, and SHA512SU1.</para>
</content>
</listitem></list>
</field_value_description>
    </field_value_instance>
            </field_values>
          <field_description order="after">
            
  <para>All other values are reserved.</para>
<para><xref browsertext="FEAT_SHA256" filename="A_armv8_architecture_extensions.fm" linkend="v8.0.SHA256"></xref> implements the functionality identified by the value <binarynumber>0b0001</binarynumber>.</para>
<para><xref browsertext="FEAT_SHA512" filename="A_armv8_architecture_extensions.fm" linkend="v8.2.SHA512"></xref> implements the functionality identified by the value <binarynumber>0b0010</binarynumber>.</para>
<para>In Armv8, the permitted values are <binarynumber>0b0000</binarynumber> and <binarynumber>0b0001</binarynumber>.</para>
<para>From Armv8.2, the permitted values are <binarynumber>0b0000</binarynumber>, <binarynumber>0b0001</binarynumber>, and <binarynumber>0b0010</binarynumber>.</para>
<para>If the value of ID_AA64ISAR0_EL1.SHA1 is <binarynumber>0b0000</binarynumber>, this field must have the value <binarynumber>0b0000</binarynumber>.</para>
<para>If the value of this field is <binarynumber>0b0010</binarynumber>, ID_AA64ISAR0_EL1.SHA3 must have the value <binarynumber>0b0001</binarynumber>.</para>

          </field_description>
          <field_resets>
  
  
</field_resets>
      </field>
        <field
           id="SHA1_11_8"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>SHA1</field_name>
          <field_msb>11</field_msb>
          <field_lsb>8</field_lsb>
          <field_description order="before">
          
  <para>Indicates support for SHA1 instructions in AArch64 state. Defined values are:</para>

          </field_description>
            <field_values>
                  <field_value_instance>
        <field_value>0b0000</field_value>
        <field_value_description>
  <para>No SHA1 instructions implemented.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b0001</field_value>
        <field_value_description>
  <para>SHA1C, SHA1P, SHA1M, SHA1H, SHA1SU0, and SHA1SU1 instructions implemented.</para>
</field_value_description>
    </field_value_instance>
            </field_values>
          <field_description order="after">
            
  <para>All other values are reserved.</para>
<para><xref browsertext="FEAT_SHA1" filename="A_armv8_architecture_extensions.fm" linkend="v8.0.SHA"></xref> implements the functionality identified by the value <binarynumber>0b0001</binarynumber>.</para>
<para>From Armv8, the permitted values are <binarynumber>0b0000</binarynumber> and <binarynumber>0b0001</binarynumber>.</para>
<para>If the value of ID_AA64ISAR0_EL1.SHA2 is <binarynumber>0b0000</binarynumber>, this field must have the value <binarynumber>0b0000</binarynumber>.</para>

          </field_description>
          <field_resets>
  
  
</field_resets>
      </field>
        <field
           id="AES_7_4"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>AES</field_name>
          <field_msb>7</field_msb>
          <field_lsb>4</field_lsb>
          <field_description order="before">
          
  <para>Indicates support for AES instructions in AArch64 state. Defined values are:</para>

          </field_description>
            <field_values>
                  <field_value_instance>
        <field_value>0b0000</field_value>
        <field_value_description>
  <para>No AES instructions implemented.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b0001</field_value>
        <field_value_description>
  <para>AESE, AESD, AESMC, and AESIMC instructions implemented.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b0010</field_value>
        <field_value_description>
  <para>As for <binarynumber>0b0001</binarynumber>, plus PMULL/PMULL2 instructions operating on 64-bit data quantities.</para>
</field_value_description>
    </field_value_instance>
            </field_values>
          <field_description order="after">
            
  <para>All other values are reserved.</para>
<para>From Armv8, the permitted values are <binarynumber>0b0000</binarynumber> and <binarynumber>0b0010</binarynumber>.</para>

          </field_description>
          <field_resets>
  
  
</field_resets>
      </field>
        <field
           id="0_3_0"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
           rwtype="RES0"
        >
          <field_name>0</field_name>
          <field_msb>3</field_msb>
          <field_lsb>0</field_lsb>
          <field_description order="before">
            <para>Reserved, <arm-defined-word>RES0</arm-defined-word>.</para>
          </field_description>
            <field_values>
            </field_values>
      </field>
    <text_after_fields>
    
  

    </text_after_fields>
  </fields>
  <reg_fieldset length="64">
      
        <fieldat id="RNDR_63_60" msb="63" lsb="60"/>
        <fieldat id="TLB_59_56" msb="59" lsb="56"/>
        <fieldat id="TS_55_52" msb="55" lsb="52"/>
        <fieldat id="FHM_51_48" msb="51" lsb="48"/>
        <fieldat id="DP_47_44" msb="47" lsb="44"/>
        <fieldat id="SM4_43_40" msb="43" lsb="40"/>
        <fieldat id="SM3_39_36" msb="39" lsb="36"/>
        <fieldat id="SHA3_35_32" msb="35" lsb="32"/>
        <fieldat id="RDM_31_28" msb="31" lsb="28"/>
        <fieldat id="0_27_24" msb="27" lsb="24"/>
        <fieldat id="Atomic_23_20" msb="23" lsb="20"/>
        <fieldat id="CRC32_19_16" msb="19" lsb="16"/>
        <fieldat id="SHA2_15_12" msb="15" lsb="12"/>
        <fieldat id="SHA1_11_8" msb="11" lsb="8"/>
        <fieldat id="AES_7_4" msb="7" lsb="4"/>
        <fieldat id="0_3_0" msb="3" lsb="0"/>
    </reg_fieldset>

      </reg_fieldsets>
      


<access_mechanisms>
  


      <access_mechanism accessor="MRS ID_AA64ISAR0_EL1">
        <encoding>
          
          <access_instruction>MRS &lt;Xt&gt;, ID_AA64ISAR0_EL1</access_instruction>
            
            <enc n="op0" v="0b11"/>
            
            <enc n="op1" v="0b000"/>
            
            <enc n="CRn" v="0b0000"/>
            
            <enc n="CRm" v="0b0110"/>
            
            <enc n="op2" v="0b000"/>
        </encoding>
          <access_permission>
            <ps name="MRS" sections="1" secttype="access_permission">
              <pstext>
if PSTATE.EL == EL0 then
    if IsFeatureImplemented("FEAT_IDST") then
        if EL2Enabled() &amp;&amp; HCR_EL2.TGE == '1' then
            AArch64.SystemAccessTrap(EL2, 0x18);
        else
            AArch64.SystemAccessTrap(EL1, 0x18);
    else
        UNDEFINED;
elsif PSTATE.EL == EL1 then
    if EL2Enabled() &amp;&amp; HCR_EL2.TID3 == '1' then
        AArch64.SystemAccessTrap(EL2, 0x18);
    else
        return ID_AA64ISAR0_EL1;
elsif PSTATE.EL == EL2 then
    return ID_AA64ISAR0_EL1;
elsif PSTATE.EL == EL3 then
    return ID_AA64ISAR0_EL1;
              </pstext>
            </ps>
          </access_permission>
      </access_mechanism>
</access_mechanisms>

      <arch_variants>
      </arch_variants>
  </register>
</registers>

    <timestamp>01/07/2020 15:57; 80324f0b9997bede489cc15ad1565345720bcd2a</timestamp>
</register_page>