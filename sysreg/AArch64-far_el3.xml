<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE register_page SYSTEM "registers.dtd">
<!-- Copyright (c) 2010-2018 Arm Limited or its affiliates. All rights reserved. -->
<!-- This document is Non-Confidential. This document may only be used and distributed in accordance with the terms of the agreement entered into by Arm and the party that Arm delivered this document to. -->
<?xml-stylesheet href="one_register.xsl" type="text/xsl" ?>






<register_page>
  <registers>
    <register execution_state="AArch64" is_register="True" is_internal="True" is_banked="False" is_stub_entry="False">
      <reg_short_name>FAR_EL3</reg_short_name>
      <reg_long_name>Fault Address Register (EL3)</reg_long_name>
      
        <reg_condition otherwise="UNDEFINED">when EL3 is implemented</reg_condition>
      

          <reg_reset_value></reg_reset_value>
      <reg_mappings>
      </reg_mappings>
      <reg_purpose>
        
    
      <purpose_text>
        <para>Holds the faulting Virtual Address for all synchronous Instruction or Data Abort and PC alignment fault exceptions that are taken to EL3.</para>
      </purpose_text>

      </reg_purpose>
      <reg_groups>
            <reg_group>Exception and fault handling registers</reg_group>
      </reg_groups>
      <reg_configuration>
        

      </reg_configuration>
      <reg_attributes>
          <attributes_text>
            <para>FAR_EL3 is a 64-bit register.</para>
          </attributes_text>
      </reg_attributes>
      <reg_fieldsets>
        





  <fields length="64">
    <text_before_fields>
      
  

    </text_before_fields>
    
        <field
           id="None_63_0"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
           <field_shortdesc>Faulting Virtual Address for synchronous exceptions taken to EL3</field_shortdesc>
          <field_msb>63</field_msb>
          <field_lsb>0</field_lsb>
          <field_description order="before">
          
  <para>Faulting Virtual Address for synchronous exceptions taken to EL3. Exceptions that set the FAR_EL3 are Instruction Aborts (EC <hexnumber>0x20</hexnumber> or <hexnumber>0x21</hexnumber>), Data Aborts (EC <hexnumber>0x24</hexnumber> or <hexnumber>0x25</hexnumber>), and PC alignment faults (EC <hexnumber>0x22</hexnumber>).  <register_link state="AArch64" id="AArch64-esr_el3.xml">ESR_EL3</register_link>.EC holds the EC value for the exception.</para>
<para>For a synchronous External abort, if the VA that generated the abort was from an address range for which <xref browsertext="TCR_ELx" filename="appx_registers_index.fm" linkend="BABBJGEA"></xref>.TBI{&lt;0|1&gt;} == 1 for the translation regime in use when the abort was generated, then the top eight bits of FAR_EL3 are <arm-defined-word>UNKNOWN</arm-defined-word>.</para>
<para>For a synchronous External abort other than a synchronous External abort on a translation table walk, this field is valid only if <register_link state="AArch64" id="AArch64-esr_el3.xml">ESR_EL3</register_link>.FnV is 0, and the FAR_EL3 is <arm-defined-word>UNKNOWN</arm-defined-word> if <register_link state="AArch64" id="AArch64-esr_el3.xml">ESR_EL3</register_link>.FnV is 1.</para>
<para>For all other exceptions taken to EL3, the FAR_EL3 is <arm-defined-word>UNKNOWN</arm-defined-word>.</para>
<para>If a memory fault that sets FAR_EL3, other than a Tag Check Fault, is generated from a data cache maintenance or other DC instruction, this field holds the address specified in the register argument of the instruction.</para>
<para>On an exception due to a Tag Check Fault caused by a data cache maintenance or other DC instruction, the address held in FAR_EL3 is <arm-defined-word>IMPLEMENTATION DEFINED</arm-defined-word> as one of the following:</para>
<list type="unordered">
<listitem><content>The lowest address that gave rise to the fault.</content>
</listitem><listitem><content>The address specified in the register argument of the instruction as generated by MMU faults caused by <register_link id="AArch64-dc-zva.xml" state="AArch64">DC ZVA</register_link>.</content>
</listitem></list>
<para>If the exception that updates FAR_EL3 is taken from an Exception Level using AArch32, the top 32 bits are all zero, unless both of the following apply, in which case the top 32 bits of FAR_ELx are <hexnumber>0x00000001</hexnumber>:</para>
<list type="unordered">
<listitem><content>The faulting address was generated by a load or store instruction that sequentially incremented from address <hexnumber>0xFFFFFFFF</hexnumber>. Such a load or store instruction is <arm-defined-word>CONSTRAINED UNPREDICTABLE</arm-defined-word>.</content>
</listitem><listitem><content>The implementation treats such incrementing as setting bit[32] of the virtual address to 1.</content>
</listitem></list>
<para>For a Data Abort or Watchpoint exception, if address tagging is enabled for the address accessed by the data access that caused the exception, then this field includes the tag. For more information about address tagging, see <xref browsertext="'Address tagging in AArch64 state'" filename="D_the_aarch64_virtual_memory_system_architecture.fm" linkend="CHDFCGEC"></xref>.</para>
<para>For a synchronous Tag Check Fault abort, bits[63:60] are <arm-defined-word>UNKNOWN</arm-defined-word>.</para>
<para>Execution at EL2, EL1 or EL0 makes FAR_EL3 become <arm-defined-word>UNKNOWN</arm-defined-word>.</para>
<note><para>The address held in this register is an address accessed by the instruction fetch or data access that caused the exception that actually gave rise to the instruction or data abort. It is the lowest address that gave rise to the fault. Where different faults from different addresses arise from the same instruction, such as for an instruction that loads or stores a mis-aligned address that crosses a page boundary, the architecture does not prioritize between those different faults.</para></note><para>FAR_EL3 is made <arm-defined-word>UNKNOWN</arm-defined-word> on an exception return from EL3.</para>

          </field_description>
            <field_values>
            </field_values>
          <field_description order="after">
            
  

          </field_description>
          <field_resets>
  
  
    
    
        <field_reset>
          
      <field_reset_standard_text>AU</field_reset_standard_text>
  
        </field_reset>
  
</field_resets>
      </field>
    <text_after_fields>
    
  

    </text_after_fields>
  </fields>
  <reg_fieldset length="64">
      
        <fieldat id="None_63_0" msb="63" lsb="0"/>
    </reg_fieldset>

      </reg_fieldsets>
      


<access_mechanisms>
  


      <access_mechanism accessor="MRS FAR_EL3">
        <encoding>
          
          <access_instruction>MRS &lt;Xt&gt;, FAR_EL3</access_instruction>
            
            <enc n="op0" v="0b11"/>
            
            <enc n="op1" v="0b110"/>
            
            <enc n="CRn" v="0b0110"/>
            
            <enc n="CRm" v="0b0000"/>
            
            <enc n="op2" v="0b000"/>
        </encoding>
          <access_permission>
            <ps name="MRS" sections="1" secttype="access_permission">
              <pstext>
if PSTATE.EL == EL0 then
    UNDEFINED;
elsif PSTATE.EL == EL1 then
    UNDEFINED;
elsif PSTATE.EL == EL2 then
    UNDEFINED;
elsif PSTATE.EL == EL3 then
    return FAR_EL3;
              </pstext>
            </ps>
          </access_permission>
      </access_mechanism>
      <access_mechanism accessor="MSRregister FAR_EL3">
        <encoding>
          
          <access_instruction>MSR FAR_EL3, &lt;Xt&gt;</access_instruction>
            
            <enc n="op0" v="0b11"/>
            
            <enc n="op1" v="0b110"/>
            
            <enc n="CRn" v="0b0110"/>
            
            <enc n="CRm" v="0b0000"/>
            
            <enc n="op2" v="0b000"/>
        </encoding>
          <access_permission>
            <ps name="MSRregister" sections="1" secttype="access_permission">
              <pstext>
if PSTATE.EL == EL0 then
    UNDEFINED;
elsif PSTATE.EL == EL1 then
    UNDEFINED;
elsif PSTATE.EL == EL2 then
    UNDEFINED;
elsif PSTATE.EL == EL3 then
    FAR_EL3 = X[t];
              </pstext>
            </ps>
          </access_permission>
      </access_mechanism>
</access_mechanisms>

      <arch_variants>
      </arch_variants>
  </register>
</registers>

    <timestamp>01/07/2020 15:57; 80324f0b9997bede489cc15ad1565345720bcd2a</timestamp>
</register_page>