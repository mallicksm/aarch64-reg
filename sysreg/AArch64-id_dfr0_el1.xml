<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE register_page SYSTEM "registers.dtd">
<!-- Copyright (c) 2010-2018 Arm Limited or its affiliates. All rights reserved. -->
<!-- This document is Non-Confidential. This document may only be used and distributed in accordance with the terms of the agreement entered into by Arm and the party that Arm delivered this document to. -->
<?xml-stylesheet href="one_register.xsl" type="text/xsl" ?>






<register_page>
  <registers>
    <register execution_state="AArch64" is_register="True" is_internal="True" is_banked="False" is_stub_entry="False">
      <reg_short_name>ID_DFR0_EL1</reg_short_name>
      <reg_long_name>AArch32 Debug Feature Register 0</reg_long_name>
      
      

          <reg_reset_value></reg_reset_value>
      <reg_mappings>
          <reg_mapping>
              
            <mapped_name filename="AArch32-id_dfr0.xml">ID_DFR0</mapped_name>
            <mapped_type>Architectural</mapped_type>
              <mapped_execution_state>AArch32</mapped_execution_state>
              <mapped_from_startbit>31</mapped_from_startbit>
              <mapped_from_endbit>0</mapped_from_endbit>

              <mapped_to_startbit>31</mapped_to_startbit>
              <mapped_to_endbit>0</mapped_to_endbit>

          </reg_mapping>
      </reg_mappings>
      <reg_purpose>
        
    
      <purpose_text>
        <para>Provides top level information about the debug system in AArch32 state.</para>

      </purpose_text>
      <purpose_text>
        <para>Must be interpreted with the Main ID Register, <register_link state="AArch64" id="AArch64-midr_el1.xml">MIDR_EL1</register_link>.</para>

      </purpose_text>
      <purpose_text>
        <para>For general information about the interpretation of the ID registers see <xref browsertext="'Principles of the ID scheme for fields in ID registers'" filename="D_aarch64_system_register_descriptions.fm" linkend="BABFAFHI"/>.</para>
      </purpose_text>

      </reg_purpose>
      <reg_groups>
          <reg_group>Identification registers</reg_group>
      </reg_groups>
      <reg_configuration>
        

      </reg_configuration>
      <reg_attributes>
          <attributes_text>
            <para>ID_DFR0_EL1 is a 64-bit register.</para>
          </attributes_text>
      </reg_attributes>
      <reg_fieldsets>
        





  <fields length="64">
      <fields_condition>When AArch32 is supported at any Exception level</fields_condition>
    <text_before_fields>
      
  

    </text_before_fields>
    
        <field
           id="0_63_32"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
           rwtype="RES0"
        >
          <field_name>0</field_name>
          <field_msb>63</field_msb>
          <field_lsb>32</field_lsb>
          <field_description order="before">
            <para>Reserved, <arm-defined-word>RES0</arm-defined-word>.</para>
          </field_description>
            <field_values>
            </field_values>
      </field>
        <field
           id="TraceFilt_31_28"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>TraceFilt</field_name>
          <field_msb>31</field_msb>
          <field_lsb>28</field_lsb>
          <field_description order="before">
          
  <para>Armv8.4 Self-hosted Trace Extension version. Defined values are:</para>

          </field_description>
            <field_values>
                  <field_value_instance>
        <field_value>0b0000</field_value>
        <field_value_description>
  <para>Armv8.4 Self-hosted Trace Extension not implemented.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b0001</field_value>
        <field_value_description>
  <para>Armv8.4 Self-hosted Trace Extension implemented.</para>
</field_value_description>
    </field_value_instance>
            </field_values>
          <field_description order="after">
            
  <para>All other values are reserved.</para>
<para><xref browsertext="FEAT_TRF" filename="A_armv8_architecture_extensions.fm" linkend="v8.4.Trace"></xref> implements the functionality added by the value <binarynumber>0b0001</binarynumber>.</para>
<para>From Armv8.3, the permitted values are <binarynumber>0b0000</binarynumber> and <binarynumber>0b0001</binarynumber>.</para>

          </field_description>
          <field_resets>
  
  
</field_resets>
      </field>
        <field
           id="PerfMon_27_24"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>PerfMon</field_name>
          <field_msb>27</field_msb>
          <field_lsb>24</field_lsb>
          <field_description order="before">
          
  <para>Performance Monitors Extension version.</para>
<para>This field does not follow the standard ID scheme, but uses the alternative ID scheme described in <xref browsertext="'Alternative ID scheme used for the Performance Monitors Extension version'" filename="D_aarch64_system_register_descriptions.fm" linkend="BABDFEID"></xref></para>
<para>Defined values are:</para>

          </field_description>
            <field_values>
                  <field_value_instance>
        <field_value>0b0000</field_value>
        <field_value_description>
  <para>Performance Monitors Extension not implemented.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b0001</field_value>
        <field_value_description>
  <para>Performance Monitors Extension, PMUv1 implemented.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b0010</field_value>
        <field_value_description>
  <para>Performance Monitors Extension, PMUv2 implemented.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b0011</field_value>
        <field_value_description>
  <para>Performance Monitors Extension, PMUv3 implemented.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b0100</field_value>
        <field_value_description>
  <para>PMUv3 for Armv8.1. As <binarynumber>0b0011</binarynumber>, and also includes support for:</para>
<list type="unordered">
<listitem><content>Extended 16-bit <register_link state="AArch32" id="AArch32-pmevtypern.xml">PMEVTYPER&lt;n&gt;</register_link>.evtCount field.</content>
</listitem><listitem><content>If EL2 is implemented, the <register_link state="AArch32" id="AArch32-hdcr.xml">HDCR</register_link>.HPMD control bit.</content>
</listitem></list>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b0101</field_value>
        <field_value_description>
  <para>PMUv3 for Armv8.4. As <binarynumber>0b0100</binarynumber>, and also includes support for the <register_link state="AArch32" id="AArch32-pmmir.xml">PMMIR</register_link> register.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b0110</field_value>
        <field_value_description>
  <para>PMUv3 for Armv8.5. As <binarynumber>0b0101</binarynumber>, and also includes support for:</para>
<list type="unordered">
<listitem><content>64-bit event counters.</content>
</listitem><listitem><content>If EL2 is implemented, the <register_link state="AArch32" id="AArch32-hdcr.xml">HDCR</register_link>.HCCD control bit.</content>
</listitem><listitem><content>If EL3 is implemented, the <register_link state="AArch64" id="AArch64-mdcr_el3.xml">MDCR_EL3</register_link>.SCCD control bit.</content>
</listitem></list>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b1111</field_value>
        <field_value_description>
  <para><arm-defined-word>IMPLEMENTATION DEFINED</arm-defined-word> form of performance monitors supported, PMUv3 not supported. Arm does not recommend this value for new implementations.</para>
</field_value_description>
    </field_value_instance>
            </field_values>
          <field_description order="after">
            
  <para>All other values are reserved.</para>
<para>FEAT_PMUv3 implements the functionality identified by the value <binarynumber>0b0011</binarynumber>.</para>
<para><xref browsertext="FEAT_PMUv3p1" filename="A_armv8_architecture_extensions.fm" linkend="v8.1.PMU"></xref> implements the functionality identified by the value <binarynumber>0b0100</binarynumber>.</para>
<para><xref browsertext="FEAT_PMUv3p4" filename="A_armv8_architecture_extensions.fm" linkend="v8.4.PMU"></xref> implements the functionality identified by the value <binarynumber>0b0101</binarynumber>.</para>
<para>FEAT_PMUv3p5 implements the functionality identified by the value <binarynumber>0b0110</binarynumber>.</para>
<para>In any Armv8 implementation, the values <binarynumber>0b0001</binarynumber> and <binarynumber>0b0010</binarynumber> are not permitted.</para>
<para>From Armv8.1, if FEAT_PMUv3 is implemented, the value <binarynumber>0b0011</binarynumber> is not permitted.</para>
<para>From Armv8.4, if FEAT_PMUv3 is implemented, the value <binarynumber>0b0100</binarynumber> is not permitted.</para>
<para>From Armv8.5, if FEAT_PMUv3 is implemented, the value <binarynumber>0b0101</binarynumber> is not permitted.</para>
<note><para>In Armv7, the value <binarynumber>0b0000</binarynumber> can mean that PMUv1 is implemented. PMUv1 is not permitted in an Armv8 implementation.</para></note>

          </field_description>
          <field_resets>
  
  
</field_resets>
      </field>
        <field
           id="MProfDbg_23_20"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>MProfDbg</field_name>
          <field_msb>23</field_msb>
          <field_lsb>20</field_lsb>
          <field_description order="before">
          
  <para>M Profile Debug. Support for memory-mapped debug model for M profile processors. Defined values are:</para>

          </field_description>
            <field_values>
                  <field_value_instance>
        <field_value>0b0000</field_value>
        <field_value_description>
  <para>Not supported.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b0001</field_value>
        <field_value_description>
  <para>Support for M profile Debug architecture, with memory-mapped access.</para>
</field_value_description>
    </field_value_instance>
            </field_values>
          <field_description order="after">
            
  <para>All other values are reserved.</para>
<para>In Armv8-A, the only permitted value is <binarynumber>0b0000</binarynumber>.</para>

          </field_description>
          <field_resets>
  
  
</field_resets>
      </field>
        <field
           id="MMapTrc_19_16"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>MMapTrc</field_name>
          <field_msb>19</field_msb>
          <field_lsb>16</field_lsb>
          <field_description order="before">
          
  <para>Memory Mapped Trace. Support for memory-mapped trace model. Defined values are:</para>

          </field_description>
            <field_values>
                  <field_value_instance>
        <field_value>0b0000</field_value>
        <field_value_description>
  <para>Not supported.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b0001</field_value>
        <field_value_description>
  <para>Support for Arm trace architecture, with memory-mapped access.</para>
</field_value_description>
    </field_value_instance>
            </field_values>
          <field_description order="after">
            
  <para>All other values are reserved.</para>
<para>In Armv8-A, the permitted values are <binarynumber>0b0000</binarynumber> and <binarynumber>0b0001</binarynumber>.</para>
<para>See the ETM Architecture Specification for more information.</para>

          </field_description>
          <field_resets>
  
  
</field_resets>
      </field>
        <field
           id="CopTrc_15_12"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>CopTrc</field_name>
          <field_msb>15</field_msb>
          <field_lsb>12</field_lsb>
          <field_description order="before">
          
  <para>Support for System registers-based trace model, using registers in the coproc == <binarynumber>0b1110</binarynumber> encoding space. Defined values are:</para>

          </field_description>
            <field_values>
                  <field_value_instance>
        <field_value>0b0000</field_value>
        <field_value_description>
  <para>Not supported.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b0001</field_value>
        <field_value_description>
  <para>Support for Arm trace architecture, with System registers access.</para>
</field_value_description>
    </field_value_instance>
            </field_values>
          <field_description order="after">
            
  <para>All other values are reserved.</para>
<para>In Armv8-A, the permitted values are <binarynumber>0b0000</binarynumber> and <binarynumber>0b0001</binarynumber>.</para>
<para>See the ETM Architecture Specification for more information.</para>

          </field_description>
          <field_resets>
  
  
</field_resets>
      </field>
        <field
           id="MMapDbg_11_8"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>MMapDbg</field_name>
          <field_msb>11</field_msb>
          <field_lsb>8</field_lsb>
          <field_description order="before">
          
  <para>Memory Mapped Debug. Support for v7 memory-mapped debug model, for A and R profile processors.</para>
<para>In Armv8-A, this field is <arm-defined-word>RES0</arm-defined-word>.</para>
<para>The optional memory map defined by Armv8 is not compatible with Armv7.</para>

          </field_description>
            <field_values>
            </field_values>
          <field_description order="after">
            
  

          </field_description>
          <field_resets>
  
  
</field_resets>
      </field>
        <field
           id="CopSDbg_7_4"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>CopSDbg</field_name>
          <field_msb>7</field_msb>
          <field_lsb>4</field_lsb>
          <field_description order="before">
          
  <para>Support for  a System registers-based Secure debug model, using registers in the coproc = <binarynumber>0b1110</binarynumber> encoding space, for an A profile processor that includes EL3.</para>
<para>If EL3 is not implemented and the implemented Security state is Non-secure state, this field is <arm-defined-word>RES0</arm-defined-word>. Otherwise, this field reads the same as bits [3:0].</para>

          </field_description>
            <field_values>
            </field_values>
          <field_description order="after">
            
  

          </field_description>
          <field_resets>
  
  
</field_resets>
      </field>
        <field
           id="CopDbg_3_0"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>CopDbg</field_name>
          <field_msb>3</field_msb>
          <field_lsb>0</field_lsb>
          <field_description order="before">
          
  <para>Support for System registers-based debug model, using registers in the coproc == <binarynumber>0b1110</binarynumber> encoding space, for A and R profile processors. Defined values are:</para>

          </field_description>
            <field_values>
                  <field_value_instance>
        <field_value>0b0000</field_value>
        <field_value_description>
  <para>Not supported.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b0010</field_value>
        <field_value_description>
  <para>Support for Armv6, v6 Debug architecture, with System registers access.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b0011</field_value>
        <field_value_description>
  <para>Support for Armv6, v6.1 Debug architecture, with System registers access.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b0100</field_value>
        <field_value_description>
  <para>Support for Armv7, v7 Debug architecture, with System registers access.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b0101</field_value>
        <field_value_description>
  <para>Support for Armv7, v7.1 Debug architecture, with System registers access.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b0110</field_value>
        <field_value_description>
  <para>Support for Armv8 debug architecture, with System registers access.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b0111</field_value>
        <field_value_description>
  <para>Support for Armv8 debug architecture, with System registers access, and Virtualization Host Extensions.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b1000</field_value>
        <field_value_description>
  <para>Support for Armv8.2 debug architecture.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b1001</field_value>
        <field_value_description>
  <para>Support for Armv8.4 debug architecture.</para>
</field_value_description>
    </field_value_instance>
            </field_values>
          <field_description order="after">
            
  <para>All other values are reserved.</para>
<para><xref browsertext="FEAT_Debugv8p2" filename="A_armv8_architecture_extensions.fm" linkend="v8.2.Debug"></xref> adds the functionality identified by the value <binarynumber>0b1000</binarynumber>.</para>
<para><xref browsertext="FEAT_Debugv8p4" filename="A_armv8_architecture_extensions.fm" linkend="v8.4.Debug"></xref> adds the functionality identified by the value <binarynumber>0b1001</binarynumber>.</para>
<para>In Armv8.0, the only permitted value is <binarynumber>0b0110</binarynumber>.</para>
<para>In Armv8.1, the only permitted value is <binarynumber>0b0111</binarynumber>.</para>
<para>In Armv8.2, the only permitted value is <binarynumber>0b1000</binarynumber>.</para>
<para>From Armv8.4, the only permitted value is <binarynumber>0b1001</binarynumber>.</para>

          </field_description>
          <field_resets>
  
  
</field_resets>
      </field>
    <text_after_fields>
    
  

    </text_after_fields>
  </fields>
  <fields length="64">
      <fields_condition></fields_condition>
    <text_before_fields>
      
  

    </text_before_fields>
    
        <field
           id="UNKNOWN_63_0"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
           rwtype="UNKNOWN"
        >
          <field_name>UNKNOWN</field_name>
          <field_msb>63</field_msb>
          <field_lsb>0</field_lsb>
          <field_description order="before">
            <para>Reserved, <arm-defined-word>UNKNOWN</arm-defined-word>.</para>
          </field_description>
            <field_values>
               
                 <field_value_name>U</field_value_name>
            </field_values>
      </field>
    <text_after_fields>
    
  

    </text_after_fields>
  </fields>
  <reg_fieldset length="64">
        <fields_condition>When AArch32 is supported at any Exception level</fields_condition>
      
        <fieldat id="0_63_32" msb="63" lsb="32"/>
        <fieldat id="TraceFilt_31_28" msb="31" lsb="28"/>
        <fieldat id="PerfMon_27_24" msb="27" lsb="24"/>
        <fieldat id="MProfDbg_23_20" msb="23" lsb="20"/>
        <fieldat id="MMapTrc_19_16" msb="19" lsb="16"/>
        <fieldat id="CopTrc_15_12" msb="15" lsb="12"/>
        <fieldat id="MMapDbg_11_8" msb="11" lsb="8"/>
        <fieldat id="CopSDbg_7_4" msb="7" lsb="4"/>
        <fieldat id="CopDbg_3_0" msb="3" lsb="0"/>
    </reg_fieldset>
  <reg_fieldset length="64">
        <fields_condition></fields_condition>
      
        <fieldat id="UNKNOWN_63_0" msb="63" lsb="0"/>
    </reg_fieldset>

      </reg_fieldsets>
      


<access_mechanisms>
  


      <access_mechanism accessor="MRS ID_DFR0_EL1">
        <encoding>
          
          <access_instruction>MRS &lt;Xt&gt;, ID_DFR0_EL1</access_instruction>
            
            <enc n="op0" v="0b11"/>
            
            <enc n="op1" v="0b000"/>
            
            <enc n="CRn" v="0b0000"/>
            
            <enc n="CRm" v="0b0001"/>
            
            <enc n="op2" v="0b010"/>
        </encoding>
          <access_permission>
            <ps name="MRS" sections="1" secttype="access_permission">
              <pstext>
if PSTATE.EL == EL0 then
    if IsFeatureImplemented("FEAT_IDST") then
        if EL2Enabled() &amp;&amp; HCR_EL2.TGE == '1' then
            AArch64.SystemAccessTrap(EL2, 0x18);
        else
            AArch64.SystemAccessTrap(EL1, 0x18);
    else
        UNDEFINED;
elsif PSTATE.EL == EL1 then
    if EL2Enabled() &amp;&amp; HCR_EL2.TID3 == '1' then
        AArch64.SystemAccessTrap(EL2, 0x18);
    else
        return ID_DFR0_EL1;
elsif PSTATE.EL == EL2 then
    return ID_DFR0_EL1;
elsif PSTATE.EL == EL3 then
    return ID_DFR0_EL1;
              </pstext>
            </ps>
          </access_permission>
      </access_mechanism>
</access_mechanisms>

      <arch_variants>
      </arch_variants>
  </register>
</registers>

    <timestamp>01/07/2020 15:57; 80324f0b9997bede489cc15ad1565345720bcd2a</timestamp>
</register_page>