<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE register_page SYSTEM "registers.dtd">
<!-- Copyright (c) 2010-2018 Arm Limited or its affiliates. All rights reserved. -->
<!-- This document is Non-Confidential. This document may only be used and distributed in accordance with the terms of the agreement entered into by Arm and the party that Arm delivered this document to. -->
<?xml-stylesheet href="one_register.xsl" type="text/xsl" ?>






<register_page>
  <registers>
    <register execution_state="AArch64" is_register="False" is_internal="True" is_banked="False" is_stub_entry="False">
      <reg_short_name>TLBI RVAALE1IS</reg_short_name>
      <reg_long_name>TLB Range Invalidate by VA, All ASID, Last Level, EL1, Inner Shareable</reg_long_name>
      
        <reg_condition otherwise="UNDEFINED">when FEAT_TLBIRANGE is implemented</reg_condition>
      

          <reg_reset_value></reg_reset_value>
      <reg_mappings>
      </reg_mappings>
      <reg_purpose>
        
    
      <purpose_text>
        <para>Invalidates cached copies of translation table entries from TLBs that meet all the following requirements:</para>

      </purpose_text>
      <purpose_text>
        <list type="unordered">
<listitem><content>
<para>The entry is a stage 1 translation table entry, from the final level of the translation table walk.</para>
</content>
</listitem><listitem><content>
<para>When EL2 is implemented and enabled in the Security state described by the current value of <register_link state="AArch64" id="AArch64-scr_el3.xml">SCR_EL3</register_link>.NS:</para>
<list type="unordered">
<listitem><content>
<para>If <register_link state="AArch64" id="AArch64-hcr_el2.xml">HCR_EL2</register_link>.{E2H, TGE} is not {1, 1}, the entry would be used with the current VMID and would be required to translate the specified VA using the EL1&amp;0 translation regime.</para>
</content>
</listitem><listitem><content>
<para>If <register_link state="AArch64" id="AArch64-hcr_el2.xml">HCR_EL2</register_link>.{E2H, TGE} is {1, 1}, the entry would be required to translate the specified VA using the EL2&amp;0 translation regime.</para>
</content>
</listitem></list>
</content>
</listitem><listitem><content>
<para>When EL2 is not implemented or is disabled in the current Security state, the entry would be required to translate the specified VA using the EL1&amp;0 translation regime.</para>
</content>
</listitem><listitem><content>
<para>The entry is within the address range determined by the formula [BaseADDR &lt;= VA &lt; BaseADDR + ((NUM +1)*2^(5*SCALE +1) * Translation_Granule_Size)].</para>
</content>
</listitem></list>

      </purpose_text>
      <purpose_text>
        <para>The invalidation applies to all PEs in the same Inner Shareable shareability domain as the PE that executes this System instruction.</para>

      </purpose_text>
      <purpose_text>
        <note><para>When a TLB maintenance instruction is generated to the Secure EL1&amp;0 translation regime and is defined to pass a VMID argument, or would be defined to pass a VMID argument if SCR_EL3.EEL2==1, then:</para><list type="unordered"><listitem><content>A PE with <register_link state="AArch64" id="AArch64-scr_el3.xml">SCR_EL3</register_link>.EEL2==1 is not architecturally required to invalidate any entries in the Secure EL1&amp;0 translation of a PE in the same required shareability domain with SCR_EL3.EEL2==0.</content></listitem><listitem><content>A PE with <register_link state="AArch64" id="AArch64-scr_el3.xml">SCR_EL3</register_link>.EEL2==0 is not architecturally required to invalidate any entries in the Secure EL1&amp;0 translation of a PE in the same required shareability domain with SCR_EL3.EEL2==1.</content></listitem><listitem><content>A PE is architecturally required to invalidate all relevant entries in the Secure EL1&amp;0 translation of a System MMU in the same required shareability domain with a VMID of 0.</content></listitem></list><para>For the EL1&amp;0 and EL2&amp;0 translation regimes, the invalidation applies to both:</para><list type="unordered"><listitem><content>Global entries.</content></listitem><listitem><content>Non-global entries with any ASID.</content></listitem></list></note>
      </purpose_text>
      <purpose_text>
        <para>The range of addresses invalidated is <arm-defined-word>UNPREDICTABLE</arm-defined-word> when:</para>

      </purpose_text>
      <purpose_text>
        <list type="unordered">
<listitem><content>
<para>For the 4K translation granule:</para>
<list type="unordered">
<listitem><content>
<para>If TTL==01 and BaseADDR[29:12] is not equal to 000000000000000000.</para>
</content>
</listitem><listitem><content>
<para>If TTL==10 and BaseADDR[20:12] is not equal to 000000000.</para>
</content>
</listitem></list>
</content>
</listitem><listitem><content>
<para>For the 16K translation granule:</para>
<list type="unordered">
<listitem><content>If TTL==10 and BaseADDR[24:14] is not equal to 00000000000.</content>
</listitem></list>
</content>
</listitem><listitem><content>
<para>For the 64K translation granule:</para>
<list type="unordered">
<listitem><content>
<para>If TTL==01 and BaseADDR[41:16] is not equal to 00000000000000000000000000.</para>
</content>
</listitem><listitem><content>
<para>If TTL==10 and BaseADDR[28:16] is not equal to 0000000000000.</para>
</content>
</listitem></list>
</content>
</listitem></list>
      </purpose_text>

      </reg_purpose>
      <reg_groups>
            <reg_group>TLB maintenance instructions</reg_group>
      </reg_groups>
      <reg_configuration>
        

      </reg_configuration>
      <reg_attributes>
          
    
      <attributes_text>
        <para>TLBI RVAALE1IS is a 64-bit System instruction.</para>
      </attributes_text>

      </reg_attributes>
      <reg_fieldsets>
        





  <fields length="64">
    <text_before_fields>
      
  

    </text_before_fields>
    
        <field
           id="0_63_48"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
           rwtype="RES0"
        >
          <field_name>0</field_name>
          <field_msb>63</field_msb>
          <field_lsb>48</field_lsb>
          <field_description order="before">
            <para>Reserved, <arm-defined-word>RES0</arm-defined-word>.</para>
          </field_description>
            <field_values>
            </field_values>
      </field>
        <field
           id="TG_47_46"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>TG</field_name>
          <field_msb>47</field_msb>
          <field_lsb>46</field_lsb>
          <field_description order="before">
          
  <para>Translation granule size.</para>

          </field_description>
            <field_values>
                  <field_value_instance>
        <field_value>0b00</field_value>
        <field_value_description>
  <para>Reserved.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b01</field_value>
        <field_value_description>
  <para>4K translation granule.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b10</field_value>
        <field_value_description>
  <para>16K translation granule.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b11</field_value>
        <field_value_description>
  <para>64K translation granule.</para>
</field_value_description>
    </field_value_instance>
            </field_values>
          <field_description order="after">
            
  <para>The instruction takes a translation granule size for the translations that are being invalidated. If the translations used a different translation granule size than the one being specified, then the architecture does not require that the instruction invalidates any entries.</para>

          </field_description>
          <field_resets>
  
  
</field_resets>
      </field>
        <field
           id="SCALE_45_44"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>SCALE</field_name>
          <field_msb>45</field_msb>
          <field_lsb>44</field_lsb>
          <field_description order="before">
          
  <para>The exponent element of the calculation that is used to produce the upper range.</para>

          </field_description>
            <field_values>
            </field_values>
          <field_description order="after">
            
  

          </field_description>
          <field_resets>
  
  
</field_resets>
      </field>
        <field
           id="NUM_43_39"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>NUM</field_name>
          <field_msb>43</field_msb>
          <field_lsb>39</field_lsb>
          <field_description order="before">
          
  <para>The base element of the calculation that is used to produce the upper range.</para>

          </field_description>
            <field_values>
            </field_values>
          <field_description order="after">
            
  

          </field_description>
          <field_resets>
  
  
</field_resets>
      </field>
        <field
           id="TTL_38_37"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>TTL</field_name>
          <field_msb>38</field_msb>
          <field_lsb>37</field_lsb>
          <field_description order="before">
          
  <para>TTL Level hint. The TTL hint is only guaranteed to invalidate entries in the range that match the level described by the TTL hint.</para>

          </field_description>
            <field_values>
                  <field_value_instance>
        <field_value>0b00</field_value>
        <field_value_description>
  <para>The entries in the range can be using any level for the translation table entries.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b01</field_value>
        <field_value_description>
  <para>When using a 4KB or 64KB translation granule, all entries to invalidate are Level 1 translation table entries.</para>
<para>When using a 16KB translation granule, this value is reserved and hardware should treat this field as <binarynumber>0b00</binarynumber>.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b10</field_value>
        <field_value_description>
  <para>All entries to invalidate are Level 2 translation table entries.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b11</field_value>
        <field_value_description>
  <para>All entries to invalidate are Level 3 translation table entries.</para>
</field_value_description>
    </field_value_instance>
            </field_values>
          <field_description order="after">
            
  

          </field_description>
          <field_resets>
  
  
</field_resets>
      </field>
        <field
           id="BaseADDR_36_0"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>BaseADDR</field_name>
          <field_msb>36</field_msb>
          <field_lsb>0</field_lsb>
          <field_description order="before">
          
  <para>The starting address for the range of the maintenance instruction.</para>
<para>When using a 4KB translation granule, this field is BaseADDR[48:12].</para>
<para>When using a 16KB translation granule, this field is BaseADDR[50:14].</para>
<para>When using a 64KB translation granule, this field is BaseADDR[52:16].</para>

          </field_description>
            <field_values>
            </field_values>
          <field_description order="after">
            
  

          </field_description>
          <field_resets>
  
  
</field_resets>
      </field>
    <text_after_fields>
    
  

    </text_after_fields>
  </fields>
  <reg_fieldset length="64">
      
        <fieldat id="0_63_48" msb="63" lsb="48"/>
        <fieldat id="TG_47_46" msb="47" lsb="46"/>
        <fieldat id="SCALE_45_44" msb="45" lsb="44"/>
        <fieldat id="NUM_43_39" msb="43" lsb="39"/>
        <fieldat id="TTL_38_37" msb="38" lsb="37"/>
        <fieldat id="BaseADDR_36_0" msb="36" lsb="0"/>
    </reg_fieldset>

      </reg_fieldsets>
      


<access_mechanisms>
  


      <access_mechanism accessor="TLBI_SYS RVAALE1IS">
        <encoding>
          
          <access_instruction>TLBI RVAALE1IS{, &lt;Xt&gt;}</access_instruction>
            
            <enc n="op0" v="0b01"/>
            
            <enc n="op1" v="0b000"/>
            
            <enc n="CRn" v="0b1000"/>
            
            <enc n="CRm" v="0b0010"/>
            
            <enc n="op2" v="0b111"/>
        </encoding>
          <access_permission>
            <ps name="TLBI_SYS" sections="1" secttype="access_permission">
              <pstext>
if PSTATE.EL == EL0 then
    UNDEFINED;
elsif PSTATE.EL == EL1 then
    if EL2Enabled() &amp;&amp; HCR_EL2.TTLB == '1' then
        AArch64.SystemAccessTrap(EL2, 0x18);
    elsif EL2Enabled() &amp;&amp; HCR_EL2.TTLBIS == '1' then
        AArch64.SystemAccessTrap(EL2, 0x18);
    elsif EL2Enabled() &amp;&amp; (!HaveEL(EL3) || SCR_EL3.FGTEn == '1') &amp;&amp; HFGITR_EL2.TLBIRVAALE1IS == '1' then
        AArch64.SystemAccessTrap(EL2, 0x18);
    else
        TLBI_RVAALE1IS(X[t]);
elsif PSTATE.EL == EL2 then
    TLBI_RVAALE1IS(X[t]);
elsif PSTATE.EL == EL3 then
    TLBI_RVAALE1IS(X[t]);
              </pstext>
            </ps>
          </access_permission>
      </access_mechanism>
</access_mechanisms>

      <arch_variants>
      </arch_variants>
  </register>
</registers>

    <timestamp>01/07/2020 15:57; 80324f0b9997bede489cc15ad1565345720bcd2a</timestamp>
</register_page>