<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE register_page SYSTEM "registers.dtd">
<!-- Copyright (c) 2010-2018 Arm Limited or its affiliates. All rights reserved. -->
<!-- This document is Non-Confidential. This document may only be used and distributed in accordance with the terms of the agreement entered into by Arm and the party that Arm delivered this document to. -->
<?xml-stylesheet href="one_register.xsl" type="text/xsl" ?>






<register_page>
  <registers>
    <register execution_state="AArch64" is_register="True" is_internal="True" is_banked="False" is_stub_entry="False">
      <reg_short_name>VSESR_EL2</reg_short_name>
      <reg_long_name>Virtual SError Exception Syndrome Register</reg_long_name>
      
        <reg_condition otherwise="UNDEFINED">when FEAT_RAS is implemented</reg_condition>
      

          <reg_reset_value></reg_reset_value>
      <reg_mappings>
          <reg_mapping>
              
            <mapped_name filename="AArch32-vdfsr.xml">VDFSR</mapped_name>
            <mapped_type>Architectural</mapped_type>
              <mapped_execution_state>AArch32</mapped_execution_state>
              <mapped_from_startbit>31</mapped_from_startbit>
              <mapped_from_endbit>0</mapped_from_endbit>

              <mapped_to_startbit>31</mapped_to_startbit>
              <mapped_to_endbit>0</mapped_to_endbit>

          </reg_mapping>
      </reg_mappings>
      <reg_purpose>
        
    
      <purpose_text>
        <para>Provides the syndrome value reported to software on taking a virtual SError interrupt exception to EL1, or on executing an <instruction>ESB</instruction> instruction at EL1.</para>

      </purpose_text>
      <purpose_text>
        <para>When the virtual SError interrupt is taken to EL1 using AArch64, then the syndrome value is reported in <register_link state="AArch64" id="AArch64-esr_el1.xml">ESR_EL1</register_link>.</para>

      </purpose_text>
      <purpose_text>
        <para>When the virtual SError interrupt is taken to EL1 using AArch32, then the syndrome value is reported in <register_link state="AArch32" id="AArch32-dfsr.xml">DFSR</register_link>.{AET, ExT} and the remainder of <register_link state="AArch32" id="AArch32-dfsr.xml">DFSR</register_link> is set as defined by VMSAv8-32. For more information, see <xref browsertext="The AArch32 Virtual Memory System Architecture" filename="G_the_aarch32_virtual_memory_system_architecture.fm" linkend="CHDBCEDA"/>.</para>

      </purpose_text>
      <purpose_text>
        <para>When the virtual SError interrupt is deferred by an <instruction>ESB</instruction> instruction, then the syndrome value is written to <register_link state="AArch64" id="AArch64-vdisr_el2.xml">VDISR_EL2</register_link>.</para>
      </purpose_text>

      </reg_purpose>
      <reg_groups>
          <reg_group>RAS registers</reg_group>
      </reg_groups>
      <reg_configuration>
        
    
      <configuration_text>
        <para>If EL2 is not implemented, this register is <arm-defined-word>RES0</arm-defined-word> from EL3.</para>

      </configuration_text>
      <configuration_text>
        <para>This register has no effect if EL2 is not enabled in the current Security state.</para>
      </configuration_text>

      </reg_configuration>
      <reg_attributes>
          <attributes_text>
            <para>VSESR_EL2 is a 64-bit register.</para>
          </attributes_text>
      </reg_attributes>
      <reg_fieldsets>
        





  <fields length="64">
      <fields_condition>When EL1 is using AArch32</fields_condition>
    <text_before_fields>
      
  

    </text_before_fields>
    
        <field
           id="0_63_16"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
           rwtype="RES0"
        >
          <field_name>0</field_name>
          <field_msb>63</field_msb>
          <field_lsb>16</field_lsb>
          <field_description order="before">
            <para>Reserved, <arm-defined-word>RES0</arm-defined-word>.</para>
          </field_description>
            <field_values>
            </field_values>
      </field>
        <field
           id="AET_15_14"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>AET</field_name>
          <field_msb>15</field_msb>
          <field_lsb>14</field_lsb>
          <field_description order="before">
          
  <para>When a virtual SError interrupt is taken to EL1 using AArch32, <register_link state="AArch32" id="AArch32-dfsr.xml">DFSR</register_link>[15:4] is set to VSESR_EL2.AET.</para>
<para>When a virtual SError interrupt is deferred by an <instruction>ESB</instruction> instruction, <register_link state="AArch64" id="AArch64-vdisr_el2.xml">VDISR_EL2</register_link>[15:4] is set to VSESR_EL2.AET.</para>

          </field_description>
            <field_values>
            </field_values>
          <field_description order="after">
            
  

          </field_description>
          <field_resets>
  
  
    
    
        <field_reset>
          
      <field_reset_standard_text>AU</field_reset_standard_text>
  
        </field_reset>
  
</field_resets>
      </field>
        <field
           id="0_13_13"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
           rwtype="RES0"
        >
          <field_name>0</field_name>
          <field_msb>13</field_msb>
          <field_lsb>13</field_lsb>
          <field_description order="before">
            <para>Reserved, <arm-defined-word>RES0</arm-defined-word>.</para>
          </field_description>
            <field_values>
            </field_values>
      </field>
        <field
           id="ExT_12_12"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>ExT</field_name>
          <field_msb>12</field_msb>
          <field_lsb>12</field_lsb>
          <field_description order="before">
          
  <para>When a virtual SError interrupt is taken to EL1 using AArch32, <register_link state="AArch32" id="AArch32-dfsr.xml">DFSR</register_link>[12] is set to VSESR_EL2.ExT.</para>
<para>When a virtual SError interrupt is deferred by an <instruction>ESB</instruction> instruction, <register_link state="AArch64" id="AArch64-vdisr_el2.xml">VDISR_EL2</register_link>[12] is set to VSESR_EL2.ExT.</para>

          </field_description>
            <field_values>
            </field_values>
          <field_description order="after">
            
  

          </field_description>
          <field_resets>
  
  
    
    
        <field_reset>
          
      <field_reset_standard_text>AU</field_reset_standard_text>
  
        </field_reset>
  
</field_resets>
      </field>
        <field
           id="0_11_0"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
           rwtype="RES0"
        >
          <field_name>0</field_name>
          <field_msb>11</field_msb>
          <field_lsb>0</field_lsb>
          <field_description order="before">
            <para>Reserved, <arm-defined-word>RES0</arm-defined-word>.</para>
          </field_description>
            <field_values>
            </field_values>
      </field>
    <text_after_fields>
    
  

    </text_after_fields>
  </fields>
  <fields length="64">
      <fields_condition>When EL1 is using AArch64</fields_condition>
    <text_before_fields>
      
  

    </text_before_fields>
    
        <field
           id="0_63_25"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
           rwtype="RES0"
        >
          <field_name>0</field_name>
          <field_msb>63</field_msb>
          <field_lsb>25</field_lsb>
          <field_description order="before">
            <para>Reserved, <arm-defined-word>RES0</arm-defined-word>.</para>
          </field_description>
            <field_values>
            </field_values>
      </field>
        <field
           id="IDS_24_24"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>IDS</field_name>
          <field_msb>24</field_msb>
          <field_lsb>24</field_lsb>
          <field_description order="before">
          
  <para>When a virtual SError interrupt is taken to EL1 using AArch64, <register_link state="AArch64" id="AArch64-esr_el1.xml">ESR_EL1</register_link>[24] is set to VSESR_EL2.IDS.</para>
<para>When a virtual SError interrupt is deferred by an <instruction>ESB</instruction> instruction, <register_link state="AArch64" id="AArch64-vdisr_el2.xml">VDISR_EL2</register_link>[24] is set to VSESR_EL2.IDS.</para>

          </field_description>
            <field_values>
            </field_values>
          <field_description order="after">
            
  

          </field_description>
          <field_resets>
  
  
    
    
        <field_reset>
          
      <field_reset_standard_text>AU</field_reset_standard_text>
  
        </field_reset>
  
</field_resets>
      </field>
        <field
           id="ISS_23_0"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>ISS</field_name>
          <field_msb>23</field_msb>
          <field_lsb>0</field_lsb>
          <field_description order="before">
          
  <para>When a virtual SError interrupt is taken to EL1 using AArch64, <register_link state="AArch64" id="AArch64-esr_el1.xml">ESR_EL1</register_link>[23:0] is set to VSESR_EL2.ISS.</para>
<para>When a virtual SError interrupt is deferred by an <instruction>ESB</instruction> instruction, <register_link state="AArch64" id="AArch64-vdisr_el2.xml">VDISR_EL2</register_link>[23:0] is set to VSESR_EL2.ISS.</para>

          </field_description>
            <field_values>
            </field_values>
          <field_description order="after">
            
  

          </field_description>
          <field_resets>
  
  
    
    
        <field_reset>
          
      <field_reset_standard_text>AU</field_reset_standard_text>
  
        </field_reset>
  
</field_resets>
      </field>
    <text_after_fields>
    
  

    </text_after_fields>
  </fields>
  <reg_fieldset length="64">
        <fields_condition>When EL1 is using AArch32</fields_condition>
      
        <fieldat id="0_63_16" msb="63" lsb="16"/>
        <fieldat id="AET_15_14" msb="15" lsb="14"/>
        <fieldat id="0_13_13" msb="13" lsb="13"/>
        <fieldat id="ExT_12_12" msb="12" lsb="12"/>
        <fieldat id="0_11_0" msb="11" lsb="0"/>
    </reg_fieldset>
  <reg_fieldset length="64">
        <fields_condition>When EL1 is using AArch64</fields_condition>
      
        <fieldat id="0_63_25" msb="63" lsb="25"/>
        <fieldat id="IDS_24_24" msb="24" lsb="24"/>
        <fieldat id="ISS_23_0" msb="23" lsb="0"/>
    </reg_fieldset>

      </reg_fieldsets>
      


<access_mechanisms>
  


      <access_mechanism accessor="MRS VSESR_EL2">
        <encoding>
          
          <access_instruction>MRS &lt;Xt&gt;, VSESR_EL2</access_instruction>
            
            <enc n="op0" v="0b11"/>
            
            <enc n="op1" v="0b100"/>
            
            <enc n="CRn" v="0b0101"/>
            
            <enc n="CRm" v="0b0010"/>
            
            <enc n="op2" v="0b011"/>
        </encoding>
          <access_permission>
            <ps name="MRS" sections="1" secttype="access_permission">
              <pstext>
if PSTATE.EL == EL0 then
    UNDEFINED;
elsif PSTATE.EL == EL1 then
    if EL2Enabled() &amp;&amp; HCR_EL2.&lt;NV2,NV&gt; == '11' then
        return NVMem[0x508];
    elsif EL2Enabled() &amp;&amp; HCR_EL2.NV == '1' then
        AArch64.SystemAccessTrap(EL2, 0x18);
    else
        UNDEFINED;
elsif PSTATE.EL == EL2 then
    return VSESR_EL2;
elsif PSTATE.EL == EL3 then
    return VSESR_EL2;
              </pstext>
            </ps>
          </access_permission>
      </access_mechanism>
      <access_mechanism accessor="MSRregister VSESR_EL2">
        <encoding>
          
          <access_instruction>MSR VSESR_EL2, &lt;Xt&gt;</access_instruction>
            
            <enc n="op0" v="0b11"/>
            
            <enc n="op1" v="0b100"/>
            
            <enc n="CRn" v="0b0101"/>
            
            <enc n="CRm" v="0b0010"/>
            
            <enc n="op2" v="0b011"/>
        </encoding>
          <access_permission>
            <ps name="MSRregister" sections="1" secttype="access_permission">
              <pstext>
if PSTATE.EL == EL0 then
    UNDEFINED;
elsif PSTATE.EL == EL1 then
    if EL2Enabled() &amp;&amp; HCR_EL2.&lt;NV2,NV&gt; == '11' then
        NVMem[0x508] = X[t];
    elsif EL2Enabled() &amp;&amp; HCR_EL2.NV == '1' then
        AArch64.SystemAccessTrap(EL2, 0x18);
    else
        UNDEFINED;
elsif PSTATE.EL == EL2 then
    VSESR_EL2 = X[t];
elsif PSTATE.EL == EL3 then
    VSESR_EL2 = X[t];
              </pstext>
            </ps>
          </access_permission>
      </access_mechanism>
</access_mechanisms>

      <arch_variants>
      </arch_variants>
  </register>
</registers>

    <timestamp>01/07/2020 15:57; 80324f0b9997bede489cc15ad1565345720bcd2a</timestamp>
</register_page>