<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE register_page SYSTEM "registers.dtd">
<!-- Copyright (c) 2010-2018 Arm Limited or its affiliates. All rights reserved. -->
<!-- This document is Non-Confidential. This document may only be used and distributed in accordance with the terms of the agreement entered into by Arm and the party that Arm delivered this document to. -->
<?xml-stylesheet href="one_register.xsl" type="text/xsl" ?>






<register_page>
  <registers>
    <register execution_state="AArch64" is_register="True" is_internal="True" is_banked="True" is_stub_entry="False">
      <reg_short_name>ICC_AP1R&lt;n&gt;_EL1</reg_short_name>
      <reg_long_name>Interrupt Controller Active Priorities Group 1 Registers</reg_long_name>
      
          <reg_array>
              <reg_array_start>0</reg_array_start>
              <reg_array_end>3</reg_array_end>
         </reg_array>
      

          <reg_reset_value></reg_reset_value>
      <reg_mappings>
          <reg_mapping>
              
            <mapped_name filename="AArch32-icc_ap1rn.xml">ICC_AP1R&lt;n&gt;</mapped_name>
            <mapped_type>Architectural</mapped_type>
              <mapped_execution_state>AArch32</mapped_execution_state>
              <mapped_from_startbit>31</mapped_from_startbit>
              <mapped_from_endbit>0</mapped_from_endbit>
              <mapped_from_sec_state>S</mapped_from_sec_state>

              <mapped_to_startbit>31</mapped_to_startbit>
              <mapped_to_endbit>0</mapped_to_endbit>
              <mapped_to_sec_state>S</mapped_to_sec_state>

          </reg_mapping>
          <reg_mapping>
              
            <mapped_name filename="AArch32-icc_ap1rn.xml">ICC_AP1R&lt;n&gt;</mapped_name>
            <mapped_type>Architectural</mapped_type>
              <mapped_execution_state>AArch32</mapped_execution_state>
              <mapped_from_startbit>31</mapped_from_startbit>
              <mapped_from_endbit>0</mapped_from_endbit>
              <mapped_from_sec_state>NS</mapped_from_sec_state>

              <mapped_to_startbit>31</mapped_to_startbit>
              <mapped_to_endbit>0</mapped_to_endbit>
              <mapped_to_sec_state>NS</mapped_to_sec_state>

          </reg_mapping>
      </reg_mappings>
      <reg_purpose>
        
    
      <purpose_text>
        <para>Provides information about Group 1 active priorities.</para>
      </purpose_text>

      </reg_purpose>
      <reg_groups>
            <reg_group>GIC control registers</reg_group>
            <reg_group>GIC system registers</reg_group>
      </reg_groups>
      <reg_configuration>
        

      </reg_configuration>
      <reg_attributes>
          <attributes_text>
            <para>ICC_AP1R&lt;n&gt;_EL1 is a 64-bit register.</para>
          </attributes_text>
      </reg_attributes>
      <reg_fieldsets>
        





  <fields length="64">
    <text_before_fields>
      
  

    </text_before_fields>
    
        <field
           id="0_63_32"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
           rwtype="RES0"
        >
          <field_name>0</field_name>
          <field_msb>63</field_msb>
          <field_lsb>32</field_lsb>
          <field_description order="before">
            <para>Reserved, <arm-defined-word>RES0</arm-defined-word>.</para>
          </field_description>
            <field_values>
            </field_values>
      </field>
        <field
           id="IMPLEMENTATION DEFINED_31_0"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>IMPLEMENTATION DEFINED</field_name>
          <field_msb>31</field_msb>
          <field_lsb>0</field_lsb>
          <field_description order="before">
            <para><arm-defined-word>IMPLEMENTATION DEFINED</arm-defined-word>.</para>
          
  

          </field_description>
            <field_values>
               
                 <field_value_name>I</field_value_name>
            </field_values>
          <field_description order="after">
            
  

          </field_description>
          <field_resets>
  
  
    
    
        <field_reset>
          
      <field_reset_number>0</field_reset_number>
  
        </field_reset>
  
</field_resets>
      </field>
    <text_after_fields>
    
  <para>The contents of these registers are <arm-defined-word>IMPLEMENTATION DEFINED</arm-defined-word> with the one architectural requirement that the value <hexnumber>0x00000000</hexnumber> is consistent with no interrupts being active.</para>

    </text_after_fields>
  </fields>
  <reg_fieldset length="64">
      
        <fieldat id="0_63_32" msb="63" lsb="32"/>
        <fieldat id="IMPLEMENTATION DEFINED_31_0" msb="31" lsb="0"/>
    </reg_fieldset>

      </reg_fieldsets>
        <reg_variables>
              <reg_variable variable="n" max="3"/>
        </reg_variables>
      


<access_mechanisms>
  
    
      <access_permission_text>
        <para>Writing to these registers with any value other than the last read value of the register (or <hexnumber>0x00000000</hexnumber> when there are no Group 1 active priorities) might result in <arm-defined-word>UNPREDICTABLE</arm-defined-word> behavior of the interrupt prioritization system, causing:</para>

      </access_permission_text>
      <access_permission_text>
        <list type="unordered">
<listitem><content>Interrupts that should preempt execution to not preempt execution.</content>
</listitem><listitem><content>Interrupts that should not preempt execution to preempt execution.</content>
</listitem></list>

      </access_permission_text>
      <access_permission_text>
        <para>ICC_AP1R1_EL1 is only implemented in implementations that support 6 or more bits of priority. ICC_AP1R2_EL1 and ICC_AP1R3_EL1 are only implemented in implementations that support 7 or more bits of priority. Unimplemented registers are <arm-defined-word>UNDEFINED</arm-defined-word>.</para>

      </access_permission_text>
      <access_permission_text>
        <note><para>The number of bits of preemption is indicated by <register_link state="AArch64" id="AArch64-ich_vtr_el2.xml">ICH_VTR_EL2</register_link>.PREbits.</para></note>
      </access_permission_text>
      <access_permission_text>
        <para>Writing to the active priority registers in any order other than the following order will result in <arm-defined-word>UNPREDICTABLE</arm-defined-word> behavior:</para>

      </access_permission_text>
      <access_permission_text>
        <list type="unordered">
<listitem><content><register_link state="AArch64" id="AArch64-icc_ap0rn_el1.xml">ICC_AP0R&lt;n&gt;_EL1</register_link>.</content>
</listitem><listitem><content>Secure ICC_AP1R&lt;n&gt;_EL1.</content>
</listitem><listitem><content>Non-secure ICC_AP1R&lt;n&gt;_EL1.</content>
</listitem></list>
      </access_permission_text>


      <access_mechanism accessor="MRS ICC_AP1R&lt;n&gt;_EL1">
        <encoding>
          
          <access_instruction>MRS &lt;Xt&gt;, ICC_AP1R&lt;n&gt;_EL1</access_instruction>
            
            <enc n="op0" v="0b11"/>
            
            <enc n="op1" v="0b000"/>
            
            <enc n="CRn" v="0b1100"/>
            
            <enc n="CRm" v="0b1001"/>
            
            <enc n="op2" v="0b0:n[1:0]"/>
        </encoding>
          <access_permission>
            <ps name="MRS" sections="1" secttype="access_permission">
              <pstext>
if PSTATE.EL == EL0 then
    UNDEFINED;
elsif PSTATE.EL == EL1 then
    if Halted() &amp;&amp; HaveEL(EL3) &amp;&amp; EDSCR.SDD == '1' &amp;&amp; boolean IMPLEMENTATION_DEFINED "EL3 trap priority when SDD == '1'" &amp;&amp; SCR_EL3.IRQ == '1' then
        UNDEFINED;
    elsif ICC_SRE_EL1.SRE == '0' then
        AArch64.SystemAccessTrap(EL1, 0x18);
    elsif EL2Enabled() &amp;&amp; ICH_HCR_EL2.TALL1 == '1' then
        AArch64.SystemAccessTrap(EL2, 0x18);
    elsif EL2Enabled() &amp;&amp; HCR_EL2.IMO == '1' then
        return ICV_AP1R_EL1[UInt(op2&lt;1:0&gt;)];
    elsif HaveEL(EL3) &amp;&amp; SCR_EL3.IRQ == '1' then
        if Halted() &amp;&amp; EDSCR.SDD == '1' then
            UNDEFINED;
        else
            AArch64.SystemAccessTrap(EL3, 0x18);
    elsif HaveEL(EL3) then
        if SCR_EL3.NS == '0' then
            return ICC_AP1R_EL1_S[UInt(op2&lt;1:0&gt;)];
        else
            return ICC_AP1R_EL1_NS[UInt(op2&lt;1:0&gt;)];
    else
        return ICC_AP1R_EL1[UInt(op2&lt;1:0&gt;)];
elsif PSTATE.EL == EL2 then
    if Halted() &amp;&amp; HaveEL(EL3) &amp;&amp; EDSCR.SDD == '1' &amp;&amp; boolean IMPLEMENTATION_DEFINED "EL3 trap priority when SDD == '1'" &amp;&amp; SCR_EL3.IRQ == '1' then
        UNDEFINED;
    elsif ICC_SRE_EL2.SRE == '0' then
        AArch64.SystemAccessTrap(EL2, 0x18);
    elsif HaveEL(EL3) &amp;&amp; SCR_EL3.IRQ == '1' then
        if Halted() &amp;&amp; EDSCR.SDD == '1' then
            UNDEFINED;
        else
            AArch64.SystemAccessTrap(EL3, 0x18);
    elsif HaveEL(EL3) then
        if SCR_EL3.NS == '0' then
            return ICC_AP1R_EL1_S[UInt(op2&lt;1:0&gt;)];
        else
            return ICC_AP1R_EL1_NS[UInt(op2&lt;1:0&gt;)];
    else
        return ICC_AP1R_EL1[UInt(op2&lt;1:0&gt;)];
elsif PSTATE.EL == EL3 then
    if ICC_SRE_EL3.SRE == '0' then
        AArch64.SystemAccessTrap(EL3, 0x18);
    else
        if SCR_EL3.NS == '0' then
            return ICC_AP1R_EL1_S[UInt(op2&lt;1:0&gt;)];
        else
            return ICC_AP1R_EL1_NS[UInt(op2&lt;1:0&gt;)];
              </pstext>
            </ps>
          </access_permission>
      </access_mechanism>
      <access_mechanism accessor="MSRregister ICC_AP1R&lt;n&gt;_EL1">
        <encoding>
          
          <access_instruction>MSR ICC_AP1R&lt;n&gt;_EL1, &lt;Xt&gt;</access_instruction>
            
            <enc n="op0" v="0b11"/>
            
            <enc n="op1" v="0b000"/>
            
            <enc n="CRn" v="0b1100"/>
            
            <enc n="CRm" v="0b1001"/>
            
            <enc n="op2" v="0b0:n[1:0]"/>
        </encoding>
          <access_permission>
            <ps name="MSRregister" sections="1" secttype="access_permission">
              <pstext>
if PSTATE.EL == EL0 then
    UNDEFINED;
elsif PSTATE.EL == EL1 then
    if Halted() &amp;&amp; HaveEL(EL3) &amp;&amp; EDSCR.SDD == '1' &amp;&amp; boolean IMPLEMENTATION_DEFINED "EL3 trap priority when SDD == '1'" &amp;&amp; SCR_EL3.IRQ == '1' then
        UNDEFINED;
    elsif ICC_SRE_EL1.SRE == '0' then
        AArch64.SystemAccessTrap(EL1, 0x18);
    elsif EL2Enabled() &amp;&amp; ICH_HCR_EL2.TALL1 == '1' then
        AArch64.SystemAccessTrap(EL2, 0x18);
    elsif EL2Enabled() &amp;&amp; HCR_EL2.IMO == '1' then
        ICV_AP1R_EL1[UInt(op2&lt;1:0&gt;)] = X[t];
    elsif HaveEL(EL3) &amp;&amp; SCR_EL3.IRQ == '1' then
        if Halted() &amp;&amp; EDSCR.SDD == '1' then
            UNDEFINED;
        else
            AArch64.SystemAccessTrap(EL3, 0x18);
    elsif HaveEL(EL3) then
        if SCR_EL3.NS == '0' then
            ICC_AP1R_EL1_S[UInt(op2&lt;1:0&gt;)] = X[t];
        else
            ICC_AP1R_EL1_NS[UInt(op2&lt;1:0&gt;)] = X[t];
    else
        ICC_AP1R_EL1[UInt(op2&lt;1:0&gt;)] = X[t];
elsif PSTATE.EL == EL2 then
    if Halted() &amp;&amp; HaveEL(EL3) &amp;&amp; EDSCR.SDD == '1' &amp;&amp; boolean IMPLEMENTATION_DEFINED "EL3 trap priority when SDD == '1'" &amp;&amp; SCR_EL3.IRQ == '1' then
        UNDEFINED;
    elsif ICC_SRE_EL2.SRE == '0' then
        AArch64.SystemAccessTrap(EL2, 0x18);
    elsif HaveEL(EL3) &amp;&amp; SCR_EL3.IRQ == '1' then
        if Halted() &amp;&amp; EDSCR.SDD == '1' then
            UNDEFINED;
        else
            AArch64.SystemAccessTrap(EL3, 0x18);
    elsif HaveEL(EL3) then
        if SCR_EL3.NS == '0' then
            ICC_AP1R_EL1_S[UInt(op2&lt;1:0&gt;)] = X[t];
        else
            ICC_AP1R_EL1_NS[UInt(op2&lt;1:0&gt;)] = X[t];
    else
        ICC_AP1R_EL1[UInt(op2&lt;1:0&gt;)] = X[t];
elsif PSTATE.EL == EL3 then
    if ICC_SRE_EL3.SRE == '0' then
        AArch64.SystemAccessTrap(EL3, 0x18);
    else
        if SCR_EL3.NS == '0' then
            ICC_AP1R_EL1_S[UInt(op2&lt;1:0&gt;)] = X[t];
        else
            ICC_AP1R_EL1_NS[UInt(op2&lt;1:0&gt;)] = X[t];
              </pstext>
            </ps>
          </access_permission>
      </access_mechanism>
</access_mechanisms>

      <arch_variants>
      </arch_variants>
  </register>
</registers>

    <timestamp>01/07/2020 15:57; 80324f0b9997bede489cc15ad1565345720bcd2a</timestamp>
</register_page>