<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE register_page SYSTEM "registers.dtd">
<!-- Copyright (c) 2010-2018 Arm Limited or its affiliates. All rights reserved. -->
<!-- This document is Non-Confidential. This document may only be used and distributed in accordance with the terms of the agreement entered into by Arm and the party that Arm delivered this document to. -->
<?xml-stylesheet href="one_register.xsl" type="text/xsl" ?>






<register_page>
  <registers>
    <register execution_state="AArch64" is_register="True" is_internal="True" is_banked="False" is_stub_entry="False">
      <reg_short_name>ICH_AP1R&lt;n&gt;_EL2</reg_short_name>
      <reg_long_name>Interrupt Controller Hyp Active Priorities Group 1 Registers</reg_long_name>
      
          <reg_array>
              <reg_array_start>0</reg_array_start>
              <reg_array_end>3</reg_array_end>
         </reg_array>
      

          <reg_reset_value></reg_reset_value>
      <reg_mappings>
          <reg_mapping>
              
            <mapped_name filename="AArch32-ich_ap1rn.xml">ICH_AP1R&lt;n&gt;</mapped_name>
            <mapped_type>Architectural</mapped_type>
              <mapped_execution_state>AArch32</mapped_execution_state>
              <mapped_from_startbit>31</mapped_from_startbit>
              <mapped_from_endbit>0</mapped_from_endbit>

              <mapped_to_startbit>31</mapped_to_startbit>
              <mapped_to_endbit>0</mapped_to_endbit>

          </reg_mapping>
      </reg_mappings>
      <reg_purpose>
        
    
      <purpose_text>
        <para>Provides information about Group 1 virtual active priorities for EL2.</para>
      </purpose_text>

      </reg_purpose>
      <reg_groups>
            <reg_group>GIC system registers</reg_group>
            <reg_group>GIC host interface control registers</reg_group>
            <reg_group>Virtualization registers</reg_group>
      </reg_groups>
      <reg_configuration>
        
    
      <configuration_text>
        <para>If EL2 is not implemented, this register is <arm-defined-word>RES0</arm-defined-word> from EL3.</para>

      </configuration_text>
      <configuration_text>
        <para>This register has no effect if EL2 is not enabled in the current Security state.</para>
      </configuration_text>

      </reg_configuration>
      <reg_attributes>
          <attributes_text>
            <para>ICH_AP1R&lt;n&gt;_EL2 is a 64-bit register.</para>
          </attributes_text>
      </reg_attributes>
      <reg_fieldsets>
        





  <fields length="64">
    <text_before_fields>
      
  

    </text_before_fields>
    
        <field
           id="0_63_32"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
           rwtype="RES0"
        >
          <field_name>0</field_name>
          <field_msb>63</field_msb>
          <field_lsb>32</field_lsb>
          <field_description order="before">
            <para>Reserved, <arm-defined-word>RES0</arm-defined-word>.</para>
          </field_description>
            <field_values>
            </field_values>
      </field>
        <field
           id="P&lt;x&gt;_31_0"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>P&lt;x&gt;</field_name>
          <field_msb>31</field_msb>
          <field_lsb>0</field_lsb>
          <field_array>
            <field_array_start>31</field_array_start>
            <field_array_end>0</field_array_end>
            <field_array_description>x</field_array_description>
          </field_array>
          <field_description order="before">
          
  <para>Group 1 interrupt active priorities. Possible values of each bit are:</para>

          </field_description>
            <field_values>
                  <field_value_instance>
        <field_value>0b0</field_value>
        <field_value_description>
  <para>There is no Group 1 interrupt active with this priority level, or all active Group 1 interrupts with this priority level have undergone priority-drop.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b1</field_value>
        <field_value_description>
  <para>There is a Group 1 interrupt active with this priority level which has not undergone priority drop.</para>
</field_value_description>
    </field_value_instance>
            </field_values>
          <field_description order="after">
            
  <para>The correspondence between priority levels and bits depends on the number of bits of priority that are implemented.</para>
<para>If 5 bits of preemption are implemented (bits [7:3] of priority), then there are 32 preemption levels, and the active state of these preemption levels are held in ICH_AP1R0_EL2 in the bits corresponding to Priority[7:3].</para>
<para>If 6 bits of preemption are implemented (bits [7:2] of priority), then there are 64 preemption levels, and:</para>
<list type="unordered">
<listitem><content>The active state of preemption levels 0 - 124 are held in ICH_AP1R0_EL2 in the bits corresponding to 0:Priority[6:2].</content>
</listitem><listitem><content>The active state of preemption levels 128 - 252 are held in ICH_AP1R1_EL2 in the bits corresponding to 1:Priority[6:2].</content>
</listitem></list>
<para>If 7 bits of preemption are implemented (bits [7:1] of priority), then there are 128 preemption levels, and:</para>
<list type="unordered">
<listitem><content>The active state of preemption levels 0 - 62 are held in ICH_AP1R0_EL2 in the bits corresponding to 00:Priority[5:1].</content>
</listitem><listitem><content>The active state of preemption levels 64 - 126 are held in ICH_AP1R1_EL2 in the bits corresponding to 01:Priority[5:1].</content>
</listitem><listitem><content>The active state of preemption levels 128 - 190 are held in ICH_AP1R2_EL2 in the bits corresponding to 10:Priority[5:1].</content>
</listitem><listitem><content>The active state of preemption levels 192 - 254 are held in ICH_AP1R3_EL2 in the bits corresponding to 11:Priority[5:1].</content>
</listitem></list>
<note><para>Having the bit corresponding to a priority set to 1 in both <register_link state="AArch64" id="AArch64-ich_ap0rn_el2.xml">ICH_AP0R&lt;n&gt;_EL2</register_link> and ICH_AP1R&lt;n&gt;_EL2 might result in <arm-defined-word>UNPREDICTABLE</arm-defined-word> behavior of the interrupt prioritization system for virtual interrupts.</para></note>

          </field_description>
          <field_resets>
  
  
    
    
        <field_reset>
          
      <field_reset_number>0</field_reset_number>
  
        </field_reset>
  
</field_resets>
      </field>
    <text_after_fields>
    
  <para>This register is always used for legacy VMs, regardless of the group of the virtual interrupt. Reads and writes to <register_link state="ext" id="ext-gicv_aprn.xml">GICV_APR&lt;n&gt;</register_link> access <register_link state="AArch64" id="AArch64-ich_ap1rn_el2.xml">ICH_AP1R&lt;n&gt;_EL2</register_link>. For more information about support for legacy VMs, see <xref browsertext="'Support for legacy operation of VMs' in ARMÂ® Generic Interrupt Controller Architecture Specification, GIC architecture version 3.0 and version 4.0 (ARM IHI 0069)" filename="AS_legacy_operation_and_asymmetric_operation.fm" linkend="BABBCFDB"></xref>.</para>

    </text_after_fields>
  </fields>
  <reg_fieldset length="64">
      
        <fieldat id="0_63_32" msb="63" lsb="32"/>
        <fieldat id="P&lt;x&gt;_31_0" msb="31" lsb="0"/>
    </reg_fieldset>

      </reg_fieldsets>
        <reg_variables>
              <reg_variable variable="n" max="3"/>
        </reg_variables>
      


<access_mechanisms>
  
    
      <access_permission_text>
        <para>ICH_AP1R1_EL2 is only implemented in implementations that support 6 or more bits of preemption. ICH_AP1R2_EL2 and ICH_AP1R3_EL2 are only implemented in implementations that support 7 bits of preemption. Unimplemented registers are <arm-defined-word>UNDEFINED</arm-defined-word>.</para>

      </access_permission_text>
      <access_permission_text>
        <note><para>The number of bits of preemption is indicated by <register_link state="AArch64" id="AArch64-ich_vtr_el2.xml">ICH_VTR_EL2</register_link>.PREbits</para></note>
      </access_permission_text>
      <access_permission_text>
        <para>Writing to these registers with any value other than the last read value of the register (or <hexnumber>0x00000000</hexnumber> for a newly set up virtual machine) can result in <arm-defined-word>UNPREDICTABLE</arm-defined-word> behavior of the virtual interrupt prioritization system allowing either:</para>

      </access_permission_text>
      <access_permission_text>
        <para>Writing to the active priority registers in any order other than the following order will result in <arm-defined-word>UNPREDICTABLE</arm-defined-word> behavior:</para>
      </access_permission_text>


      <access_mechanism accessor="MRS ICH_AP1R&lt;n&gt;_EL2">
        <encoding>
          
          <access_instruction>MRS &lt;Xt&gt;, ICH_AP1R&lt;n&gt;_EL2</access_instruction>
            
            <enc n="op0" v="0b11"/>
            
            <enc n="op1" v="0b100"/>
            
            <enc n="CRn" v="0b1100"/>
            
            <enc n="CRm" v="0b1001"/>
            
            <enc n="op2" v="0b0:n[1:0]"/>
        </encoding>
          <access_permission>
            <ps name="MRS" sections="1" secttype="access_permission">
              <pstext>
if PSTATE.EL == EL0 then
    UNDEFINED;
elsif PSTATE.EL == EL1 then
    if EL2Enabled() &amp;&amp; HCR_EL2.&lt;NV2,NV&gt; == '11' then
        return NVMem[0x4A0+8*UInt(op2&lt;1:0&gt;)];
    elsif EL2Enabled() &amp;&amp; HCR_EL2.NV == '1' then
        AArch64.SystemAccessTrap(EL2, 0x18);
    else
        UNDEFINED;
elsif PSTATE.EL == EL2 then
    if ICC_SRE_EL2.SRE == '0' then
        AArch64.SystemAccessTrap(EL2, 0x18);
    else
        return ICH_AP1R_EL2[UInt(op2&lt;1:0&gt;)];
elsif PSTATE.EL == EL3 then
    if ICC_SRE_EL3.SRE == '0' then
        AArch64.SystemAccessTrap(EL3, 0x18);
    else
        return ICH_AP1R_EL2[UInt(op2&lt;1:0&gt;)];
              </pstext>
            </ps>
          </access_permission>
      </access_mechanism>
      <access_mechanism accessor="MSRregister ICH_AP1R&lt;n&gt;_EL2">
        <encoding>
          
          <access_instruction>MSR ICH_AP1R&lt;n&gt;_EL2, &lt;Xt&gt;</access_instruction>
            
            <enc n="op0" v="0b11"/>
            
            <enc n="op1" v="0b100"/>
            
            <enc n="CRn" v="0b1100"/>
            
            <enc n="CRm" v="0b1001"/>
            
            <enc n="op2" v="0b0:n[1:0]"/>
        </encoding>
          <access_permission>
            <ps name="MSRregister" sections="1" secttype="access_permission">
              <pstext>
if PSTATE.EL == EL0 then
    UNDEFINED;
elsif PSTATE.EL == EL1 then
    if EL2Enabled() &amp;&amp; HCR_EL2.&lt;NV2,NV&gt; == '11' then
        NVMem[0x4A0+8*UInt(op2&lt;1:0&gt;)] = X[t];
    elsif EL2Enabled() &amp;&amp; HCR_EL2.NV == '1' then
        AArch64.SystemAccessTrap(EL2, 0x18);
    else
        UNDEFINED;
elsif PSTATE.EL == EL2 then
    if ICC_SRE_EL2.SRE == '0' then
        AArch64.SystemAccessTrap(EL2, 0x18);
    else
        ICH_AP1R_EL2[UInt(op2&lt;1:0&gt;)] = X[t];
elsif PSTATE.EL == EL3 then
    if ICC_SRE_EL3.SRE == '0' then
        AArch64.SystemAccessTrap(EL3, 0x18);
    else
        ICH_AP1R_EL2[UInt(op2&lt;1:0&gt;)] = X[t];
              </pstext>
            </ps>
          </access_permission>
      </access_mechanism>
</access_mechanisms>

      <arch_variants>
      </arch_variants>
  </register>
</registers>

    <timestamp>01/07/2020 15:57; 80324f0b9997bede489cc15ad1565345720bcd2a</timestamp>
</register_page>