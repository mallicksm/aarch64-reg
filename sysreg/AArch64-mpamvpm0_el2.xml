<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE register_page SYSTEM "registers.dtd">
<!-- Copyright (c) 2010-2018 Arm Limited or its affiliates. All rights reserved. -->
<!-- This document is Non-Confidential. This document may only be used and distributed in accordance with the terms of the agreement entered into by Arm and the party that Arm delivered this document to. -->
<?xml-stylesheet href="one_register.xsl" type="text/xsl" ?>






<register_page>
  <registers>
    <register execution_state="AArch64" is_register="True" is_internal="True" is_banked="False" is_stub_entry="False">
      <reg_short_name>MPAMVPM0_EL2</reg_short_name>
      <reg_long_name>MPAM Virtual PARTID Mapping Register 0</reg_long_name>
      
        <reg_condition otherwise="UNDEFINED">when FEAT_MPAM is implemented and MPAMIDR_EL1.HAS_HCR == 1</reg_condition>
      

          <reg_reset_value></reg_reset_value>
      <reg_mappings>
      </reg_mappings>
      <reg_purpose>
        
    
      <purpose_text>
        <para>MPAMVPM0_EL2 provides mappings from virtual PARTIDs 0 - 3 to physical PARTIDs.</para>

      </purpose_text>
      <purpose_text>
        <para><register_link state="AArch64" id="AArch64-mpamidr_el1.xml">MPAMIDR_EL1</register_link>.VPMR_MAX field gives the index of the highest implemented MPAMVPM&lt;n&gt;_EL2 register. VPMR_MAX can be as large as 7 (8 registers) or 32 virtual PARTIDs. If <register_link state="AArch64" id="AArch64-mpamidr_el1.xml">MPAMIDR_EL1</register_link>.VPMR_MAX == 0, there is only a single MPAMVPM&lt;n&gt;_EL2 register, <register_link state="AArch64" id="AArch64-mpamvpm0_el2.xml">MPAMVPM0_EL2</register_link>.</para>

      </purpose_text>
      <purpose_text>
        <para>Virtual PARTID mapping is enabled by <register_link state="AArch64" id="AArch64-mpamhcr_el2.xml">MPAMHCR_EL2</register_link>.EL1_VPMEN for PARTIDs in <register_link state="AArch64" id="AArch64-mpam1_el1.xml">MPAM1_EL1</register_link> and by <register_link state="AArch64" id="AArch64-mpamhcr_el2.xml">MPAMHCR_EL2</register_link>.EL0_VPMEN for PARTIDs in <register_link state="AArch64" id="AArch64-mpam0_el1.xml">MPAM0_EL1</register_link>.</para>

      </purpose_text>
      <purpose_text>
        <para>A virtual-to-physical PARTID mapping entry, PhyPARTID&lt;n&gt;, is only valid when the <register_link state="AArch64" id="AArch64-mpamvpmv_el2.xml">MPAMVPMV_EL2</register_link>.VPM_V bit in bit position n is set to 1.</para>
      </purpose_text>

      </reg_purpose>
      <reg_groups>
          <reg_group>Memory Partitioning and Monitoring registers</reg_group>
      </reg_groups>
      <reg_configuration>
        
    
      <configuration_text>
        <para>This register has no effect if EL2 is not enabled in the current Security state.</para>
      </configuration_text>

      </reg_configuration>
      <reg_attributes>
          <attributes_text>
            <para>MPAMVPM0_EL2 is a 64-bit register.</para>
          </attributes_text>
      </reg_attributes>
      <reg_fieldsets>
        





  <fields length="64">
    <text_before_fields>
      
  

    </text_before_fields>
    
        <field
           id="PhyPARTID3_63_48"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>PhyPARTID3</field_name>
          <field_msb>63</field_msb>
          <field_lsb>48</field_lsb>
          <field_description order="before">
          
  <para>Virtual PARTID Mapping Entry for virtual PARTID 3.  PhyPARTID3 gives the mapping of virtual PARTID 3 to a physical PARTID.</para>

          </field_description>
            <field_values>
            </field_values>
          <field_description order="after">
            
  

          </field_description>
          <field_resets>
  
  
    
    
        <field_reset>
          
      <field_reset_standard_text>AU</field_reset_standard_text>
  
        </field_reset>
  
</field_resets>
      </field>
        <field
           id="PhyPARTID2_47_32"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>PhyPARTID2</field_name>
          <field_msb>47</field_msb>
          <field_lsb>32</field_lsb>
          <field_description order="before">
          
  <para>Virtual PARTID Mapping Entry for virtual PARTID 2.  PhyPARTID2 gives the mapping of virtual PARTID 2 to a physical PARTID.</para>

          </field_description>
            <field_values>
            </field_values>
          <field_description order="after">
            
  

          </field_description>
          <field_resets>
  
  
    
    
        <field_reset>
          
      <field_reset_standard_text>AU</field_reset_standard_text>
  
        </field_reset>
  
</field_resets>
      </field>
        <field
           id="PhyPARTID1_31_16"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>PhyPARTID1</field_name>
          <field_msb>31</field_msb>
          <field_lsb>16</field_lsb>
          <field_description order="before">
          
  <para>Virtual PARTID Mapping Entry for virtual PARTID 1.  PhyPARTID1 gives the mapping of virtual PARTID 1 to a physical PARTID.</para>

          </field_description>
            <field_values>
            </field_values>
          <field_description order="after">
            
  

          </field_description>
          <field_resets>
  
  
    
    
        <field_reset>
          
      <field_reset_standard_text>AU</field_reset_standard_text>
  
        </field_reset>
  
</field_resets>
      </field>
        <field
           id="PhyPARTID0_15_0"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>PhyPARTID0</field_name>
          <field_msb>15</field_msb>
          <field_lsb>0</field_lsb>
          <field_description order="before">
          
  <para>Virtual PARTID Mapping Entry for virtual PARTID 0.  PhyPARTID0 gives the mapping of virtual PARTID 0 to a physical PARTID.</para>

          </field_description>
            <field_values>
            </field_values>
          <field_description order="after">
            
  

          </field_description>
          <field_resets>
  
  
    
    
        <field_reset>
          
      <field_reset_standard_text>AU</field_reset_standard_text>
  
        </field_reset>
  
</field_resets>
      </field>
    <text_after_fields>
    
  

    </text_after_fields>
  </fields>
  <reg_fieldset length="64">
      
        <fieldat id="PhyPARTID3_63_48" msb="63" lsb="48"/>
        <fieldat id="PhyPARTID2_47_32" msb="47" lsb="32"/>
        <fieldat id="PhyPARTID1_31_16" msb="31" lsb="16"/>
        <fieldat id="PhyPARTID0_15_0" msb="15" lsb="0"/>
    </reg_fieldset>

      </reg_fieldsets>
      


<access_mechanisms>
  


      <access_mechanism accessor="MRS MPAMVPM0_EL2">
        <encoding>
          
          <access_instruction>MRS &lt;Xt&gt;, MPAMVPM0_EL2</access_instruction>
            
            <enc n="op0" v="0b11"/>
            
            <enc n="op1" v="0b100"/>
            
            <enc n="CRn" v="0b1010"/>
            
            <enc n="CRm" v="0b0110"/>
            
            <enc n="op2" v="0b000"/>
        </encoding>
          <access_permission>
            <ps name="MRS" sections="1" secttype="access_permission">
              <pstext>
if PSTATE.EL == EL0 then
    UNDEFINED;
elsif PSTATE.EL == EL1 then
    if EL2Enabled() &amp;&amp; HCR_EL2.&lt;NV2,NV&gt; == '11' then
        return NVMem[0x940];
    elsif EL2Enabled() &amp;&amp; HCR_EL2.NV == '1' then
        if HaveEL(EL3) &amp;&amp; MPAM3_EL3.TRAPLOWER == '1' then
            if Halted() &amp;&amp; EDSCR.SDD == '1' then
                UNDEFINED;
            else
                AArch64.SystemAccessTrap(EL3, 0x18);
        else
            AArch64.SystemAccessTrap(EL2, 0x18);
    else
        UNDEFINED;
elsif PSTATE.EL == EL2 then
    if HaveEL(EL3) &amp;&amp; MPAM3_EL3.TRAPLOWER == '1' then
        if Halted() &amp;&amp; EDSCR.SDD == '1' then
            UNDEFINED;
        else
            AArch64.SystemAccessTrap(EL3, 0x18);
    else
        return MPAMVPM0_EL2;
elsif PSTATE.EL == EL3 then
    return MPAMVPM0_EL2;
              </pstext>
            </ps>
          </access_permission>
      </access_mechanism>
      <access_mechanism accessor="MSRregister MPAMVPM0_EL2">
        <encoding>
          
          <access_instruction>MSR MPAMVPM0_EL2, &lt;Xt&gt;</access_instruction>
            
            <enc n="op0" v="0b11"/>
            
            <enc n="op1" v="0b100"/>
            
            <enc n="CRn" v="0b1010"/>
            
            <enc n="CRm" v="0b0110"/>
            
            <enc n="op2" v="0b000"/>
        </encoding>
          <access_permission>
            <ps name="MSRregister" sections="1" secttype="access_permission">
              <pstext>
if PSTATE.EL == EL0 then
    UNDEFINED;
elsif PSTATE.EL == EL1 then
    if EL2Enabled() &amp;&amp; HCR_EL2.&lt;NV2,NV&gt; == '11' then
        NVMem[0x940] = X[t];
    elsif EL2Enabled() &amp;&amp; HCR_EL2.NV == '1' then
        if HaveEL(EL3) &amp;&amp; MPAM3_EL3.TRAPLOWER == '1' then
            if Halted() &amp;&amp; EDSCR.SDD == '1' then
                UNDEFINED;
            else
                AArch64.SystemAccessTrap(EL3, 0x18);
        else
            AArch64.SystemAccessTrap(EL2, 0x18);
    else
        UNDEFINED;
elsif PSTATE.EL == EL2 then
    if HaveEL(EL3) &amp;&amp; MPAM3_EL3.TRAPLOWER == '1' then
        if Halted() &amp;&amp; EDSCR.SDD == '1' then
            UNDEFINED;
        else
            AArch64.SystemAccessTrap(EL3, 0x18);
    else
        MPAMVPM0_EL2 = X[t];
elsif PSTATE.EL == EL3 then
    MPAMVPM0_EL2 = X[t];
              </pstext>
            </ps>
          </access_permission>
      </access_mechanism>
</access_mechanisms>

      <arch_variants>
      </arch_variants>
  </register>
</registers>

    <timestamp>01/07/2020 15:57; 80324f0b9997bede489cc15ad1565345720bcd2a</timestamp>
</register_page>